<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Dataworkspublic\V20240518\Models\CreateAlertRuleRequest;

use AlibabaCloud\SDK\Dataworkspublic\V20240518\Models\CreateAlertRuleRequest\triggerCondition\extension;
use AlibabaCloud\SDK\Dataworkspublic\V20240518\Models\CreateAlertRuleRequest\triggerCondition\target;
use AlibabaCloud\Tea\Model;

class triggerCondition extends Model
{
    /**
     * @description The extended information about the rule. This parameter is required for specific types of alerts.
     *
     * @var extension
     */
    public $extension;

    /**
     * @description The monitored objects.
     *
     * @var target
     */
    public $target;

    /**
     * @description The alert type. Valid values:
     *
     *   Finished: An instance is successfully run.
     *   UnFinished: An instance does not finish running before a specified point in time.
     *   Error: An error occurs on an instance.
     *   CycleUnfinished: An instance does not finish running as expected within a specific cycle.
     *   Timeout: An instance times out.
     *   InstanceTransferComplete: An instance is generated by the auto triggered node.
     *   InstanceTransferFluctuate: The number of generated instances fluctuates.
     *   ExhaustedError: An error persists after an instance is automatically rerun.
     *   InstanceKeyword: An instance with errors contains specified keywords.
     *   InstanceErrorCount: The number of instances on which an error occurs reaches a specified threshold.
     *   InstanceErrorPercentage: The proportion of instances on which an error occurs in the workspace to the total number of instances reaches a specified threshold.
     *   ResourceGroupPercentage: The usage rate of the resource group reaches a specified threshold.
     *   ResourceGroupWaitCount: The number of instances that are waiting for resources in the resource group reaches a specified threshold.
     *
     * @example Error
     *
     * @var string
     */
    public $type;
    protected $_name = [
        'extension' => 'Extension',
        'target'    => 'Target',
        'type'      => 'Type',
    ];

    public function validate()
    {
    }

    public function toMap()
    {
        $res = [];
        if (null !== $this->extension) {
            $res['Extension'] = null !== $this->extension ? $this->extension->toMap() : null;
        }
        if (null !== $this->target) {
            $res['Target'] = null !== $this->target ? $this->target->toMap() : null;
        }
        if (null !== $this->type) {
            $res['Type'] = $this->type;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return triggerCondition
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['Extension'])) {
            $model->extension = extension::fromMap($map['Extension']);
        }
        if (isset($map['Target'])) {
            $model->target = target::fromMap($map['Target']);
        }
        if (isset($map['Type'])) {
            $model->type = $map['Type'];
        }

        return $model;
    }
}
