<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Csas\V20230120\Models\GetPrivateAccessApplicationResponseBody;

use AlibabaCloud\SDK\Csas\V20230120\Models\GetPrivateAccessApplicationResponseBody\application\portRanges;
use AlibabaCloud\SDK\Csas\V20230120\Models\PAL7Config;
use AlibabaCloud\Tea\Model;

class application extends Model
{
    /**
     * @description The addresses of the office applications.
     *
     * @var string[]
     */
    public $addresses;

    /**
     * @description The ID of the office application.
     *
     * @example pa-application-e12860ef6c48****
     *
     * @var string
     */
    public $applicationId;

    /**
     * @var int
     */
    public $autoGenerated;

    /**
     * @description The browser access mode. Valid values:
     *
     *   **Enabled**
     *   **Disabled**
     *
     * @example Enabled
     *
     * @var string
     */
    public $browserAccessStatus;

    /**
     * @description The IDs of connectors.
     *
     * @var string[]
     */
    public $connectorIds;

    /**
     * @description The creation time of the office application.
     *
     * @example 2022-08-30 16:50:32
     *
     * @var string
     */
    public $createTime;

    /**
     * @description The description of the office application.
     *
     * @var string
     */
    public $description;

    /**
     * @description The browser access mode parameter. The parameter indicates the configurations of Layer 7 applications.
     *
     * @var PAL7Config
     */
    public $l7Config;

    /**
     * @description The browser access mode parameter. The parameter indicates the domain name that the proxy gateway uses.
     *
     * @example app.example.com
     *
     * @var string
     */
    public $l7ProxyDomainAutomatic;

    /**
     * @description The browser access mode parameter. The parameter indicates the custom domain name of the proxy gateway.
     *
     * @example app.example.com
     *
     * @var string
     */
    public $l7ProxyDomainCustom;

    /**
     * @description The name of the office application.
     *
     * @example private_access_application_name
     *
     * @var string
     */
    public $name;

    /**
     * @description The IDs of the private access policies.
     *
     * @var string[]
     */
    public $policyIds;

    /**
     * @description The port ranges of the office applications. Multiple port ranges cannot be duplicated or overlapped.
     *
     * @var portRanges[]
     */
    public $portRanges;

    /**
     * @description The protocol that is used by the office application. Valid values:
     *
     *   **All**
     *   **TCP**
     *   **UDP**
     *
     * @example All
     *
     * @var string
     */
    public $protocol;

    /**
     * @description The status of the office application. Valid values:
     *
     *   **Enabled**
     *   **Disabled**
     *
     * @example Enabled
     *
     * @var string
     */
    public $status;

    /**
     * @description The IDs of the tags for the office applications.
     *
     * @var string[]
     */
    public $tagIds;
    protected $_name = [
        'addresses' => 'Addresses',
        'applicationId' => 'ApplicationId',
        'autoGenerated' => 'AutoGenerated',
        'browserAccessStatus' => 'BrowserAccessStatus',
        'connectorIds' => 'ConnectorIds',
        'createTime' => 'CreateTime',
        'description' => 'Description',
        'l7Config' => 'L7Config',
        'l7ProxyDomainAutomatic' => 'L7ProxyDomainAutomatic',
        'l7ProxyDomainCustom' => 'L7ProxyDomainCustom',
        'name' => 'Name',
        'policyIds' => 'PolicyIds',
        'portRanges' => 'PortRanges',
        'protocol' => 'Protocol',
        'status' => 'Status',
        'tagIds' => 'TagIds',
    ];

    public function validate() {}

    public function toMap()
    {
        $res = [];
        if (null !== $this->addresses) {
            $res['Addresses'] = $this->addresses;
        }
        if (null !== $this->applicationId) {
            $res['ApplicationId'] = $this->applicationId;
        }
        if (null !== $this->autoGenerated) {
            $res['AutoGenerated'] = $this->autoGenerated;
        }
        if (null !== $this->browserAccessStatus) {
            $res['BrowserAccessStatus'] = $this->browserAccessStatus;
        }
        if (null !== $this->connectorIds) {
            $res['ConnectorIds'] = $this->connectorIds;
        }
        if (null !== $this->createTime) {
            $res['CreateTime'] = $this->createTime;
        }
        if (null !== $this->description) {
            $res['Description'] = $this->description;
        }
        if (null !== $this->l7Config) {
            $res['L7Config'] = null !== $this->l7Config ? $this->l7Config->toMap() : null;
        }
        if (null !== $this->l7ProxyDomainAutomatic) {
            $res['L7ProxyDomainAutomatic'] = $this->l7ProxyDomainAutomatic;
        }
        if (null !== $this->l7ProxyDomainCustom) {
            $res['L7ProxyDomainCustom'] = $this->l7ProxyDomainCustom;
        }
        if (null !== $this->name) {
            $res['Name'] = $this->name;
        }
        if (null !== $this->policyIds) {
            $res['PolicyIds'] = $this->policyIds;
        }
        if (null !== $this->portRanges) {
            $res['PortRanges'] = [];
            if (null !== $this->portRanges && \is_array($this->portRanges)) {
                $n = 0;
                foreach ($this->portRanges as $item) {
                    $res['PortRanges'][$n++] = null !== $item ? $item->toMap() : $item;
                }
            }
        }
        if (null !== $this->protocol) {
            $res['Protocol'] = $this->protocol;
        }
        if (null !== $this->status) {
            $res['Status'] = $this->status;
        }
        if (null !== $this->tagIds) {
            $res['TagIds'] = $this->tagIds;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return application
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['Addresses'])) {
            if (!empty($map['Addresses'])) {
                $model->addresses = $map['Addresses'];
            }
        }
        if (isset($map['ApplicationId'])) {
            $model->applicationId = $map['ApplicationId'];
        }
        if (isset($map['AutoGenerated'])) {
            $model->autoGenerated = $map['AutoGenerated'];
        }
        if (isset($map['BrowserAccessStatus'])) {
            $model->browserAccessStatus = $map['BrowserAccessStatus'];
        }
        if (isset($map['ConnectorIds'])) {
            if (!empty($map['ConnectorIds'])) {
                $model->connectorIds = $map['ConnectorIds'];
            }
        }
        if (isset($map['CreateTime'])) {
            $model->createTime = $map['CreateTime'];
        }
        if (isset($map['Description'])) {
            $model->description = $map['Description'];
        }
        if (isset($map['L7Config'])) {
            $model->l7Config = PAL7Config::fromMap($map['L7Config']);
        }
        if (isset($map['L7ProxyDomainAutomatic'])) {
            $model->l7ProxyDomainAutomatic = $map['L7ProxyDomainAutomatic'];
        }
        if (isset($map['L7ProxyDomainCustom'])) {
            $model->l7ProxyDomainCustom = $map['L7ProxyDomainCustom'];
        }
        if (isset($map['Name'])) {
            $model->name = $map['Name'];
        }
        if (isset($map['PolicyIds'])) {
            if (!empty($map['PolicyIds'])) {
                $model->policyIds = $map['PolicyIds'];
            }
        }
        if (isset($map['PortRanges'])) {
            if (!empty($map['PortRanges'])) {
                $model->portRanges = [];
                $n = 0;
                foreach ($map['PortRanges'] as $item) {
                    $model->portRanges[$n++] = null !== $item ? portRanges::fromMap($item) : $item;
                }
            }
        }
        if (isset($map['Protocol'])) {
            $model->protocol = $map['Protocol'];
        }
        if (isset($map['Status'])) {
            $model->status = $map['Status'];
        }
        if (isset($map['TagIds'])) {
            if (!empty($map['TagIds'])) {
                $model->tagIds = $map['TagIds'];
            }
        }

        return $model;
    }
}
