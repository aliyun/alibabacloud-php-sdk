<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs;

use AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs\backupJob\detail;
use AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs\backupJob\otsDetail;
use AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs\backupJob\paths;
use AlibabaCloud\Tea\Model;

class backupJob extends Model
{
    /**
     * @description The actual amount of data that is backed up after the system removes duplicate files. Unit: bytes.
     *
     * @example 600
     *
     * @var int
     */
    public $actualBytes;

    /**
     * @description The number of files that are actually processed.
     *
     * @example 8
     *
     * @var int
     */
    public $actualFiles;

    /**
     * @description The actual number of objects that are backed up by the backup job. This parameter is returned only if the value of **SourceType** is **ECS_FILE**.
     *
     * @example 6
     *
     * @var int
     */
    public $actualItems;

    /**
     * @description The backup type. Only **COMPLETE** may be returned, which indicates full backup.
     *
     * @example COMPLETE
     *
     * @var string
     */
    public $backupType;

    /**
     * @description The name of the OSS bucket that is backed up. This parameter is returned only if the value of **SourceType** is **OSS**.
     *
     * @example hbr-backup-oss
     *
     * @var string
     */
    public $bucket;

    /**
     * @description The actual amount of data that is generated by incremental backups. Unit: bytes.
     *
     * @example 800
     *
     * @var int
     */
    public $bytesDone;

    /**
     * @description The total amount of data that is backed up from the data source. Unit: bytes.
     *
     * @example 1000
     *
     * @var int
     */
    public $bytesTotal;

    /**
     * @description The configurations of the incremental file synchronization. This parameter is returned only for data synchronization.
     *
     * @example {"dataSourceId": "ds-123456789", "path": "/changelist"}
     *
     * @var string
     */
    public $changeListPath;

    /**
     * @description The ID of the backup client. This parameter is returned only if the value of **SourceType** is **ECS_FILE**.
     *
     * @example c-*********************
     *
     * @var string
     */
    public $clientId;

    /**
     * @description The time when the backup job was complete. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $completeTime;

    /**
     * @description The time when the file system was created. This parameter is returned only if the value of **SourceType** is **NAS**. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
     *
     * @example 1607436917
     *
     * @var int
     */
    public $createTime;

    /**
     * @description The time when the backup job was created. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $createdTime;

    /**
     * @description The name of the Resource Access Management (RAM) role that is created within the source Alibaba Cloud account and assigned to the current Alibaba Cloud account to authorize the current Alibaba Cloud account to back up data across Alibaba Cloud accounts.
     *
     * @example BackupRole
     *
     * @var string
     */
    public $crossAccountRoleName;

    /**
     * @description The backup type. Valid values:
     *
     *   SELF_ACCOUNT: Data is backed up within the same Alibaba Cloud account.
     *   CROSS_ACCOUNT: Data is backed up across Alibaba Cloud accounts.
     *
     * @example SELF_ACCOUNT
     *
     * @var string
     */
    public $crossAccountType;

    /**
     * @description The ID of the source Alibaba Cloud account that authorizes the current Alibaba Cloud account to back up data across Alibaba Cloud accounts.
     *
     * @example 158975xxxxx4625
     *
     * @var int
     */
    public $crossAccountUserId;

    /**
     * @description The data source details at the destination. This parameter is returned only for data synchronization.
     *
     * @example {\\"prefix\\":\\"/\\"}
     *
     * @var string
     */
    public $destDataSourceDetail;

    /**
     * @description The data source ID at the destination. This parameter is returned only for data synchronization.
     *
     * @example ds-000cov4ufudxklj24zdk
     *
     * @var string
     */
    public $destDataSourceId;

    /**
     * @description The data source type at the destination. This parameter is returned only for data synchronization.
     *
     * @example OSS
     *
     * @var string
     */
    public $destSourceType;

    /**
     * @description The details of the ECS instance backup job.
     *
     * @var detail
     */
    public $detail;

    /**
     * @description The error message that is returned for the backup job.
     *
     * @example PARTIAL_COMPLETE
     *
     * @var string
     */
    public $errorMessage;

    /**
     * @description The paths to the files that are excluded from the backup job. This parameter is returned only if the value of **SourceType** is **ECS_FILE**. The value can be up to 255 characters in length.
     *
     * @example ["/var", "/proc"]
     *
     * @var string
     */
    public $exclude;

    /**
     * @description The ID of the NAS file system. This parameter is returned only if the value of **SourceType** is **NAS**.
     *
     * @example 005494
     *
     * @var string
     */
    public $fileSystemId;

    /**
     * @description The number of files that have been processed.
     *
     * @example 9
     *
     * @var int
     */
    public $filesDone;

    /**
     * @description The total number of files to be processed.
     *
     * @example 10
     *
     * @var int
     */
    public $filesTotal;

    /**
     * @description The identifier of the cluster that is backed up in the container backup job. This parameter is returned only if the value of SourceType is CONTAINER. If the cluster is a Container Service for Kubernetes (ACK) cluster, the value of this parameter is the ACK cluster ID.
     *
     * @var string
     */
    public $identifier;

    /**
     * @description The paths to the files that are included in the backup job.
     *
     * @example ["/home/alice/*.pdf", "/home/bob/*.txt"]
     *
     * @var string
     */
    public $include;

    /**
     * @description The ID of the ECS instance. This parameter is returned only if the value of **SourceType** is **NAS**.
     *
     * @example i-*********************
     *
     * @var string
     */
    public $instanceId;

    /**
     * @description The name of the Tablestore instance.
     *
     * @example instancename
     *
     * @var string
     */
    public $instanceName;

    /**
     * @description The number of objects that are backed up. This parameter is returned only if the value of **SourceType** is **ECS_FILE**.
     *
     * @example 8
     *
     * @var int
     */
    public $itemsDone;

    /**
     * @description The total number of objects in the data source. This parameter is returned only if the value of **SourceType** is **ECS_FILE**.
     *
     * @example 10
     *
     * @var int
     */
    public $itemsTotal;

    /**
     * @description The ID of the backup job.
     *
     * @example job-000g********w7
     *
     * @var string
     */
    public $jobId;

    /**
     * @description The name of the backup job.
     *
     * @example jobname
     *
     * @var string
     */
    public $jobName;

    /**
     * @description Indicates whether Windows Volume Shadow Copy Service (VSS) is used to define a source path. This parameter is returned only if the value of **SourceType** is **ECS_FILE**.
     *
     *   This parameter is available only for Windows ECS instances.
     *   A value of `["UseVSS":true]` indicates that the consistency between the source data and backup data is ensured while data changes occur in the source data.
     *   If VSS is used, multiple directories cannot be backed up at a time.
     *
     * @example {"UseVSS":false}
     *
     * @var string
     */
    public $options;

    /**
     * @description The details of the Tablestore instance.
     *
     * @var otsDetail
     */
    public $otsDetail;

    /**
     * @description The source paths.
     *
     * @var paths
     */
    public $paths;

    /**
     * @description The ID of the backup plan.
     *
     * @example plan-20********35
     *
     * @var string
     */
    public $planId;

    /**
     * @description The prefix of objects that are backed up. This parameter is returned only if the value of **SourceType** is **OSS**.
     *
     * @example example/
     *
     * @var string
     */
    public $prefix;

    /**
     * @description The backup progress. Valid values: 0 to 10000. For example, a value of 10000 indicates that the progress is 100%.
     *
     * @example 10000
     *
     * @var int
     */
    public $progress;

    /**
     * @description The type of the data source. Valid values:
     *
     *   **ECS_FILE**: ECS file.
     *   **OSS**: OSS bucket.
     *   **NAS**: NAS file system.
     *
     * @example ECS_FILE
     *
     * @var string
     */
    public $sourceType;

    /**
     * @description The average speed at which data is backed up. Unit: KB/s.
     *
     * @example 500
     *
     * @var int
     */
    public $speed;

    /**
     * @description The throttling rules. This parameter is returned only if the value of **SourceType** is **ECS_FILE**. Format: `{start}:{end}:{bandwidth}`. Multiple throttling rules are separated by vertical bars (`|`). The time ranges of the throttling rules cannot overlap.
     *
     *   **start**: the start hour.
     *   **end**: the end hour
     *   **bandwidth**: the bandwidth. Unit: KB/s.
     *
     * @example 0:24:5120
     *
     * @var string
     */
    public $speedLimit;

    /**
     * @description The time when the backup job started. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $startTime;

    /**
     * @description The state of the backup job. Valid values:
     *
     *   **COMPLETE**
     *   **PARTIAL_COMPLETE**
     *   **FAILED**
     *
     * @example COMPLETE
     *
     * @var string
     */
    public $status;

    /**
     * @description The name of the table in the Tablestore instance.
     *
     * @example table1
     *
     * @var string
     */
    public $tableName;

    /**
     * @description The time when the backup job was last updated. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $updatedTime;

    /**
     * @description The ID of the backup vault.
     *
     * @example v-0006******q
     *
     * @var string
     */
    public $vaultId;
    protected $_name = [
        'actualBytes'          => 'ActualBytes',
        'actualFiles'          => 'ActualFiles',
        'actualItems'          => 'ActualItems',
        'backupType'           => 'BackupType',
        'bucket'               => 'Bucket',
        'bytesDone'            => 'BytesDone',
        'bytesTotal'           => 'BytesTotal',
        'changeListPath'       => 'ChangeListPath',
        'clientId'             => 'ClientId',
        'completeTime'         => 'CompleteTime',
        'createTime'           => 'CreateTime',
        'createdTime'          => 'CreatedTime',
        'crossAccountRoleName' => 'CrossAccountRoleName',
        'crossAccountType'     => 'CrossAccountType',
        'crossAccountUserId'   => 'CrossAccountUserId',
        'destDataSourceDetail' => 'DestDataSourceDetail',
        'destDataSourceId'     => 'DestDataSourceId',
        'destSourceType'       => 'DestSourceType',
        'detail'               => 'Detail',
        'errorMessage'         => 'ErrorMessage',
        'exclude'              => 'Exclude',
        'fileSystemId'         => 'FileSystemId',
        'filesDone'            => 'FilesDone',
        'filesTotal'           => 'FilesTotal',
        'identifier'           => 'Identifier',
        'include'              => 'Include',
        'instanceId'           => 'InstanceId',
        'instanceName'         => 'InstanceName',
        'itemsDone'            => 'ItemsDone',
        'itemsTotal'           => 'ItemsTotal',
        'jobId'                => 'JobId',
        'jobName'              => 'JobName',
        'options'              => 'Options',
        'otsDetail'            => 'OtsDetail',
        'paths'                => 'Paths',
        'planId'               => 'PlanId',
        'prefix'               => 'Prefix',
        'progress'             => 'Progress',
        'sourceType'           => 'SourceType',
        'speed'                => 'Speed',
        'speedLimit'           => 'SpeedLimit',
        'startTime'            => 'StartTime',
        'status'               => 'Status',
        'tableName'            => 'TableName',
        'updatedTime'          => 'UpdatedTime',
        'vaultId'              => 'VaultId',
    ];

    public function validate()
    {
    }

    public function toMap()
    {
        $res = [];
        if (null !== $this->actualBytes) {
            $res['ActualBytes'] = $this->actualBytes;
        }
        if (null !== $this->actualFiles) {
            $res['ActualFiles'] = $this->actualFiles;
        }
        if (null !== $this->actualItems) {
            $res['ActualItems'] = $this->actualItems;
        }
        if (null !== $this->backupType) {
            $res['BackupType'] = $this->backupType;
        }
        if (null !== $this->bucket) {
            $res['Bucket'] = $this->bucket;
        }
        if (null !== $this->bytesDone) {
            $res['BytesDone'] = $this->bytesDone;
        }
        if (null !== $this->bytesTotal) {
            $res['BytesTotal'] = $this->bytesTotal;
        }
        if (null !== $this->changeListPath) {
            $res['ChangeListPath'] = $this->changeListPath;
        }
        if (null !== $this->clientId) {
            $res['ClientId'] = $this->clientId;
        }
        if (null !== $this->completeTime) {
            $res['CompleteTime'] = $this->completeTime;
        }
        if (null !== $this->createTime) {
            $res['CreateTime'] = $this->createTime;
        }
        if (null !== $this->createdTime) {
            $res['CreatedTime'] = $this->createdTime;
        }
        if (null !== $this->crossAccountRoleName) {
            $res['CrossAccountRoleName'] = $this->crossAccountRoleName;
        }
        if (null !== $this->crossAccountType) {
            $res['CrossAccountType'] = $this->crossAccountType;
        }
        if (null !== $this->crossAccountUserId) {
            $res['CrossAccountUserId'] = $this->crossAccountUserId;
        }
        if (null !== $this->destDataSourceDetail) {
            $res['DestDataSourceDetail'] = $this->destDataSourceDetail;
        }
        if (null !== $this->destDataSourceId) {
            $res['DestDataSourceId'] = $this->destDataSourceId;
        }
        if (null !== $this->destSourceType) {
            $res['DestSourceType'] = $this->destSourceType;
        }
        if (null !== $this->detail) {
            $res['Detail'] = null !== $this->detail ? $this->detail->toMap() : null;
        }
        if (null !== $this->errorMessage) {
            $res['ErrorMessage'] = $this->errorMessage;
        }
        if (null !== $this->exclude) {
            $res['Exclude'] = $this->exclude;
        }
        if (null !== $this->fileSystemId) {
            $res['FileSystemId'] = $this->fileSystemId;
        }
        if (null !== $this->filesDone) {
            $res['FilesDone'] = $this->filesDone;
        }
        if (null !== $this->filesTotal) {
            $res['FilesTotal'] = $this->filesTotal;
        }
        if (null !== $this->identifier) {
            $res['Identifier'] = $this->identifier;
        }
        if (null !== $this->include) {
            $res['Include'] = $this->include;
        }
        if (null !== $this->instanceId) {
            $res['InstanceId'] = $this->instanceId;
        }
        if (null !== $this->instanceName) {
            $res['InstanceName'] = $this->instanceName;
        }
        if (null !== $this->itemsDone) {
            $res['ItemsDone'] = $this->itemsDone;
        }
        if (null !== $this->itemsTotal) {
            $res['ItemsTotal'] = $this->itemsTotal;
        }
        if (null !== $this->jobId) {
            $res['JobId'] = $this->jobId;
        }
        if (null !== $this->jobName) {
            $res['JobName'] = $this->jobName;
        }
        if (null !== $this->options) {
            $res['Options'] = $this->options;
        }
        if (null !== $this->otsDetail) {
            $res['OtsDetail'] = null !== $this->otsDetail ? $this->otsDetail->toMap() : null;
        }
        if (null !== $this->paths) {
            $res['Paths'] = null !== $this->paths ? $this->paths->toMap() : null;
        }
        if (null !== $this->planId) {
            $res['PlanId'] = $this->planId;
        }
        if (null !== $this->prefix) {
            $res['Prefix'] = $this->prefix;
        }
        if (null !== $this->progress) {
            $res['Progress'] = $this->progress;
        }
        if (null !== $this->sourceType) {
            $res['SourceType'] = $this->sourceType;
        }
        if (null !== $this->speed) {
            $res['Speed'] = $this->speed;
        }
        if (null !== $this->speedLimit) {
            $res['SpeedLimit'] = $this->speedLimit;
        }
        if (null !== $this->startTime) {
            $res['StartTime'] = $this->startTime;
        }
        if (null !== $this->status) {
            $res['Status'] = $this->status;
        }
        if (null !== $this->tableName) {
            $res['TableName'] = $this->tableName;
        }
        if (null !== $this->updatedTime) {
            $res['UpdatedTime'] = $this->updatedTime;
        }
        if (null !== $this->vaultId) {
            $res['VaultId'] = $this->vaultId;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return backupJob
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['ActualBytes'])) {
            $model->actualBytes = $map['ActualBytes'];
        }
        if (isset($map['ActualFiles'])) {
            $model->actualFiles = $map['ActualFiles'];
        }
        if (isset($map['ActualItems'])) {
            $model->actualItems = $map['ActualItems'];
        }
        if (isset($map['BackupType'])) {
            $model->backupType = $map['BackupType'];
        }
        if (isset($map['Bucket'])) {
            $model->bucket = $map['Bucket'];
        }
        if (isset($map['BytesDone'])) {
            $model->bytesDone = $map['BytesDone'];
        }
        if (isset($map['BytesTotal'])) {
            $model->bytesTotal = $map['BytesTotal'];
        }
        if (isset($map['ChangeListPath'])) {
            $model->changeListPath = $map['ChangeListPath'];
        }
        if (isset($map['ClientId'])) {
            $model->clientId = $map['ClientId'];
        }
        if (isset($map['CompleteTime'])) {
            $model->completeTime = $map['CompleteTime'];
        }
        if (isset($map['CreateTime'])) {
            $model->createTime = $map['CreateTime'];
        }
        if (isset($map['CreatedTime'])) {
            $model->createdTime = $map['CreatedTime'];
        }
        if (isset($map['CrossAccountRoleName'])) {
            $model->crossAccountRoleName = $map['CrossAccountRoleName'];
        }
        if (isset($map['CrossAccountType'])) {
            $model->crossAccountType = $map['CrossAccountType'];
        }
        if (isset($map['CrossAccountUserId'])) {
            $model->crossAccountUserId = $map['CrossAccountUserId'];
        }
        if (isset($map['DestDataSourceDetail'])) {
            $model->destDataSourceDetail = $map['DestDataSourceDetail'];
        }
        if (isset($map['DestDataSourceId'])) {
            $model->destDataSourceId = $map['DestDataSourceId'];
        }
        if (isset($map['DestSourceType'])) {
            $model->destSourceType = $map['DestSourceType'];
        }
        if (isset($map['Detail'])) {
            $model->detail = detail::fromMap($map['Detail']);
        }
        if (isset($map['ErrorMessage'])) {
            $model->errorMessage = $map['ErrorMessage'];
        }
        if (isset($map['Exclude'])) {
            $model->exclude = $map['Exclude'];
        }
        if (isset($map['FileSystemId'])) {
            $model->fileSystemId = $map['FileSystemId'];
        }
        if (isset($map['FilesDone'])) {
            $model->filesDone = $map['FilesDone'];
        }
        if (isset($map['FilesTotal'])) {
            $model->filesTotal = $map['FilesTotal'];
        }
        if (isset($map['Identifier'])) {
            $model->identifier = $map['Identifier'];
        }
        if (isset($map['Include'])) {
            $model->include = $map['Include'];
        }
        if (isset($map['InstanceId'])) {
            $model->instanceId = $map['InstanceId'];
        }
        if (isset($map['InstanceName'])) {
            $model->instanceName = $map['InstanceName'];
        }
        if (isset($map['ItemsDone'])) {
            $model->itemsDone = $map['ItemsDone'];
        }
        if (isset($map['ItemsTotal'])) {
            $model->itemsTotal = $map['ItemsTotal'];
        }
        if (isset($map['JobId'])) {
            $model->jobId = $map['JobId'];
        }
        if (isset($map['JobName'])) {
            $model->jobName = $map['JobName'];
        }
        if (isset($map['Options'])) {
            $model->options = $map['Options'];
        }
        if (isset($map['OtsDetail'])) {
            $model->otsDetail = otsDetail::fromMap($map['OtsDetail']);
        }
        if (isset($map['Paths'])) {
            $model->paths = paths::fromMap($map['Paths']);
        }
        if (isset($map['PlanId'])) {
            $model->planId = $map['PlanId'];
        }
        if (isset($map['Prefix'])) {
            $model->prefix = $map['Prefix'];
        }
        if (isset($map['Progress'])) {
            $model->progress = $map['Progress'];
        }
        if (isset($map['SourceType'])) {
            $model->sourceType = $map['SourceType'];
        }
        if (isset($map['Speed'])) {
            $model->speed = $map['Speed'];
        }
        if (isset($map['SpeedLimit'])) {
            $model->speedLimit = $map['SpeedLimit'];
        }
        if (isset($map['StartTime'])) {
            $model->startTime = $map['StartTime'];
        }
        if (isset($map['Status'])) {
            $model->status = $map['Status'];
        }
        if (isset($map['TableName'])) {
            $model->tableName = $map['TableName'];
        }
        if (isset($map['UpdatedTime'])) {
            $model->updatedTime = $map['UpdatedTime'];
        }
        if (isset($map['VaultId'])) {
            $model->vaultId = $map['VaultId'];
        }

        return $model;
    }
}
