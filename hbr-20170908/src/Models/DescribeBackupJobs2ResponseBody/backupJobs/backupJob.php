<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs;

use AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs\backupJob\detail;
use AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs\backupJob\otsDetail;
use AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs\backupJob\paths;
use AlibabaCloud\SDK\Hbr\V20170908\Models\DescribeBackupJobs2ResponseBody\backupJobs\backupJob\report;
use AlibabaCloud\Tea\Model;

class backupJob extends Model
{
    /**
     * @description The actual amount of data that is backed up after duplicates are removed. Unit: bytes.
     *
     * @example 600
     *
     * @var int
     */
    public $actualBytes;

    /**
     * @description The number of files that are actually processed.
     *
     * @example 8
     *
     * @var int
     */
    public $actualFiles;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the actual number of objects that are backed up by the backup job.
     *
     * @example 6
     *
     * @var int
     */
    public $actualItems;

    /**
     * @description The backup type. Valid value: **COMPLETE**, which indicates full backup.
     *
     * @example COMPLETE
     *
     * @var string
     */
    public $backupType;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **OSS**. This parameter indicates the name of the OSS bucket that is backed up.
     *
     * @example hbr-backup-oss
     *
     * @var string
     */
    public $bucket;

    /**
     * @description The actual amount of data that is generated by incremental backups. Unit: bytes.
     *
     * @example 800
     *
     * @var int
     */
    public $bytesDone;

    /**
     * @description The total amount of data that is backed up from the data source. Unit: bytes.
     *
     * @example 1000
     *
     * @var int
     */
    public $bytesTotal;

    /**
     * @description The data source details at the destination. Thisparameter is returned only for data synchronization.
     *
     * @example {"dataSourceId": "ds-123456789", "path": "/changelist"}
     *
     * @var string
     */
    public $changeListPath;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the ID of the backup client.
     *
     * @example c-*********************
     *
     * @var string
     */
    public $clientId;

    /**
     * @description The time when the backup job was completed. This value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $completeTime;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **NAS**. This parameter indicates the time when the file system was created. This value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1607436917
     *
     * @var int
     */
    public $createTime;

    /**
     * @description The time when the backup job was created. This value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $createdTime;

    /**
     * @description The name of the RAM role that is created within the source Alibaba Cloud account and assigned to the current Alibaba Cloud account to authorize the current Alibaba Cloud account to back up data across Alibaba Cloud accounts.
     *
     * @example BackupRole
     *
     * @var string
     */
    public $crossAccountRoleName;

    /**
     * @description Specifies whether data is backed up within the same Alibaba Cloud account or across Alibaba Cloud accounts. Valid values:
     *
     *   SELF_ACCOUNT: Data is backed up within the same Alibaba Cloud account.
     *   CROSS_ACCOUNT: Data is backed up across Alibaba Cloud accounts.
     *
     * @example SELF_ACCOUNT
     *
     * @var string
     */
    public $crossAccountType;

    /**
     * @description The ID of the source Alibaba Cloud account that authorizes the current Alibaba Cloud account to back up data across Alibaba Cloud accounts.
     *
     * @example 158975xxxxx4625
     *
     * @var int
     */
    public $crossAccountUserId;

    /**
     * @description Destination data source details. (Required only for synchronization)
     *
     * @example {\\"prefix\\":\\"/\\"}
     *
     * @var string
     */
    public $destDataSourceDetail;

    /**
     * @description Destination data source ID. (Required only for synchronization)
     *
     * @example ds-000cov4ufudxklj24zdk
     *
     * @var string
     */
    public $destDataSourceId;

    /**
     * @description Destination data source type. (Required only for synchronization)
     *
     * @example OSS
     *
     * @var string
     */
    public $destSourceType;

    /**
     * @description The udm backup job detail.
     *
     * @var detail
     */
    public $detail;

    /**
     * @description The error message that is returned for the backup job.
     *
     * @example PARTIAL_COMPLETE
     *
     * @var string
     */
    public $errorMessage;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the paths to the files that are excluded from the backup job. The value must be 1 to 255 characters in length.
     *
     * @example ["/var", "/proc"]
     *
     * @var string
     */
    public $exclude;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **NAS**. This parameter indicates the ID of the NAS file system.
     *
     * @example 005494
     *
     * @var string
     */
    public $fileSystemId;

    /**
     * @description The number of files that have been processed.
     *
     * @example 9
     *
     * @var int
     */
    public $filesDone;

    /**
     * @description The total number of files to be processed.
     *
     * @example 10
     *
     * @var int
     */
    public $filesTotal;

    /**
     * @description The identifier of the container cluster. For a Container Service for Kubernetes (ACK) cluster, specify the cluster ID.
     *
     * @example c83**************************b76
     *
     * @var string
     */
    public $identifier;

    /**
     * @description The paths to the files that are included in the backup job.
     *
     * @example ["/home/alice/*.pdf", "/home/bob/*.txt"]
     *
     * @var string
     */
    public $include;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **NAS**. This parameter indicates the ID of the ECS instance.
     *
     * @example i-*********************
     *
     * @var string
     */
    public $instanceId;

    /**
     * @description The name of the Tablestore instance.
     *
     * @example instancename
     *
     * @var string
     */
    public $instanceName;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the number of objects that are backed up.
     *
     * @example 8
     *
     * @var int
     */
    public $itemsDone;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the total number of objects in the data source.
     *
     * @example 10
     *
     * @var int
     */
    public $itemsTotal;

    /**
     * @description The ID of the backup job.
     *
     * @example job-000g********w7
     *
     * @var string
     */
    public $jobId;

    /**
     * @description The name of the backup job.
     *
     * @example jobname
     *
     * @var string
     */
    public $jobName;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates whether Windows VSS is used to define a backup path.
     *
     *   This parameter is available only for Windows ECS instances.
     *   If data changes occur in the backup source, the source data must be the same as the data to be backed up before the system sets this parameter to `["UseVSS":true]`.
     *   If you use VSS, you cannot back up data from multiple directories.
     *
     * @example {"UseVSS":false}
     *
     * @var string
     */
    public $options;

    /**
     * @description The details about the Tablestore instance.
     *
     * @var otsDetail
     */
    public $otsDetail;

    /**
     * @description The backup paths.
     *
     * @var paths
     */
    public $paths;

    /**
     * @description The ID of the backup plan.
     *
     * @example plan-20********35
     *
     * @var string
     */
    public $planId;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **OSS**. This parameter indicates the prefix of objects that are backed up.
     *
     * @example example/
     *
     * @var string
     */
    public $prefix;

    /**
     * @description The backup progress. For example, 10000 indicates that the progress is 100%.
     *
     * @example 10000
     *
     * @var int
     */
    public $progress;

    /**
     * @description Task Report
     *
     * @var report
     */
    public $report;

    /**
     * @description The type of the data source. Valid values:
     *
     *   **ECS_FILE**: ECS files
     *   **OSS**: OSS buckets
     *   **NAS**: NAS file systems
     *
     * @example ECS_FILE
     *
     * @var string
     */
    public $sourceType;

    /**
     * @description The average speed at which data is backed up. Unit: KB/s.
     *
     * @example 500
     *
     * @var int
     */
    public $speed;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the throttling rules. Format: `{start}{end}{bandwidth}`. Multiple throttling rules are separated with vertical bars (`{start}|{end}|{bandwidth}`). A specified time range cannot overlap with another one.
     *
     *   **start**: the start hour
     *   **end**: the end hour
     *   **bandwidth**: the bandwidth. Unit: KB/s.
     *
     * @example 0:24:5120
     *
     * @var string
     */
    public $speedLimit;

    /**
     * @description The time when the backup job started. This value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $startTime;

    /**
     * @description The status of the backup job. Valid values:
     *
     *   **COMPLETE**: The backup job is completed.
     *   **PARTIAL_COMPLETE**: The backup job is partially completed.
     *   **FAILED**: The restore job has failed.
     *
     * @example COMPLETE
     *
     * @var string
     */
    public $status;

    /**
     * @description The name of a destination table in the Tablestore instance.
     *
     * @example table1
     *
     * @var string
     */
    public $tableName;

    /**
     * @description The time when the backup job was updated. This value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $updatedTime;

    /**
     * @description The ID of the backup vault.
     *
     * @example v-0006******q
     *
     * @var string
     */
    public $vaultId;
    protected $_name = [
        'actualBytes' => 'ActualBytes',
        'actualFiles' => 'ActualFiles',
        'actualItems' => 'ActualItems',
        'backupType' => 'BackupType',
        'bucket' => 'Bucket',
        'bytesDone' => 'BytesDone',
        'bytesTotal' => 'BytesTotal',
        'changeListPath' => 'ChangeListPath',
        'clientId' => 'ClientId',
        'completeTime' => 'CompleteTime',
        'createTime' => 'CreateTime',
        'createdTime' => 'CreatedTime',
        'crossAccountRoleName' => 'CrossAccountRoleName',
        'crossAccountType' => 'CrossAccountType',
        'crossAccountUserId' => 'CrossAccountUserId',
        'destDataSourceDetail' => 'DestDataSourceDetail',
        'destDataSourceId' => 'DestDataSourceId',
        'destSourceType' => 'DestSourceType',
        'detail' => 'Detail',
        'errorMessage' => 'ErrorMessage',
        'exclude' => 'Exclude',
        'fileSystemId' => 'FileSystemId',
        'filesDone' => 'FilesDone',
        'filesTotal' => 'FilesTotal',
        'identifier' => 'Identifier',
        'include' => 'Include',
        'instanceId' => 'InstanceId',
        'instanceName' => 'InstanceName',
        'itemsDone' => 'ItemsDone',
        'itemsTotal' => 'ItemsTotal',
        'jobId' => 'JobId',
        'jobName' => 'JobName',
        'options' => 'Options',
        'otsDetail' => 'OtsDetail',
        'paths' => 'Paths',
        'planId' => 'PlanId',
        'prefix' => 'Prefix',
        'progress' => 'Progress',
        'report' => 'Report',
        'sourceType' => 'SourceType',
        'speed' => 'Speed',
        'speedLimit' => 'SpeedLimit',
        'startTime' => 'StartTime',
        'status' => 'Status',
        'tableName' => 'TableName',
        'updatedTime' => 'UpdatedTime',
        'vaultId' => 'VaultId',
    ];

    public function validate() {}

    public function toMap()
    {
        $res = [];
        if (null !== $this->actualBytes) {
            $res['ActualBytes'] = $this->actualBytes;
        }
        if (null !== $this->actualFiles) {
            $res['ActualFiles'] = $this->actualFiles;
        }
        if (null !== $this->actualItems) {
            $res['ActualItems'] = $this->actualItems;
        }
        if (null !== $this->backupType) {
            $res['BackupType'] = $this->backupType;
        }
        if (null !== $this->bucket) {
            $res['Bucket'] = $this->bucket;
        }
        if (null !== $this->bytesDone) {
            $res['BytesDone'] = $this->bytesDone;
        }
        if (null !== $this->bytesTotal) {
            $res['BytesTotal'] = $this->bytesTotal;
        }
        if (null !== $this->changeListPath) {
            $res['ChangeListPath'] = $this->changeListPath;
        }
        if (null !== $this->clientId) {
            $res['ClientId'] = $this->clientId;
        }
        if (null !== $this->completeTime) {
            $res['CompleteTime'] = $this->completeTime;
        }
        if (null !== $this->createTime) {
            $res['CreateTime'] = $this->createTime;
        }
        if (null !== $this->createdTime) {
            $res['CreatedTime'] = $this->createdTime;
        }
        if (null !== $this->crossAccountRoleName) {
            $res['CrossAccountRoleName'] = $this->crossAccountRoleName;
        }
        if (null !== $this->crossAccountType) {
            $res['CrossAccountType'] = $this->crossAccountType;
        }
        if (null !== $this->crossAccountUserId) {
            $res['CrossAccountUserId'] = $this->crossAccountUserId;
        }
        if (null !== $this->destDataSourceDetail) {
            $res['DestDataSourceDetail'] = $this->destDataSourceDetail;
        }
        if (null !== $this->destDataSourceId) {
            $res['DestDataSourceId'] = $this->destDataSourceId;
        }
        if (null !== $this->destSourceType) {
            $res['DestSourceType'] = $this->destSourceType;
        }
        if (null !== $this->detail) {
            $res['Detail'] = null !== $this->detail ? $this->detail->toMap() : null;
        }
        if (null !== $this->errorMessage) {
            $res['ErrorMessage'] = $this->errorMessage;
        }
        if (null !== $this->exclude) {
            $res['Exclude'] = $this->exclude;
        }
        if (null !== $this->fileSystemId) {
            $res['FileSystemId'] = $this->fileSystemId;
        }
        if (null !== $this->filesDone) {
            $res['FilesDone'] = $this->filesDone;
        }
        if (null !== $this->filesTotal) {
            $res['FilesTotal'] = $this->filesTotal;
        }
        if (null !== $this->identifier) {
            $res['Identifier'] = $this->identifier;
        }
        if (null !== $this->include) {
            $res['Include'] = $this->include;
        }
        if (null !== $this->instanceId) {
            $res['InstanceId'] = $this->instanceId;
        }
        if (null !== $this->instanceName) {
            $res['InstanceName'] = $this->instanceName;
        }
        if (null !== $this->itemsDone) {
            $res['ItemsDone'] = $this->itemsDone;
        }
        if (null !== $this->itemsTotal) {
            $res['ItemsTotal'] = $this->itemsTotal;
        }
        if (null !== $this->jobId) {
            $res['JobId'] = $this->jobId;
        }
        if (null !== $this->jobName) {
            $res['JobName'] = $this->jobName;
        }
        if (null !== $this->options) {
            $res['Options'] = $this->options;
        }
        if (null !== $this->otsDetail) {
            $res['OtsDetail'] = null !== $this->otsDetail ? $this->otsDetail->toMap() : null;
        }
        if (null !== $this->paths) {
            $res['Paths'] = null !== $this->paths ? $this->paths->toMap() : null;
        }
        if (null !== $this->planId) {
            $res['PlanId'] = $this->planId;
        }
        if (null !== $this->prefix) {
            $res['Prefix'] = $this->prefix;
        }
        if (null !== $this->progress) {
            $res['Progress'] = $this->progress;
        }
        if (null !== $this->report) {
            $res['Report'] = null !== $this->report ? $this->report->toMap() : null;
        }
        if (null !== $this->sourceType) {
            $res['SourceType'] = $this->sourceType;
        }
        if (null !== $this->speed) {
            $res['Speed'] = $this->speed;
        }
        if (null !== $this->speedLimit) {
            $res['SpeedLimit'] = $this->speedLimit;
        }
        if (null !== $this->startTime) {
            $res['StartTime'] = $this->startTime;
        }
        if (null !== $this->status) {
            $res['Status'] = $this->status;
        }
        if (null !== $this->tableName) {
            $res['TableName'] = $this->tableName;
        }
        if (null !== $this->updatedTime) {
            $res['UpdatedTime'] = $this->updatedTime;
        }
        if (null !== $this->vaultId) {
            $res['VaultId'] = $this->vaultId;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return backupJob
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['ActualBytes'])) {
            $model->actualBytes = $map['ActualBytes'];
        }
        if (isset($map['ActualFiles'])) {
            $model->actualFiles = $map['ActualFiles'];
        }
        if (isset($map['ActualItems'])) {
            $model->actualItems = $map['ActualItems'];
        }
        if (isset($map['BackupType'])) {
            $model->backupType = $map['BackupType'];
        }
        if (isset($map['Bucket'])) {
            $model->bucket = $map['Bucket'];
        }
        if (isset($map['BytesDone'])) {
            $model->bytesDone = $map['BytesDone'];
        }
        if (isset($map['BytesTotal'])) {
            $model->bytesTotal = $map['BytesTotal'];
        }
        if (isset($map['ChangeListPath'])) {
            $model->changeListPath = $map['ChangeListPath'];
        }
        if (isset($map['ClientId'])) {
            $model->clientId = $map['ClientId'];
        }
        if (isset($map['CompleteTime'])) {
            $model->completeTime = $map['CompleteTime'];
        }
        if (isset($map['CreateTime'])) {
            $model->createTime = $map['CreateTime'];
        }
        if (isset($map['CreatedTime'])) {
            $model->createdTime = $map['CreatedTime'];
        }
        if (isset($map['CrossAccountRoleName'])) {
            $model->crossAccountRoleName = $map['CrossAccountRoleName'];
        }
        if (isset($map['CrossAccountType'])) {
            $model->crossAccountType = $map['CrossAccountType'];
        }
        if (isset($map['CrossAccountUserId'])) {
            $model->crossAccountUserId = $map['CrossAccountUserId'];
        }
        if (isset($map['DestDataSourceDetail'])) {
            $model->destDataSourceDetail = $map['DestDataSourceDetail'];
        }
        if (isset($map['DestDataSourceId'])) {
            $model->destDataSourceId = $map['DestDataSourceId'];
        }
        if (isset($map['DestSourceType'])) {
            $model->destSourceType = $map['DestSourceType'];
        }
        if (isset($map['Detail'])) {
            $model->detail = detail::fromMap($map['Detail']);
        }
        if (isset($map['ErrorMessage'])) {
            $model->errorMessage = $map['ErrorMessage'];
        }
        if (isset($map['Exclude'])) {
            $model->exclude = $map['Exclude'];
        }
        if (isset($map['FileSystemId'])) {
            $model->fileSystemId = $map['FileSystemId'];
        }
        if (isset($map['FilesDone'])) {
            $model->filesDone = $map['FilesDone'];
        }
        if (isset($map['FilesTotal'])) {
            $model->filesTotal = $map['FilesTotal'];
        }
        if (isset($map['Identifier'])) {
            $model->identifier = $map['Identifier'];
        }
        if (isset($map['Include'])) {
            $model->include = $map['Include'];
        }
        if (isset($map['InstanceId'])) {
            $model->instanceId = $map['InstanceId'];
        }
        if (isset($map['InstanceName'])) {
            $model->instanceName = $map['InstanceName'];
        }
        if (isset($map['ItemsDone'])) {
            $model->itemsDone = $map['ItemsDone'];
        }
        if (isset($map['ItemsTotal'])) {
            $model->itemsTotal = $map['ItemsTotal'];
        }
        if (isset($map['JobId'])) {
            $model->jobId = $map['JobId'];
        }
        if (isset($map['JobName'])) {
            $model->jobName = $map['JobName'];
        }
        if (isset($map['Options'])) {
            $model->options = $map['Options'];
        }
        if (isset($map['OtsDetail'])) {
            $model->otsDetail = otsDetail::fromMap($map['OtsDetail']);
        }
        if (isset($map['Paths'])) {
            $model->paths = paths::fromMap($map['Paths']);
        }
        if (isset($map['PlanId'])) {
            $model->planId = $map['PlanId'];
        }
        if (isset($map['Prefix'])) {
            $model->prefix = $map['Prefix'];
        }
        if (isset($map['Progress'])) {
            $model->progress = $map['Progress'];
        }
        if (isset($map['Report'])) {
            $model->report = report::fromMap($map['Report']);
        }
        if (isset($map['SourceType'])) {
            $model->sourceType = $map['SourceType'];
        }
        if (isset($map['Speed'])) {
            $model->speed = $map['Speed'];
        }
        if (isset($map['SpeedLimit'])) {
            $model->speedLimit = $map['SpeedLimit'];
        }
        if (isset($map['StartTime'])) {
            $model->startTime = $map['StartTime'];
        }
        if (isset($map['Status'])) {
            $model->status = $map['Status'];
        }
        if (isset($map['TableName'])) {
            $model->tableName = $map['TableName'];
        }
        if (isset($map['UpdatedTime'])) {
            $model->updatedTime = $map['UpdatedTime'];
        }
        if (isset($map['VaultId'])) {
            $model->vaultId = $map['VaultId'];
        }

        return $model;
    }
}
