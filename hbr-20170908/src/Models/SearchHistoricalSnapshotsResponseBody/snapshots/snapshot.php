<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Hbr\V20170908\Models\SearchHistoricalSnapshotsResponseBody\snapshots;

use AlibabaCloud\SDK\Hbr\V20170908\Models\SearchHistoricalSnapshotsResponseBody\snapshots\snapshot\paths;
use AlibabaCloud\Tea\Model;

class snapshot extends Model
{
    /**
     * @description The actual data amount of backup snapshots after duplicates are removed. Unit: bytes.
     *
     * @example 600
     *
     * @var int
     */
    public $actualBytes;

    /**
     * @description The actual number of backup snapshots.
     *
     * >  This parameter is available only for file backup.
     *
     * @example 6
     *
     * @var int
     */
    public $actualItems;

    /**
     * @description Time to archive
     *
     * @example 1640334062
     *
     * @var int
     */
    public $archiveTime;

    /**
     * @description The backup type. Valid value: **COMPLETE**, which indicates full backup.
     *
     * @example COMPLETE
     *
     * @var string
     */
    public $backupType;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **OSS**. This parameter indicates the name of the OSS bucket.
     *
     * @example hbr-backup-oss
     *
     * @var string
     */
    public $bucket;

    /**
     * @description The actual amount of data that is generated by incremental backups. Unit: bytes.
     *
     * @example 800
     *
     * @var int
     */
    public $bytesDone;

    /**
     * @description The total amount of data. Unit: bytes.
     *
     * @example 1000
     *
     * @var int
     */
    public $bytesTotal;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the ID of the HBR client.
     *
     * @example c-*********************
     *
     * @var string
     */
    public $clientId;

    /**
     * @description The time when the backup snapshot was completed. The value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $completeTime;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **NAS**. This parameter indicates the time when the file system was created. The value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1607436917
     *
     * @var int
     */
    public $createTime;

    /**
     * @description The time when the backup snapshot was created. The value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $createdTime;

    /**
     * @description The files that record the information about backup failures, including the information about partially completed backups.
     *
     * @example Item	Error Message C:\\Program Files (x86)\\Symantec\\Symantec Endpoint Protection\\14.3.558.0000.105\\Bin\\service.dat	Open: open \\\\?\\C:\\Program Files (x86)\\Symantec\\Symantec Endpoint Protection\\14.3.558.0000.105\\Bin\\service.dat: The process cannot access the file because it is being used by another process. C:\\ProgramData\\McAfee\\Agent\\data\\InstallerFiles\\172e8a3b04b7ab0fd0215f4fb7707e3744b37d83b6743b3eacb94447c74dc9af_contrib.ini	Open: open \\\\?\\C:\\ProgramData\\McAfee\\Agent\\data\\InstallerFiles\\172e8a3b04b7ab0fd0215f4fb7707e3744b37d83b6743b3eacb94447c74dc9af_contrib.ini: Access is denied.
     *
     * @var string
     */
    public $errorFile;

    /**
     * @description Backup paths not included in the backup job.
     *
     * @example [\\"/test/example_cn-hangzhou_7.txt\\", \\"/test/example_cn-hangzhou_1.txt\\", \\"/test/example_cn-hangzhou_3.txt\\", \\"/test/example_cn-hangzhou_9.txt\\", \\"/test/example_cn-hangzhou_6.txt\\"]
     *
     * @var string
     */
    public $exclude;

    /**
     * @description The time when the snapshot expired. The value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1640334062
     *
     * @var int
     */
    public $expireTime;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **NAS**. This parameter indicates the ID of the NAS file system.
     *
     * @example 005494
     *
     * @var string
     */
    public $fileSystemId;

    /**
     * @description Backup paths included in the backup job.
     *
     * @example [\\"/test/example_cn-huhehaote_3.txt\\", \\"/test/example_cn-huhehaote_9.txt\\", \\"/test/example_cn-huhehaote_5.txt\\", \\"/test/example_cn-huhehaote_1.txt\\", \\"/test/example_cn-huhehaote_7.txt\\"]
     *
     * @var string
     */
    public $include;

    /**
     * @description This parameter is valid only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the ID of the ECS instance.
     *
     * @example i-*********************
     *
     * @var string
     */
    public $instanceId;

    /**
     * @description The name of the Tablestore instance.
     *
     * @example instancename
     *
     * @var string
     */
    public $instanceName;

    /**
     * @description The number of objects that are backed up.
     *
     * >  This parameter is available only for file backup.
     *
     * @example 8
     *
     * @var int
     */
    public $itemsDone;

    /**
     * @description The total number of objects in the data source.
     *
     * >  This parameter is available only for file backup.
     *
     * @example 10
     *
     * @var int
     */
    public $itemsTotal;

    /**
     * @description The ID of the backup job.
     *
     * @example v-*********************
     *
     * @var string
     */
    public $jobId;

    /**
     * @description The hash value of the parent backup snapshot.
     *
     * @example f2fe..
     *
     * @var string
     */
    public $parentSnapshotHash;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **ECS_FILE**. This parameter indicates the path to the files that are backed up.
     *
     * @example ["/home"]
     *
     * @var string
     */
    public $path;

    /**
     * @description The source paths.
     *
     * @example "/home"
     *
     * @var paths
     */
    public $paths;

    /**
     * @description This parameter is returned only if the **SourceType** parameter is set to **OSS**. This parameter indicates the prefix of objects that are backed up.
     *
     * @example example/
     *
     * @var string
     */
    public $prefix;

    /**
     * @description The time when the backup job ended. The value is a UNIX timestamp. Unit: milliseconds.
     *
     * @example 1642521709966
     *
     * @var int
     */
    public $rangeEnd;

    /**
     * @description The time when the backup job started. The value is a UNIX timestamp. Unit: milliseconds.
     *
     * @example 1642492553038
     *
     * @var int
     */
    public $rangeStart;

    /**
     * @description The retention period of the backup snapshot. Unit: days.
     *
     * @example 7
     *
     * @var int
     */
    public $retention;

    /**
     * @description The hash value of the backup snapshot.
     *
     * @example f2fe...
     *
     * @var string
     */
    public $snapshotHash;

    /**
     * @description The ID of the backup snapshot.
     *
     * @example s-*********************
     *
     * @var string
     */
    public $snapshotId;

    /**
     * @description Parent snapshot HASH value before archiving.
     *
     * @example qwer***
     *
     * @var string
     */
    public $sourceParentSnapshotHash;

    /**
     * @description Snapshot HASH value before archiving
     *
     * @example qwer***
     *
     * @var string
     */
    public $sourceSnapshotHash;

    /**
     * @description The type of the data source. Valid values:
     *
     *   **ECS_FILE**: backup snapshots for ECS files
     *   **OSS**: backup snapshots for OSS buckets
     *   **NAS**: backup snapshots for NAS file systems
     *
     * @example ECS_FILE
     *
     * @var string
     */
    public $sourceType;

    /**
     * @description The time when the backup snapshot started. The value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $startTime;

    /**
     * @description The status of the backup job. Valid values:
     *
     *   **COMPLETE**: The backup job is completed.
     *   **PARTIAL_COMPLETE**: The backup job is partially completed.
     *   **FAILED**: The backup job has failed.
     *
     * @example COMPLETE
     *
     * @var string
     */
    public $status;

    /**
     * @description Storage type. Values:
     * - **Standard**: Standard.
     * - **Archive**: Archive.
     * - **ColdArchive**: Cold Archive.
     *
     * @example STANDARD
     *
     * @var string
     */
    public $storageClass;

    /**
     * @description The name of a table in the Tablestore instance.
     *
     * @example table2
     *
     * @var string
     */
    public $tableName;

    /**
     * @description The time when the backup snapshot was updated. The value is a UNIX timestamp. Unit: seconds.
     *
     * @example 1554347313
     *
     * @var int
     */
    public $updatedTime;

    /**
     * @description Whether to use local NAS.
     *
     * @example false
     *
     * @var bool
     */
    public $useCommonNas;

    /**
     * @description The ID of the backup vault that stores the backup snapshot.
     *
     * @example v-0003rf9m17pap3ltpqx5
     *
     * @var string
     */
    public $vaultId;
    protected $_name = [
        'actualBytes' => 'ActualBytes',
        'actualItems' => 'ActualItems',
        'archiveTime' => 'ArchiveTime',
        'backupType' => 'BackupType',
        'bucket' => 'Bucket',
        'bytesDone' => 'BytesDone',
        'bytesTotal' => 'BytesTotal',
        'clientId' => 'ClientId',
        'completeTime' => 'CompleteTime',
        'createTime' => 'CreateTime',
        'createdTime' => 'CreatedTime',
        'errorFile' => 'ErrorFile',
        'exclude' => 'Exclude',
        'expireTime' => 'ExpireTime',
        'fileSystemId' => 'FileSystemId',
        'include' => 'Include',
        'instanceId' => 'InstanceId',
        'instanceName' => 'InstanceName',
        'itemsDone' => 'ItemsDone',
        'itemsTotal' => 'ItemsTotal',
        'jobId' => 'JobId',
        'parentSnapshotHash' => 'ParentSnapshotHash',
        'path' => 'Path',
        'paths' => 'Paths',
        'prefix' => 'Prefix',
        'rangeEnd' => 'RangeEnd',
        'rangeStart' => 'RangeStart',
        'retention' => 'Retention',
        'snapshotHash' => 'SnapshotHash',
        'snapshotId' => 'SnapshotId',
        'sourceParentSnapshotHash' => 'SourceParentSnapshotHash',
        'sourceSnapshotHash' => 'SourceSnapshotHash',
        'sourceType' => 'SourceType',
        'startTime' => 'StartTime',
        'status' => 'Status',
        'storageClass' => 'StorageClass',
        'tableName' => 'TableName',
        'updatedTime' => 'UpdatedTime',
        'useCommonNas' => 'UseCommonNas',
        'vaultId' => 'VaultId',
    ];

    public function validate() {}

    public function toMap()
    {
        $res = [];
        if (null !== $this->actualBytes) {
            $res['ActualBytes'] = $this->actualBytes;
        }
        if (null !== $this->actualItems) {
            $res['ActualItems'] = $this->actualItems;
        }
        if (null !== $this->archiveTime) {
            $res['ArchiveTime'] = $this->archiveTime;
        }
        if (null !== $this->backupType) {
            $res['BackupType'] = $this->backupType;
        }
        if (null !== $this->bucket) {
            $res['Bucket'] = $this->bucket;
        }
        if (null !== $this->bytesDone) {
            $res['BytesDone'] = $this->bytesDone;
        }
        if (null !== $this->bytesTotal) {
            $res['BytesTotal'] = $this->bytesTotal;
        }
        if (null !== $this->clientId) {
            $res['ClientId'] = $this->clientId;
        }
        if (null !== $this->completeTime) {
            $res['CompleteTime'] = $this->completeTime;
        }
        if (null !== $this->createTime) {
            $res['CreateTime'] = $this->createTime;
        }
        if (null !== $this->createdTime) {
            $res['CreatedTime'] = $this->createdTime;
        }
        if (null !== $this->errorFile) {
            $res['ErrorFile'] = $this->errorFile;
        }
        if (null !== $this->exclude) {
            $res['Exclude'] = $this->exclude;
        }
        if (null !== $this->expireTime) {
            $res['ExpireTime'] = $this->expireTime;
        }
        if (null !== $this->fileSystemId) {
            $res['FileSystemId'] = $this->fileSystemId;
        }
        if (null !== $this->include) {
            $res['Include'] = $this->include;
        }
        if (null !== $this->instanceId) {
            $res['InstanceId'] = $this->instanceId;
        }
        if (null !== $this->instanceName) {
            $res['InstanceName'] = $this->instanceName;
        }
        if (null !== $this->itemsDone) {
            $res['ItemsDone'] = $this->itemsDone;
        }
        if (null !== $this->itemsTotal) {
            $res['ItemsTotal'] = $this->itemsTotal;
        }
        if (null !== $this->jobId) {
            $res['JobId'] = $this->jobId;
        }
        if (null !== $this->parentSnapshotHash) {
            $res['ParentSnapshotHash'] = $this->parentSnapshotHash;
        }
        if (null !== $this->path) {
            $res['Path'] = $this->path;
        }
        if (null !== $this->paths) {
            $res['Paths'] = null !== $this->paths ? $this->paths->toMap() : null;
        }
        if (null !== $this->prefix) {
            $res['Prefix'] = $this->prefix;
        }
        if (null !== $this->rangeEnd) {
            $res['RangeEnd'] = $this->rangeEnd;
        }
        if (null !== $this->rangeStart) {
            $res['RangeStart'] = $this->rangeStart;
        }
        if (null !== $this->retention) {
            $res['Retention'] = $this->retention;
        }
        if (null !== $this->snapshotHash) {
            $res['SnapshotHash'] = $this->snapshotHash;
        }
        if (null !== $this->snapshotId) {
            $res['SnapshotId'] = $this->snapshotId;
        }
        if (null !== $this->sourceParentSnapshotHash) {
            $res['SourceParentSnapshotHash'] = $this->sourceParentSnapshotHash;
        }
        if (null !== $this->sourceSnapshotHash) {
            $res['SourceSnapshotHash'] = $this->sourceSnapshotHash;
        }
        if (null !== $this->sourceType) {
            $res['SourceType'] = $this->sourceType;
        }
        if (null !== $this->startTime) {
            $res['StartTime'] = $this->startTime;
        }
        if (null !== $this->status) {
            $res['Status'] = $this->status;
        }
        if (null !== $this->storageClass) {
            $res['StorageClass'] = $this->storageClass;
        }
        if (null !== $this->tableName) {
            $res['TableName'] = $this->tableName;
        }
        if (null !== $this->updatedTime) {
            $res['UpdatedTime'] = $this->updatedTime;
        }
        if (null !== $this->useCommonNas) {
            $res['UseCommonNas'] = $this->useCommonNas;
        }
        if (null !== $this->vaultId) {
            $res['VaultId'] = $this->vaultId;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return snapshot
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['ActualBytes'])) {
            $model->actualBytes = $map['ActualBytes'];
        }
        if (isset($map['ActualItems'])) {
            $model->actualItems = $map['ActualItems'];
        }
        if (isset($map['ArchiveTime'])) {
            $model->archiveTime = $map['ArchiveTime'];
        }
        if (isset($map['BackupType'])) {
            $model->backupType = $map['BackupType'];
        }
        if (isset($map['Bucket'])) {
            $model->bucket = $map['Bucket'];
        }
        if (isset($map['BytesDone'])) {
            $model->bytesDone = $map['BytesDone'];
        }
        if (isset($map['BytesTotal'])) {
            $model->bytesTotal = $map['BytesTotal'];
        }
        if (isset($map['ClientId'])) {
            $model->clientId = $map['ClientId'];
        }
        if (isset($map['CompleteTime'])) {
            $model->completeTime = $map['CompleteTime'];
        }
        if (isset($map['CreateTime'])) {
            $model->createTime = $map['CreateTime'];
        }
        if (isset($map['CreatedTime'])) {
            $model->createdTime = $map['CreatedTime'];
        }
        if (isset($map['ErrorFile'])) {
            $model->errorFile = $map['ErrorFile'];
        }
        if (isset($map['Exclude'])) {
            $model->exclude = $map['Exclude'];
        }
        if (isset($map['ExpireTime'])) {
            $model->expireTime = $map['ExpireTime'];
        }
        if (isset($map['FileSystemId'])) {
            $model->fileSystemId = $map['FileSystemId'];
        }
        if (isset($map['Include'])) {
            $model->include = $map['Include'];
        }
        if (isset($map['InstanceId'])) {
            $model->instanceId = $map['InstanceId'];
        }
        if (isset($map['InstanceName'])) {
            $model->instanceName = $map['InstanceName'];
        }
        if (isset($map['ItemsDone'])) {
            $model->itemsDone = $map['ItemsDone'];
        }
        if (isset($map['ItemsTotal'])) {
            $model->itemsTotal = $map['ItemsTotal'];
        }
        if (isset($map['JobId'])) {
            $model->jobId = $map['JobId'];
        }
        if (isset($map['ParentSnapshotHash'])) {
            $model->parentSnapshotHash = $map['ParentSnapshotHash'];
        }
        if (isset($map['Path'])) {
            $model->path = $map['Path'];
        }
        if (isset($map['Paths'])) {
            $model->paths = paths::fromMap($map['Paths']);
        }
        if (isset($map['Prefix'])) {
            $model->prefix = $map['Prefix'];
        }
        if (isset($map['RangeEnd'])) {
            $model->rangeEnd = $map['RangeEnd'];
        }
        if (isset($map['RangeStart'])) {
            $model->rangeStart = $map['RangeStart'];
        }
        if (isset($map['Retention'])) {
            $model->retention = $map['Retention'];
        }
        if (isset($map['SnapshotHash'])) {
            $model->snapshotHash = $map['SnapshotHash'];
        }
        if (isset($map['SnapshotId'])) {
            $model->snapshotId = $map['SnapshotId'];
        }
        if (isset($map['SourceParentSnapshotHash'])) {
            $model->sourceParentSnapshotHash = $map['SourceParentSnapshotHash'];
        }
        if (isset($map['SourceSnapshotHash'])) {
            $model->sourceSnapshotHash = $map['SourceSnapshotHash'];
        }
        if (isset($map['SourceType'])) {
            $model->sourceType = $map['SourceType'];
        }
        if (isset($map['StartTime'])) {
            $model->startTime = $map['StartTime'];
        }
        if (isset($map['Status'])) {
            $model->status = $map['Status'];
        }
        if (isset($map['StorageClass'])) {
            $model->storageClass = $map['StorageClass'];
        }
        if (isset($map['TableName'])) {
            $model->tableName = $map['TableName'];
        }
        if (isset($map['UpdatedTime'])) {
            $model->updatedTime = $map['UpdatedTime'];
        }
        if (isset($map['UseCommonNas'])) {
            $model->useCommonNas = $map['UseCommonNas'];
        }
        if (isset($map['VaultId'])) {
            $model->vaultId = $map['VaultId'];
        }

        return $model;
    }
}
