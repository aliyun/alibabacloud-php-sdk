<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Dmsenterprise\V20181101;

use AlibabaCloud\Dara\Models\RuntimeOptions;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddAuthorityTemplateItemsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddAuthorityTemplateItemsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddAuthorityTemplateItemsShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddDesensitizationRuleRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddDesensitizationRuleResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddLhMembersRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddLhMembersResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddLhMembersShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddLogicTableRouteConfigRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddLogicTableRouteConfigResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddTaskFlowEdgesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddTaskFlowEdgesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AddTaskFlowEdgesShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AnalyzeSQLLineageRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\AnalyzeSQLLineageResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ApproveOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ApproveOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BackFillRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BackFillResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BackFillShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchCreateDataLakePartitionsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchCreateDataLakePartitionsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchCreateDataLakePartitionsShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchDeleteDataLakePartitionsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchDeleteDataLakePartitionsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchUpdateDataLakePartitionsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchUpdateDataLakePartitionsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BatchUpdateDataLakePartitionsShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BuyPayAsYouGoOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\BuyPayAsYouGoOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ChangeColumnSecLevelRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ChangeColumnSecLevelResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ChangeColumnSecurityLevelRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ChangeColumnSecurityLevelResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ChangeLhDagOwnerRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ChangeLhDagOwnerResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CloseOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CloseOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateAbacAuthorizationRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateAbacAuthorizationResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateAbacPolicyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateAbacPolicyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateAuthorityTemplateRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateAuthorityTemplateResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataArchiveOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataArchiveOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataArchiveOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDatabaseExportOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDatabaseExportOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDatabaseExportOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataCorrectOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataCorrectOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataCorrectOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataCronClearOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataCronClearOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataCronClearOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataExportOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataExportOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataExportOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataImportOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataImportOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataImportOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakeDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakeDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakeDatabaseShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakePartitionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakePartitionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakePartitionShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakeTableRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakeTableResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataLakeTableShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataTrackOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataTrackOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateDataTrackOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateFreeLockCorrectOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateFreeLockCorrectOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateFreeLockCorrectOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateLakeHouseSpaceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateLakeHouseSpaceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateLogicDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateLogicDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateLogicDatabaseShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateProcCorrectOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateProcCorrectOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateProcCorrectOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateProxyAccessRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateProxyAccessResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateProxyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateProxyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreatePublishGroupTaskRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreatePublishGroupTaskResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateScenarioRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateScenarioResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateSQLReviewOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateSQLReviewOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateSQLReviewOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateStandardGroupRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateStandardGroupResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateStructSyncOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateStructSyncOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateStructSyncOrderShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateTaskFlowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateTaskFlowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateTaskRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateTaskResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateUploadFileJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateUploadFileJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateUploadOSSFileJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateUploadOSSFileJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\CreateUploadOSSFileJobShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteAbacAuthorizationRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteAbacAuthorizationResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteAbacPolicyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteAbacPolicyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteAuthorityTemplateRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteAuthorityTemplateResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteDataLakeDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteDataLakeDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteDataLakePartitionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteDataLakePartitionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteDataLakePartitionShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteDataLakeTableRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteDataLakeTableResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLakeHouseSpaceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLakeHouseSpaceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLhMembersRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLhMembersResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLhMembersShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLogicDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLogicDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLogicTableRouteConfigRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteLogicTableRouteConfigResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteProxyAccessRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteProxyAccessResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteProxyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteProxyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteScenarioRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteScenarioResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteStandardGroupRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteStandardGroupResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteTaskFlowEdgesByConditionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteTaskFlowEdgesByConditionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteTaskFlowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteTaskFlowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteTaskRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteTaskResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DeleteUserResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DisableUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DisableUserResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DownloadDataTrackResultRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DownloadDataTrackResultResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\DownloadDataTrackResultShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\EditLogicDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\EditLogicDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\EditLogicDatabaseShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\EnableUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\EnableUserResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteDataCorrectRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteDataCorrectResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteDataCorrectShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteDataExportRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteDataExportResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteDataExportShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteScriptRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteScriptResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteStructSyncRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ExecuteStructSyncResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetAbacPolicyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetAbacPolicyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetApprovalDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetApprovalDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetAuthorityTemplateItemRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetAuthorityTemplateItemResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetAuthorityTemplateRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetAuthorityTemplateResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetClassificationTemplateRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetClassificationTemplateResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataArchiveCountRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataArchiveCountResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataArchiveOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataArchiveOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDatabaseExportOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDatabaseExportOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectBackupFilesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectBackupFilesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectBackupFilesShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectRollbackFileRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectRollbackFileResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectSQLFileRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectSQLFileResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectTaskDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCorrectTaskDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCronClearConfigRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCronClearConfigResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCronClearTaskDetailListRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataCronClearTaskDetailListResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataExportDownloadURLRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataExportDownloadURLResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataExportOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataExportOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataExportPreCheckDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataExportPreCheckDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataImportSQLRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataImportSQLResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakeCatalogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakeCatalogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakeDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakeDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakePartitionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakePartitionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakePartitionShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakeTableRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataLakeTableResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataTrackJobDegreeRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataTrackJobDegreeResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataTrackJobTableMetaRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataTrackJobTableMetaResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataTrackOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDataTrackOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDbExportDownloadURLRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDbExportDownloadURLResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDBTaskSQLJobLogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDBTaskSQLJobLogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDBTopologyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetDBTopologyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetIntervalLimitOfSLARequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetIntervalLimitOfSLAResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetLhSpaceByNameRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetLhSpaceByNameResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetLogicDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetLogicDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetMetaTableColumnRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetMetaTableColumnResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetMetaTableDetailInfoRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetMetaTableDetailInfoResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOnlineDDLProgressRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOnlineDDLProgressResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOpLogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOpLogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOrderAttachmentFileRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOrderAttachmentFileResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOrderBaseInfoRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOrderBaseInfoResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOwnerApplyOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetOwnerApplyOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetPagedInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetPagedInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetPermApplyOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetPermApplyOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetPhysicalDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetPhysicalDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetProxyAccessRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetProxyAccessResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetProxyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetProxyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetRuleNumLimitOfSLARequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetRuleNumLimitOfSLAResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetSQLReviewCheckResultStatusRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetSQLReviewCheckResultStatusResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetSQLReviewOptimizeDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetSQLReviewOptimizeDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStandardGroupRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStandardGroupResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncExecSqlDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncExecSqlDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncJobAnalyzeResultRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncJobAnalyzeResultResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncJobDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncJobDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncOrderDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetStructSyncOrderDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableDBTopologyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableDBTopologyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableDesignProjectFlowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableDesignProjectFlowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableDesignProjectInfoRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableDesignProjectInfoResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableTopologyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTableTopologyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskFlowGraphRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskFlowGraphResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskFlowNotificationRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskFlowNotificationResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskInstanceRelationRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskInstanceRelationResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetTaskResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetUserActiveTenantRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetUserActiveTenantResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetUserResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetUserUploadFileJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GetUserUploadFileJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GrantTemplateAuthorityRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GrantTemplateAuthorityResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GrantUserPermissionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\GrantUserPermissionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\InspectProxyAccessSecretRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\InspectProxyAccessSecretResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAbacAuthorizationsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAbacAuthorizationsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAbacPoliciesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAbacPoliciesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorityTemplateRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorityTemplateResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedDatabasesForUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedDatabasesForUserResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedInstancesForUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedInstancesForUserResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedUsersForDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedUsersForDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedUsersForInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListAuthorizedUsersForInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListClassificationTemplatesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListClassificationTemplatesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListColumnsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListColumnsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDAGVersionsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDAGVersionsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDatabasesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDatabasesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDatabaseUserPermssionsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDatabaseUserPermssionsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataCorrectPreCheckDBRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataCorrectPreCheckDBResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataCorrectPreCheckSQLRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataCorrectPreCheckSQLResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataImportSQLPreCheckDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataImportSQLPreCheckDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataImportSQLTypeRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataImportSQLTypeResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeCatalogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeCatalogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakePartitionByFilterRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakePartitionByFilterResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakePartitionNameRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakePartitionNameResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakePartitionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakePartitionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakePartitionShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeTablebaseInfoRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeTablebaseInfoResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeTableNameRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeTableNameResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeTableRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDataLakeTableResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDBTaskSQLJobDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDBTaskSQLJobDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDBTaskSQLJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDBTaskSQLJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDDLPublishRecordsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDDLPublishRecordsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDefaultSLARulesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDefaultSLARulesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDesensitizationRuleRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListDesensitizationRuleResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListEffectiveOrdersRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListEffectiveOrdersResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListIndexesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListIndexesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListInstanceLoginAuditLogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListInstanceLoginAuditLogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListInstancesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListInstancesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListInstanceUserPermissionsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListInstanceUserPermissionsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLhTaskFlowAndScenarioRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLhTaskFlowAndScenarioResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLogicDatabasesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLogicDatabasesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLogicTableRouteConfigRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLogicTableRouteConfigResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLogicTablesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListLogicTablesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListOrdersRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListOrdersResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListProxiesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListProxiesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListProxyAccessesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListProxyAccessesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListProxySQLExecAuditLogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListProxySQLExecAuditLogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListScenariosRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListScenariosResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveColumnInfoRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveColumnInfoResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveColumnsDetailRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveColumnsDetailResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveColumnsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveColumnsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveDataAuditLogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitiveDataAuditLogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitivityLevelRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSensitivityLevelResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSLARulesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSLARulesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSQLExecAuditLogRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSQLExecAuditLogResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSQLReviewOriginSQLRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSQLReviewOriginSQLResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListSQLReviewOriginSQLShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListStandardGroupsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListStandardGroupsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTablesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTablesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowConstantsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowConstantsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowCooperatorsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowCooperatorsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowEdgesByConditionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowEdgesByConditionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowsByPageRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowsByPageResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowsByPageShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowTimeVariablesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTaskFlowTimeVariablesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTasksInTaskFlowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListTasksInTaskFlowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListUserPermissionsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListUserPermissionsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListUsersRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListUsersResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListUserTenantsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListUserTenantsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListWorkFlowNodesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListWorkFlowNodesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListWorkFlowTemplatesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ListWorkFlowTemplatesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\MakeTaskFlowInstanceSuccessRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\MakeTaskFlowInstanceSuccessResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ModifyDataCorrectExecSQLRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ModifyDataCorrectExecSQLResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ModifyDesensitizationStrategyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ModifyDesensitizationStrategyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ModifyInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ModifyInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\MoveTaskFlowToScenarioRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\MoveTaskFlowToScenarioResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\OfflineTaskFlowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\OfflineTaskFlowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PauseDataCorrectSQLJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PauseDataCorrectSQLJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PauseDataExportJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PauseDataExportJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PreviewWorkflowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PreviewWorkflowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PublishAndDeployTaskFlowRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\PublishAndDeployTaskFlowResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\QueryDataTrackResultDownloadStatusRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\QueryDataTrackResultDownloadStatusResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ReDeployLhDagVersionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ReDeployLhDagVersionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RefundPayAsYouGoOrderRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RefundPayAsYouGoOrderResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RegisterInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RegisterInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RegisterUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RegisterUserResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RemoveDataExportJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RemoveDataExportJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ReRunTaskFlowInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ReRunTaskFlowInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RestartDataCorrectSQLJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RestartDataCorrectSQLJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RestartDataExportJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RestartDataExportJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ResumeTaskFlowInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\ResumeTaskFlowInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RetryDataCorrectPreCheckRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RetryDataCorrectPreCheckResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RevokeTemplateAuthorityRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RevokeTemplateAuthorityResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RevokeUserPermissionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\RevokeUserPermissionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SearchDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SearchDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SearchDataTrackResultRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SearchDataTrackResultResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SearchDataTrackResultShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SearchTableRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SearchTableResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SetOwnersRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SetOwnersResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SetWorkflowExtraInfoRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SetWorkflowExtraInfoResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SkipDataCorrectRowCheckRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SkipDataCorrectRowCheckResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\StopTaskFlowInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\StopTaskFlowInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SubmitOrderApprovalRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SubmitOrderApprovalResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SubmitStructSyncOrderApprovalRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SubmitStructSyncOrderApprovalResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SuspendDataExportJobRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SuspendDataExportJobResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SuspendTaskFlowInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SuspendTaskFlowInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SyncDatabaseMetaRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SyncDatabaseMetaResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SyncInstanceMetaRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\SyncInstanceMetaResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateAbacPolicyRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateAbacPolicyResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateAuthorityTemplateRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateAuthorityTemplateResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakeDatabaseRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakeDatabaseResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakeDatabaseShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakePartitionRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakePartitionResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakePartitionShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakeTableRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakeTableResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateDataLakeTableShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateInstanceRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateInstanceResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateScenarioRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateScenarioResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateSLARulesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateSLARulesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateSLARulesShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateStandardGroupRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateStandardGroupResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskConfigRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskConfigResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskContentRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskContentResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowConstantsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowConstantsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowConstantsShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowCooperatorsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowCooperatorsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowCooperatorsShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowEdgesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowEdgesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowEdgesShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowNameAndDescRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowNameAndDescResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowNotificationRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowNotificationResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowOwnerRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowOwnerResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowRelationsRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowRelationsResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowRelationsShrinkRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowScheduleRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowScheduleResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowTimeVariablesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskFlowTimeVariablesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskNameRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskNameResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskOutputRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskOutputResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskTimeVariablesRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateTaskTimeVariablesResponse;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateUserRequest;
use AlibabaCloud\SDK\Dmsenterprise\V20181101\Models\UpdateUserResponse;
use Darabonba\OpenApi\Models\OpenApiRequest;
use Darabonba\OpenApi\Models\Params;
use Darabonba\OpenApi\OpenApiClient;
use Darabonba\OpenApi\Utils;

class Dmsenterprise extends OpenApiClient
{
    public function __construct($config)
    {
        parent::__construct($config);
        $this->_endpointRule = 'central';
        $this->checkConfig($config);
        $this->_endpoint = $this->getEndpoint('dms-enterprise', $this->_regionId, $this->_endpointRule, $this->_network, $this->_suffix, $this->_endpointMap, $this->_endpoint);
    }

    /**
     * @param string   $productId
     * @param string   $regionId
     * @param string   $endpointRule
     * @param string   $network
     * @param string   $suffix
     * @param string[] $endpointMap
     * @param string   $endpoint
     *
     * @return string
     */
    public function getEndpoint($productId, $regionId, $endpointRule, $network, $suffix, $endpointMap, $endpoint)
    {
        if (null !== $endpoint) {
            return $endpoint;
        }

        if (null !== $endpointMap && null !== @$endpointMap[$regionId]) {
            return @$endpointMap[$regionId];
        }

        return Utils::getEndpointRules($productId, $regionId, $endpointRule, $network, $suffix);
    }

    /**
     * 添加权限模板资源.
     *
     * @param tmpReq - AddAuthorityTemplateItemsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddAuthorityTemplateItemsResponse
     *
     * @param AddAuthorityTemplateItemsRequest $tmpReq
     * @param RuntimeOptions                   $runtime
     *
     * @return AddAuthorityTemplateItemsResponse
     */
    public function addAuthorityTemplateItemsWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new AddAuthorityTemplateItemsShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->items) {
            $request->itemsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->items, 'Items', 'json');
        }

        $query = [];
        if (null !== $request->itemsShrink) {
            @$query['Items'] = $request->itemsShrink;
        }

        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'AddAuthorityTemplateItems',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return AddAuthorityTemplateItemsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return AddAuthorityTemplateItemsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 添加权限模板资源.
     *
     * @param request - AddAuthorityTemplateItemsRequest
     * @returns AddAuthorityTemplateItemsResponse
     *
     * @param AddAuthorityTemplateItemsRequest $request
     *
     * @return AddAuthorityTemplateItemsResponse
     */
    public function addAuthorityTemplateItems($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->addAuthorityTemplateItemsWithOptions($request, $runtime);
    }

    /**
     * Adds a masking rule.
     *
     * @param request - AddDesensitizationRuleRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddDesensitizationRuleResponse
     *
     * @param AddDesensitizationRuleRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return AddDesensitizationRuleResponse
     */
    public function addDesensitizationRuleWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->functionType) {
            @$query['FunctionType'] = $request->functionType;
        }

        if (null !== $request->ruleDescription) {
            @$query['RuleDescription'] = $request->ruleDescription;
        }

        if (null !== $request->ruleName) {
            @$query['RuleName'] = $request->ruleName;
        }

        if (null !== $request->ruleType) {
            @$query['RuleType'] = $request->ruleType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body     = [];
        $bodyFlat = [];
        if (null !== $request->functionParams) {
            @$bodyFlat['FunctionParams'] = $request->functionParams;
        }

        $body = Dara::merge([
        ], $body, Utils::query($bodyFlat));
        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'AddDesensitizationRule',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return AddDesensitizationRuleResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return AddDesensitizationRuleResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Adds a masking rule.
     *
     * @param request - AddDesensitizationRuleRequest
     * @returns AddDesensitizationRuleResponse
     *
     * @param AddDesensitizationRuleRequest $request
     *
     * @return AddDesensitizationRuleResponse
     */
    public function addDesensitizationRule($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->addDesensitizationRuleWithOptions($request, $runtime);
    }

    /**
     * 添加实例.
     *
     * @param request - AddInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddInstanceResponse
     *
     * @param AddInstanceRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return AddInstanceResponse
     */
    public function addInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dataLinkName) {
            @$query['DataLinkName'] = $request->dataLinkName;
        }

        if (null !== $request->databasePassword) {
            @$query['DatabasePassword'] = $request->databasePassword;
        }

        if (null !== $request->databaseUser) {
            @$query['DatabaseUser'] = $request->databaseUser;
        }

        if (null !== $request->dbaId) {
            @$query['DbaId'] = $request->dbaId;
        }

        if (null !== $request->ddlOnline) {
            @$query['DdlOnline'] = $request->ddlOnline;
        }

        if (null !== $request->ecsInstanceId) {
            @$query['EcsInstanceId'] = $request->ecsInstanceId;
        }

        if (null !== $request->ecsRegion) {
            @$query['EcsRegion'] = $request->ecsRegion;
        }

        if (null !== $request->enableSellCommon) {
            @$query['EnableSellCommon'] = $request->enableSellCommon;
        }

        if (null !== $request->enableSellSitd) {
            @$query['EnableSellSitd'] = $request->enableSellSitd;
        }

        if (null !== $request->enableSellStable) {
            @$query['EnableSellStable'] = $request->enableSellStable;
        }

        if (null !== $request->enableSellTrust) {
            @$query['EnableSellTrust'] = $request->enableSellTrust;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->exportTimeout) {
            @$query['ExportTimeout'] = $request->exportTimeout;
        }

        if (null !== $request->host) {
            @$query['Host'] = $request->host;
        }

        if (null !== $request->instanceAlias) {
            @$query['InstanceAlias'] = $request->instanceAlias;
        }

        if (null !== $request->instanceSource) {
            @$query['InstanceSource'] = $request->instanceSource;
        }

        if (null !== $request->instanceType) {
            @$query['InstanceType'] = $request->instanceType;
        }

        if (null !== $request->networkType) {
            @$query['NetworkType'] = $request->networkType;
        }

        if (null !== $request->port) {
            @$query['Port'] = $request->port;
        }

        if (null !== $request->queryTimeout) {
            @$query['QueryTimeout'] = $request->queryTimeout;
        }

        if (null !== $request->safeRule) {
            @$query['SafeRule'] = $request->safeRule;
        }

        if (null !== $request->sid) {
            @$query['Sid'] = $request->sid;
        }

        if (null !== $request->skipTest) {
            @$query['SkipTest'] = $request->skipTest;
        }

        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->templateType) {
            @$query['TemplateType'] = $request->templateType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->useDsql) {
            @$query['UseDsql'] = $request->useDsql;
        }

        if (null !== $request->useSsl) {
            @$query['UseSsl'] = $request->useSsl;
        }

        if (null !== $request->vpcId) {
            @$query['VpcId'] = $request->vpcId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'AddInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return AddInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return AddInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 添加实例.
     *
     * @param request - AddInstanceRequest
     * @returns AddInstanceResponse
     *
     * @param AddInstanceRequest $request
     *
     * @return AddInstanceResponse
     */
    public function addInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->addInstanceWithOptions($request, $runtime);
    }

    /**
     * Adds a workspace administrator, a workspace member, or a task flow developer in Data Management (DMS).
     *
     * @remarks
     * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
     * Usage notes:
     * *   Before you call this operation to add a user as a task flow developer, make sure that you have added the user as a workspace member.
     * *   You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
     * *   For more information about workspace roles and permissions, see [Manage permissions on a workspace](https://help.aliyun.com/document_detail/410893.html).
     *
     * @param tmpReq - AddLhMembersRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddLhMembersResponse
     *
     * @param AddLhMembersRequest $tmpReq
     * @param RuntimeOptions      $runtime
     *
     * @return AddLhMembersResponse
     */
    public function addLhMembersWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new AddLhMembersShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->members) {
            $request->membersShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->members, 'Members', 'json');
        }

        $query = [];
        if (null !== $request->membersShrink) {
            @$query['Members'] = $request->membersShrink;
        }

        if (null !== $request->objectId) {
            @$query['ObjectId'] = $request->objectId;
        }

        if (null !== $request->objectType) {
            @$query['ObjectType'] = $request->objectType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'AddLhMembers',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return AddLhMembersResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return AddLhMembersResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Adds a workspace administrator, a workspace member, or a task flow developer in Data Management (DMS).
     *
     * @remarks
     * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
     * Usage notes:
     * *   Before you call this operation to add a user as a task flow developer, make sure that you have added the user as a workspace member.
     * *   You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
     * *   For more information about workspace roles and permissions, see [Manage permissions on a workspace](https://help.aliyun.com/document_detail/410893.html).
     *
     * @param request - AddLhMembersRequest
     * @returns AddLhMembersResponse
     *
     * @param AddLhMembersRequest $request
     *
     * @return AddLhMembersResponse
     */
    public function addLhMembers($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->addLhMembersWithOptions($request, $runtime);
    }

    /**
     * Adds a routing algorithm to a logical table.
     *
     * @param request - AddLogicTableRouteConfigRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddLogicTableRouteConfigResponse
     *
     * @param AddLogicTableRouteConfigRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return AddLogicTableRouteConfigResponse
     */
    public function addLogicTableRouteConfigWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->routeExpr) {
            @$query['RouteExpr'] = $request->routeExpr;
        }

        if (null !== $request->routeKey) {
            @$query['RouteKey'] = $request->routeKey;
        }

        if (null !== $request->tableId) {
            @$query['TableId'] = $request->tableId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'AddLogicTableRouteConfig',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return AddLogicTableRouteConfigResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return AddLogicTableRouteConfigResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Adds a routing algorithm to a logical table.
     *
     * @param request - AddLogicTableRouteConfigRequest
     * @returns AddLogicTableRouteConfigResponse
     *
     * @param AddLogicTableRouteConfigRequest $request
     *
     * @return AddLogicTableRouteConfigResponse
     */
    public function addLogicTableRouteConfig($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->addLogicTableRouteConfigWithOptions($request, $runtime);
    }

    /**
     * Adds directed edges for an existing task node.
     *
     * @remarks
     * When you add directed edges for a task node, take note of the following limits:
     * 1. The endpoints of the specified edge exist in the Directed Acyclic Graph (DAG) of the task flow specified by DagId.
     * 2. After a backward edge is added, the DAG does not contain loops.
     *
     * @param tmpReq - AddTaskFlowEdgesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AddTaskFlowEdgesResponse
     *
     * @param AddTaskFlowEdgesRequest $tmpReq
     * @param RuntimeOptions          $runtime
     *
     * @return AddTaskFlowEdgesResponse
     */
    public function addTaskFlowEdgesWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new AddTaskFlowEdgesShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->edges) {
            $request->edgesShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->edges, 'Edges', 'json');
        }

        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->edgesShrink) {
            @$query['Edges'] = $request->edgesShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'AddTaskFlowEdges',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return AddTaskFlowEdgesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return AddTaskFlowEdgesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Adds directed edges for an existing task node.
     *
     * @remarks
     * When you add directed edges for a task node, take note of the following limits:
     * 1. The endpoints of the specified edge exist in the Directed Acyclic Graph (DAG) of the task flow specified by DagId.
     * 2. After a backward edge is added, the DAG does not contain loops.
     *
     * @param request - AddTaskFlowEdgesRequest
     * @returns AddTaskFlowEdgesResponse
     *
     * @param AddTaskFlowEdgesRequest $request
     *
     * @return AddTaskFlowEdgesResponse
     */
    public function addTaskFlowEdges($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->addTaskFlowEdgesWithOptions($request, $runtime);
    }

    /**
     * Analyzes the lineage (dependencies and influence) between tables and between fields in SQL statements.
     *
     * @remarks
     * The following conditions must be met before you call this API operation.
     * *   The database instance is of one of the following types: ApsaraDB RDS for MySQL, PolarDB for MySQL, AnalyticDB for MySQL, ApsaraDB RDS for PostgreSQL, PolarDB for PostgreSQL, AnalyticDB for PostgreSQL, Oracle, and openGauss.
     * *   A database instance is managed in Security Collaboration mode. For more information about control modes, see [Control modes](https://help.aliyun.com/document_detail/151629.html).
     *
     * @param request - AnalyzeSQLLineageRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns AnalyzeSQLLineageResponse
     *
     * @param AnalyzeSQLLineageRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return AnalyzeSQLLineageResponse
     */
    public function analyzeSQLLineageWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->sqlContent) {
            @$query['SqlContent'] = $request->sqlContent;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'AnalyzeSQLLineage',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return AnalyzeSQLLineageResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return AnalyzeSQLLineageResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Analyzes the lineage (dependencies and influence) between tables and between fields in SQL statements.
     *
     * @remarks
     * The following conditions must be met before you call this API operation.
     * *   The database instance is of one of the following types: ApsaraDB RDS for MySQL, PolarDB for MySQL, AnalyticDB for MySQL, ApsaraDB RDS for PostgreSQL, PolarDB for PostgreSQL, AnalyticDB for PostgreSQL, Oracle, and openGauss.
     * *   A database instance is managed in Security Collaboration mode. For more information about control modes, see [Control modes](https://help.aliyun.com/document_detail/151629.html).
     *
     * @param request - AnalyzeSQLLineageRequest
     * @returns AnalyzeSQLLineageResponse
     *
     * @param AnalyzeSQLLineageRequest $request
     *
     * @return AnalyzeSQLLineageResponse
     */
    public function analyzeSQLLineage($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->analyzeSQLLineageWithOptions($request, $runtime);
    }

    /**
     * Reviews a ticket.
     *
     * @param request - ApproveOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ApproveOrderResponse
     *
     * @param ApproveOrderRequest $request
     * @param RuntimeOptions      $runtime
     *
     * @return ApproveOrderResponse
     */
    public function approveOrderWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->approvalNodeId) {
            @$query['ApprovalNodeId'] = $request->approvalNodeId;
        }

        if (null !== $request->approvalNodePos) {
            @$query['ApprovalNodePos'] = $request->approvalNodePos;
        }

        if (null !== $request->approvalType) {
            @$query['ApprovalType'] = $request->approvalType;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->newApprover) {
            @$query['NewApprover'] = $request->newApprover;
        }

        if (null !== $request->newApproverList) {
            @$query['NewApproverList'] = $request->newApproverList;
        }

        if (null !== $request->oldApprover) {
            @$query['OldApprover'] = $request->oldApprover;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->workflowInstanceId) {
            @$query['WorkflowInstanceId'] = $request->workflowInstanceId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ApproveOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ApproveOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ApproveOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Reviews a ticket.
     *
     * @param request - ApproveOrderRequest
     * @returns ApproveOrderResponse
     *
     * @param ApproveOrderRequest $request
     *
     * @return ApproveOrderResponse
     */
    public function approveOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->approveOrderWithOptions($request, $runtime);
    }

    /**
     * Backfills data for task orchestration.
     *
     * @remarks
     * During a data backfill, task flows are run in sequence based on their dates. You can specify whether task flows are run in chronological or reverse chronological order. After the data backfill is complete, you can specify a date or date range, and a node range to run task flows.
     *
     * @param tmpReq - BackFillRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BackFillResponse
     *
     * @param BackFillRequest $tmpReq
     * @param RuntimeOptions  $runtime
     *
     * @return BackFillResponse
     */
    public function backFillWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new BackFillShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->filterNodeIds) {
            $request->filterNodeIdsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->filterNodeIds, 'FilterNodeIds', 'json');
        }

        if (null !== $tmpReq->startNodeIds) {
            $request->startNodeIdsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->startNodeIds, 'StartNodeIds', 'json');
        }

        $query = [];
        if (null !== $request->asc) {
            @$query['Asc'] = $request->asc;
        }

        if (null !== $request->backFillDate) {
            @$query['BackFillDate'] = $request->backFillDate;
        }

        if (null !== $request->backFillDateBegin) {
            @$query['BackFillDateBegin'] = $request->backFillDateBegin;
        }

        if (null !== $request->backFillDateEnd) {
            @$query['BackFillDateEnd'] = $request->backFillDateEnd;
        }

        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->filterNodeIdsShrink) {
            @$query['FilterNodeIds'] = $request->filterNodeIdsShrink;
        }

        if (null !== $request->historyDagId) {
            @$query['HistoryDagId'] = $request->historyDagId;
        }

        if (null !== $request->interval) {
            @$query['Interval'] = $request->interval;
        }

        if (null !== $request->isTriggerSubTree) {
            @$query['IsTriggerSubTree'] = $request->isTriggerSubTree;
        }

        if (null !== $request->startNodeIdsShrink) {
            @$query['StartNodeIds'] = $request->startNodeIdsShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'BackFill',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return BackFillResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return BackFillResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Backfills data for task orchestration.
     *
     * @remarks
     * During a data backfill, task flows are run in sequence based on their dates. You can specify whether task flows are run in chronological or reverse chronological order. After the data backfill is complete, you can specify a date or date range, and a node range to run task flows.
     *
     * @param request - BackFillRequest
     * @returns BackFillResponse
     *
     * @param BackFillRequest $request
     *
     * @return BackFillResponse
     */
    public function backFill($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->backFillWithOptions($request, $runtime);
    }

    /**
     * 批量新建湖仓表分区.
     *
     * @param tmpReq - BatchCreateDataLakePartitionsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchCreateDataLakePartitionsResponse
     *
     * @param BatchCreateDataLakePartitionsRequest $tmpReq
     * @param RuntimeOptions                       $runtime
     *
     * @return BatchCreateDataLakePartitionsResponse
     */
    public function batchCreateDataLakePartitionsWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new BatchCreateDataLakePartitionsShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->partitionInputs) {
            $request->partitionInputsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->partitionInputs, 'PartitionInputs', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->ifNotExists) {
            @$query['IfNotExists'] = $request->ifNotExists;
        }

        if (null !== $request->needResult) {
            @$query['NeedResult'] = $request->needResult;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->partitionInputsShrink) {
            @$body['PartitionInputs'] = $request->partitionInputsShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'BatchCreateDataLakePartitions',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return BatchCreateDataLakePartitionsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return BatchCreateDataLakePartitionsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 批量新建湖仓表分区.
     *
     * @param request - BatchCreateDataLakePartitionsRequest
     * @returns BatchCreateDataLakePartitionsResponse
     *
     * @param BatchCreateDataLakePartitionsRequest $request
     *
     * @return BatchCreateDataLakePartitionsResponse
     */
    public function batchCreateDataLakePartitions($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->batchCreateDataLakePartitionsWithOptions($request, $runtime);
    }

    /**
     * 批量删除湖仓表分区.
     *
     * @param request - BatchDeleteDataLakePartitionsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchDeleteDataLakePartitionsResponse
     *
     * @param BatchDeleteDataLakePartitionsRequest $request
     * @param RuntimeOptions                       $runtime
     *
     * @return BatchDeleteDataLakePartitionsResponse
     */
    public function batchDeleteDataLakePartitionsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->ifExists) {
            @$query['IfExists'] = $request->ifExists;
        }

        if (null !== $request->partitionValuesList) {
            @$query['PartitionValuesList'] = $request->partitionValuesList;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'BatchDeleteDataLakePartitions',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return BatchDeleteDataLakePartitionsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return BatchDeleteDataLakePartitionsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 批量删除湖仓表分区.
     *
     * @param request - BatchDeleteDataLakePartitionsRequest
     * @returns BatchDeleteDataLakePartitionsResponse
     *
     * @param BatchDeleteDataLakePartitionsRequest $request
     *
     * @return BatchDeleteDataLakePartitionsResponse
     */
    public function batchDeleteDataLakePartitions($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->batchDeleteDataLakePartitionsWithOptions($request, $runtime);
    }

    /**
     * 批量更新湖仓表分区.
     *
     * @param tmpReq - BatchUpdateDataLakePartitionsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BatchUpdateDataLakePartitionsResponse
     *
     * @param BatchUpdateDataLakePartitionsRequest $tmpReq
     * @param RuntimeOptions                       $runtime
     *
     * @return BatchUpdateDataLakePartitionsResponse
     */
    public function batchUpdateDataLakePartitionsWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new BatchUpdateDataLakePartitionsShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->partitionInputs) {
            $request->partitionInputsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->partitionInputs, 'PartitionInputs', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->partitionInputsShrink) {
            @$body['PartitionInputs'] = $request->partitionInputsShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'BatchUpdateDataLakePartitions',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return BatchUpdateDataLakePartitionsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return BatchUpdateDataLakePartitionsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 批量更新湖仓表分区.
     *
     * @param request - BatchUpdateDataLakePartitionsRequest
     * @returns BatchUpdateDataLakePartitionsResponse
     *
     * @param BatchUpdateDataLakePartitionsRequest $request
     *
     * @return BatchUpdateDataLakePartitionsResponse
     */
    public function batchUpdateDataLakePartitions($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->batchUpdateDataLakePartitionsWithOptions($request, $runtime);
    }

    /**
     * Purchases a pay-as-you-go Data Management (DMS) resource.
     *
     * @param request - BuyPayAsYouGoOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns BuyPayAsYouGoOrderResponse
     *
     * @param BuyPayAsYouGoOrderRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return BuyPayAsYouGoOrderResponse
     */
    public function buyPayAsYouGoOrderWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->commodityType) {
            @$query['CommodityType'] = $request->commodityType;
        }

        if (null !== $request->insNum) {
            @$query['InsNum'] = $request->insNum;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->versionType) {
            @$query['VersionType'] = $request->versionType;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'BuyPayAsYouGoOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return BuyPayAsYouGoOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return BuyPayAsYouGoOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Purchases a pay-as-you-go Data Management (DMS) resource.
     *
     * @param request - BuyPayAsYouGoOrderRequest
     * @returns BuyPayAsYouGoOrderResponse
     *
     * @param BuyPayAsYouGoOrderRequest $request
     *
     * @return BuyPayAsYouGoOrderResponse
     */
    public function buyPayAsYouGoOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->buyPayAsYouGoOrderWithOptions($request, $runtime);
    }

    /**
     * Adjusts the sensitivity level of one or more fields.
     *
     * @param request - ChangeColumnSecLevelRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChangeColumnSecLevelResponse
     *
     * @param ChangeColumnSecLevelRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return ChangeColumnSecLevelResponse
     */
    public function changeColumnSecLevelWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->columnName) {
            @$query['ColumnName'] = $request->columnName;
        }

        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->isLogic) {
            @$query['IsLogic'] = $request->isLogic;
        }

        if (null !== $request->newLevel) {
            @$query['NewLevel'] = $request->newLevel;
        }

        if (null !== $request->schemaName) {
            @$query['SchemaName'] = $request->schemaName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ChangeColumnSecLevel',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ChangeColumnSecLevelResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ChangeColumnSecLevelResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Adjusts the sensitivity level of one or more fields.
     *
     * @param request - ChangeColumnSecLevelRequest
     * @returns ChangeColumnSecLevelResponse
     *
     * @param ChangeColumnSecLevelRequest $request
     *
     * @return ChangeColumnSecLevelResponse
     */
    public function changeColumnSecLevel($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->changeColumnSecLevelWithOptions($request, $runtime);
    }

    /**
     * 修改字段敏感序列.
     *
     * @param request - ChangeColumnSecurityLevelRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChangeColumnSecurityLevelResponse
     *
     * @param ChangeColumnSecurityLevelRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ChangeColumnSecurityLevelResponse
     */
    public function changeColumnSecurityLevelWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->columnName) {
            @$query['ColumnName'] = $request->columnName;
        }

        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->isLogic) {
            @$query['IsLogic'] = $request->isLogic;
        }

        if (null !== $request->newSensitivityLevel) {
            @$query['NewSensitivityLevel'] = $request->newSensitivityLevel;
        }

        if (null !== $request->schemaName) {
            @$query['SchemaName'] = $request->schemaName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ChangeColumnSecurityLevel',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ChangeColumnSecurityLevelResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ChangeColumnSecurityLevelResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 修改字段敏感序列.
     *
     * @param request - ChangeColumnSecurityLevelRequest
     * @returns ChangeColumnSecurityLevelResponse
     *
     * @param ChangeColumnSecurityLevelRequest $request
     *
     * @return ChangeColumnSecurityLevelResponse
     */
    public function changeColumnSecurityLevel($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->changeColumnSecurityLevelWithOptions($request, $runtime);
    }

    /**
     * 移交数仓开发任务流
     *
     * @remarks
     * Usage notes:
     * *   If you call this operation to transfer the ownership of a published task flow, the ownership transfer does not take effect.
     * *   You can call the [ReDeployLhDagVersion](https://help.aliyun.com/document_detail/424712.html) operation to redeploy a published version of a task flow.
     *
     * @param request - ChangeLhDagOwnerRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ChangeLhDagOwnerResponse
     *
     * @param ChangeLhDagOwnerRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return ChangeLhDagOwnerResponse
     */
    public function changeLhDagOwnerWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->ownerUserId) {
            @$query['OwnerUserId'] = $request->ownerUserId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ChangeLhDagOwner',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ChangeLhDagOwnerResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ChangeLhDagOwnerResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 移交数仓开发任务流
     *
     * @remarks
     * Usage notes:
     * *   If you call this operation to transfer the ownership of a published task flow, the ownership transfer does not take effect.
     * *   You can call the [ReDeployLhDagVersion](https://help.aliyun.com/document_detail/424712.html) operation to redeploy a published version of a task flow.
     *
     * @param request - ChangeLhDagOwnerRequest
     * @returns ChangeLhDagOwnerResponse
     *
     * @param ChangeLhDagOwnerRequest $request
     *
     * @return ChangeLhDagOwnerResponse
     */
    public function changeLhDagOwner($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->changeLhDagOwnerWithOptions($request, $runtime);
    }

    /**
     * Closes a ticket.
     *
     * @param request - CloseOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CloseOrderResponse
     *
     * @param CloseOrderRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return CloseOrderResponse
     */
    public function closeOrderWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->closeReason) {
            @$query['CloseReason'] = $request->closeReason;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CloseOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CloseOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CloseOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Closes a ticket.
     *
     * @param request - CloseOrderRequest
     * @returns CloseOrderResponse
     *
     * @param CloseOrderRequest $request
     *
     * @return CloseOrderResponse
     */
    public function closeOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->closeOrderWithOptions($request, $runtime);
    }

    /**
     * 创建权限策略授权.
     *
     * @param request - CreateAbacAuthorizationRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAbacAuthorizationResponse
     *
     * @param CreateAbacAuthorizationRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return CreateAbacAuthorizationResponse
     */
    public function createAbacAuthorizationWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->identityType) {
            @$query['IdentityType'] = $request->identityType;
        }

        if (null !== $request->policyId) {
            @$query['PolicyId'] = $request->policyId;
        }

        if (null !== $request->roleId) {
            @$query['RoleId'] = $request->roleId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateAbacAuthorization',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateAbacAuthorizationResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateAbacAuthorizationResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 创建权限策略授权.
     *
     * @param request - CreateAbacAuthorizationRequest
     * @returns CreateAbacAuthorizationResponse
     *
     * @param CreateAbacAuthorizationRequest $request
     *
     * @return CreateAbacAuthorizationResponse
     */
    public function createAbacAuthorization($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createAbacAuthorizationWithOptions($request, $runtime);
    }

    /**
     * 创建权限策略.
     *
     * @param request - CreateAbacPolicyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAbacPolicyResponse
     *
     * @param CreateAbacPolicyRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return CreateAbacPolicyResponse
     */
    public function createAbacPolicyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->abacPolicyContent) {
            @$query['AbacPolicyContent'] = $request->abacPolicyContent;
        }

        if (null !== $request->abacPolicyDesc) {
            @$query['AbacPolicyDesc'] = $request->abacPolicyDesc;
        }

        if (null !== $request->abacPolicyName) {
            @$query['AbacPolicyName'] = $request->abacPolicyName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateAbacPolicy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateAbacPolicyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateAbacPolicyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 创建权限策略.
     *
     * @param request - CreateAbacPolicyRequest
     * @returns CreateAbacPolicyResponse
     *
     * @param CreateAbacPolicyRequest $request
     *
     * @return CreateAbacPolicyResponse
     */
    public function createAbacPolicy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createAbacPolicyWithOptions($request, $runtime);
    }

    /**
     * Creates a permission template.
     *
     * @remarks
     * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - CreateAuthorityTemplateRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateAuthorityTemplateResponse
     *
     * @param CreateAuthorityTemplateRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return CreateAuthorityTemplateResponse
     */
    public function createAuthorityTemplateWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->name) {
            @$query['Name'] = $request->name;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateAuthorityTemplate',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateAuthorityTemplateResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateAuthorityTemplateResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a permission template.
     *
     * @remarks
     * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - CreateAuthorityTemplateRequest
     * @returns CreateAuthorityTemplateResponse
     *
     * @param CreateAuthorityTemplateRequest $request
     *
     * @return CreateAuthorityTemplateResponse
     */
    public function createAuthorityTemplate($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createAuthorityTemplateWithOptions($request, $runtime);
    }

    /**
     * Creates a data archiving ticket to archive data to destinations such as dedicated storage space or ApsaraDB RDS for MySQL instances.
     *
     * @remarks
     * You can call this API operation only for database instances that are managed in Security Collaboration mode.
     *
     * @param tmpReq - CreateDataArchiveOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataArchiveOrderResponse
     *
     * @param CreateDataArchiveOrderRequest $tmpReq
     * @param RuntimeOptions                $runtime
     *
     * @return CreateDataArchiveOrderResponse
     */
    public function createDataArchiveOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataArchiveOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->parentId) {
            @$query['ParentId'] = $request->parentId;
        }

        if (null !== $request->pluginType) {
            @$query['PluginType'] = $request->pluginType;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDataArchiveOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataArchiveOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataArchiveOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a data archiving ticket to archive data to destinations such as dedicated storage space or ApsaraDB RDS for MySQL instances.
     *
     * @remarks
     * You can call this API operation only for database instances that are managed in Security Collaboration mode.
     *
     * @param request - CreateDataArchiveOrderRequest
     * @returns CreateDataArchiveOrderResponse
     *
     * @param CreateDataArchiveOrderRequest $request
     *
     * @return CreateDataArchiveOrderResponse
     */
    public function createDataArchiveOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataArchiveOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a ticket for changing data in Data Management (DMS).
     *
     * @remarks
     * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
     *
     * @param tmpReq - CreateDataCorrectOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataCorrectOrderResponse
     *
     * @param CreateDataCorrectOrderRequest $tmpReq
     * @param RuntimeOptions                $runtime
     *
     * @return CreateDataCorrectOrderResponse
     */
    public function createDataCorrectOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataCorrectOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDataCorrectOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataCorrectOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataCorrectOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a ticket for changing data in Data Management (DMS).
     *
     * @remarks
     * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
     *
     * @param request - CreateDataCorrectOrderRequest
     * @returns CreateDataCorrectOrderResponse
     *
     * @param CreateDataCorrectOrderRequest $request
     *
     * @return CreateDataCorrectOrderResponse
     */
    public function createDataCorrectOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataCorrectOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a ticket for clearing historical data.
     *
     * @remarks
     * For more information about the historical data cleaning, see [Clear historical data](https://help.aliyun.com/document_detail/162507.html).
     * This operation can be used only for MySQL databases.
     *
     * @param tmpReq - CreateDataCronClearOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataCronClearOrderResponse
     *
     * @param CreateDataCronClearOrderRequest $tmpReq
     * @param RuntimeOptions                  $runtime
     *
     * @return CreateDataCronClearOrderResponse
     */
    public function createDataCronClearOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataCronClearOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDataCronClearOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataCronClearOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataCronClearOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a ticket for clearing historical data.
     *
     * @remarks
     * For more information about the historical data cleaning, see [Clear historical data](https://help.aliyun.com/document_detail/162507.html).
     * This operation can be used only for MySQL databases.
     *
     * @param request - CreateDataCronClearOrderRequest
     * @returns CreateDataCronClearOrderResponse
     *
     * @param CreateDataCronClearOrderRequest $request
     *
     * @return CreateDataCronClearOrderResponse
     */
    public function createDataCronClearOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataCronClearOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a ticket to export an SQL result set.
     *
     * @param tmpReq - CreateDataExportOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataExportOrderResponse
     *
     * @param CreateDataExportOrderRequest $tmpReq
     * @param RuntimeOptions               $runtime
     *
     * @return CreateDataExportOrderResponse
     */
    public function createDataExportOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataExportOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->pluginParam) {
            $request->pluginParamShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->pluginParam, 'PluginParam', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->parentId) {
            @$query['ParentId'] = $request->parentId;
        }

        if (null !== $request->pluginParamShrink) {
            @$query['PluginParam'] = $request->pluginParamShrink;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDataExportOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataExportOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataExportOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a ticket to export an SQL result set.
     *
     * @param request - CreateDataExportOrderRequest
     * @returns CreateDataExportOrderResponse
     *
     * @param CreateDataExportOrderRequest $request
     *
     * @return CreateDataExportOrderResponse
     */
    public function createDataExportOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataExportOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a ticket for importing data to Data Management (DMS).
     *
     * @remarks
     * For more information about the Large Data Import feature, see [Import data](https://help.aliyun.com/document_detail/161439.html).
     *
     * @param tmpReq - CreateDataImportOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataImportOrderResponse
     *
     * @param CreateDataImportOrderRequest $tmpReq
     * @param RuntimeOptions               $runtime
     *
     * @return CreateDataImportOrderResponse
     */
    public function createDataImportOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataImportOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDataImportOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataImportOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataImportOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a ticket for importing data to Data Management (DMS).
     *
     * @remarks
     * For more information about the Large Data Import feature, see [Import data](https://help.aliyun.com/document_detail/161439.html).
     *
     * @param request - CreateDataImportOrderRequest
     * @returns CreateDataImportOrderResponse
     *
     * @param CreateDataImportOrderRequest $request
     *
     * @return CreateDataImportOrderResponse
     */
    public function createDataImportOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataImportOrderWithOptions($request, $runtime);
    }

    /**
     * 新建湖仓数据库.
     *
     * @param tmpReq - CreateDataLakeDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataLakeDatabaseResponse
     *
     * @param CreateDataLakeDatabaseRequest $tmpReq
     * @param RuntimeOptions                $runtime
     *
     * @return CreateDataLakeDatabaseResponse
     */
    public function createDataLakeDatabaseWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataLakeDatabaseShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->parameters) {
            $request->parametersShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->parameters, 'Parameters', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->location) {
            @$query['Location'] = $request->location;
        }

        if (null !== $request->parametersShrink) {
            @$query['Parameters'] = $request->parametersShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDataLakeDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataLakeDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataLakeDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 新建湖仓数据库.
     *
     * @param request - CreateDataLakeDatabaseRequest
     * @returns CreateDataLakeDatabaseResponse
     *
     * @param CreateDataLakeDatabaseRequest $request
     *
     * @return CreateDataLakeDatabaseResponse
     */
    public function createDataLakeDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataLakeDatabaseWithOptions($request, $runtime);
    }

    /**
     * 新建湖仓表分区.
     *
     * @param tmpReq - CreateDataLakePartitionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataLakePartitionResponse
     *
     * @param CreateDataLakePartitionRequest $tmpReq
     * @param RuntimeOptions                 $runtime
     *
     * @return CreateDataLakePartitionResponse
     */
    public function createDataLakePartitionWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataLakePartitionShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->partitionInput) {
            $request->partitionInputShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->partitionInput, 'PartitionInput', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->ifNotExists) {
            @$query['IfNotExists'] = $request->ifNotExists;
        }

        if (null !== $request->needResult) {
            @$query['NeedResult'] = $request->needResult;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->partitionInputShrink) {
            @$body['PartitionInput'] = $request->partitionInputShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'CreateDataLakePartition',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataLakePartitionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataLakePartitionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 新建湖仓表分区.
     *
     * @param request - CreateDataLakePartitionRequest
     * @returns CreateDataLakePartitionResponse
     *
     * @param CreateDataLakePartitionRequest $request
     *
     * @return CreateDataLakePartitionResponse
     */
    public function createDataLakePartition($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataLakePartitionWithOptions($request, $runtime);
    }

    /**
     * 新建湖仓表.
     *
     * @param tmpReq - CreateDataLakeTableRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataLakeTableResponse
     *
     * @param CreateDataLakeTableRequest $tmpReq
     * @param RuntimeOptions             $runtime
     *
     * @return CreateDataLakeTableResponse
     */
    public function createDataLakeTableWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataLakeTableShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->tableInput) {
            $request->tableInputShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->tableInput, 'TableInput', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->tableInputShrink) {
            @$body['TableInput'] = $request->tableInputShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'CreateDataLakeTable',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataLakeTableResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataLakeTableResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 新建湖仓表.
     *
     * @param request - CreateDataLakeTableRequest
     * @returns CreateDataLakeTableResponse
     *
     * @param CreateDataLakeTableRequest $request
     *
     * @return CreateDataLakeTableResponse
     */
    public function createDataLakeTable($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataLakeTableWithOptions($request, $runtime);
    }

    /**
     * Creates a data tracking ticket.
     *
     * @remarks
     * This operation is available only for instances that are managed in Security Collaboration mode.
     *
     * @param tmpReq - CreateDataTrackOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDataTrackOrderResponse
     *
     * @param CreateDataTrackOrderRequest $tmpReq
     * @param RuntimeOptions              $runtime
     *
     * @return CreateDataTrackOrderResponse
     */
    public function createDataTrackOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDataTrackOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDataTrackOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDataTrackOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDataTrackOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a data tracking ticket.
     *
     * @remarks
     * This operation is available only for instances that are managed in Security Collaboration mode.
     *
     * @param request - CreateDataTrackOrderRequest
     * @returns CreateDataTrackOrderResponse
     *
     * @param CreateDataTrackOrderRequest $request
     *
     * @return CreateDataTrackOrderResponse
     */
    public function createDataTrackOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDataTrackOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a database export ticket.
     *
     * @param tmpReq - CreateDatabaseExportOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateDatabaseExportOrderResponse
     *
     * @param CreateDatabaseExportOrderRequest $tmpReq
     * @param RuntimeOptions                   $runtime
     *
     * @return CreateDatabaseExportOrderResponse
     */
    public function createDatabaseExportOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateDatabaseExportOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->pluginParam) {
            $request->pluginParamShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->pluginParam, 'PluginParam', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->parentId) {
            @$query['ParentId'] = $request->parentId;
        }

        if (null !== $request->pluginParamShrink) {
            @$query['PluginParam'] = $request->pluginParamShrink;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateDatabaseExportOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateDatabaseExportOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateDatabaseExportOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a database export ticket.
     *
     * @param request - CreateDatabaseExportOrderRequest
     * @returns CreateDatabaseExportOrderResponse
     *
     * @param CreateDatabaseExportOrderRequest $request
     *
     * @return CreateDatabaseExportOrderResponse
     */
    public function createDatabaseExportOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createDatabaseExportOrderWithOptions($request, $runtime);
    }

    /**
     * 创建无锁变更工单.
     *
     * @remarks
     * For more information about the lock-free change feature, see [Overview](https://help.aliyun.com/document_detail/207847.html).
     * This operation can be used only for instances that are managed in Stable Change or Security Collaboration mode. For more information, see [Change data without the need to lock tables](https://help.aliyun.com/document_detail/96145.html) and [Change schemas without locking tables](https://help.aliyun.com/document_detail/98373.html).
     *
     * @param tmpReq - CreateFreeLockCorrectOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateFreeLockCorrectOrderResponse
     *
     * @param CreateFreeLockCorrectOrderRequest $tmpReq
     * @param RuntimeOptions                    $runtime
     *
     * @return CreateFreeLockCorrectOrderResponse
     */
    public function createFreeLockCorrectOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateFreeLockCorrectOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateFreeLockCorrectOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateFreeLockCorrectOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateFreeLockCorrectOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 创建无锁变更工单.
     *
     * @remarks
     * For more information about the lock-free change feature, see [Overview](https://help.aliyun.com/document_detail/207847.html).
     * This operation can be used only for instances that are managed in Stable Change or Security Collaboration mode. For more information, see [Change data without the need to lock tables](https://help.aliyun.com/document_detail/96145.html) and [Change schemas without locking tables](https://help.aliyun.com/document_detail/98373.html).
     *
     * @param request - CreateFreeLockCorrectOrderRequest
     * @returns CreateFreeLockCorrectOrderResponse
     *
     * @param CreateFreeLockCorrectOrderRequest $request
     *
     * @return CreateFreeLockCorrectOrderResponse
     */
    public function createFreeLockCorrectOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createFreeLockCorrectOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a workspace for data warehouse development in Data Management (DMS).
     *
     * @remarks
     *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
     * *   You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
     *
     * @param request - CreateLakeHouseSpaceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateLakeHouseSpaceResponse
     *
     * @param CreateLakeHouseSpaceRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return CreateLakeHouseSpaceResponse
     */
    public function createLakeHouseSpaceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->devDbId) {
            @$query['DevDbId'] = $request->devDbId;
        }

        if (null !== $request->dwDbType) {
            @$query['DwDbType'] = $request->dwDbType;
        }

        if (null !== $request->mode) {
            @$query['Mode'] = $request->mode;
        }

        if (null !== $request->prodDbId) {
            @$query['ProdDbId'] = $request->prodDbId;
        }

        if (null !== $request->spaceConfig) {
            @$query['SpaceConfig'] = $request->spaceConfig;
        }

        if (null !== $request->spaceName) {
            @$query['SpaceName'] = $request->spaceName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateLakeHouseSpace',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateLakeHouseSpaceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateLakeHouseSpaceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a workspace for data warehouse development in Data Management (DMS).
     *
     * @remarks
     *   The workspace name must be unique within a tenant. If a workspace with the same name already exists within the tenant, the call may fail.
     * *   You can call the [GetLhSpaceByName](https://help.aliyun.com/document_detail/424379.html) operation to query whether a workspace with a specific name already exists as a DMS administrator or database administrator (DBA).
     *
     * @param request - CreateLakeHouseSpaceRequest
     * @returns CreateLakeHouseSpaceResponse
     *
     * @param CreateLakeHouseSpaceRequest $request
     *
     * @return CreateLakeHouseSpaceResponse
     */
    public function createLakeHouseSpace($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createLakeHouseSpaceWithOptions($request, $runtime);
    }

    /**
     * Creates a logical database in Database Management (DMS).
     *
     * @param tmpReq - CreateLogicDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateLogicDatabaseResponse
     *
     * @param CreateLogicDatabaseRequest $tmpReq
     * @param RuntimeOptions             $runtime
     *
     * @return CreateLogicDatabaseResponse
     */
    public function createLogicDatabaseWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateLogicDatabaseShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->databaseIds) {
            $request->databaseIdsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->databaseIds, 'DatabaseIds', 'json');
        }

        $query = [];
        if (null !== $request->alias) {
            @$query['Alias'] = $request->alias;
        }

        if (null !== $request->databaseIdsShrink) {
            @$query['DatabaseIds'] = $request->databaseIdsShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateLogicDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateLogicDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateLogicDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a logical database in Database Management (DMS).
     *
     * @param request - CreateLogicDatabaseRequest
     * @returns CreateLogicDatabaseResponse
     *
     * @param CreateLogicDatabaseRequest $request
     *
     * @return CreateLogicDatabaseResponse
     */
    public function createLogicDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createLogicDatabaseWithOptions($request, $runtime);
    }

    /**
     * Creates a ticket in Data Management (DMS).
     *
     * @remarks
     * To facilitate ticket creation, you can call the following dedicated operations to create some types of tickets:
     * *   [CreateDataCorrectOrder](https://help.aliyun.com/document_detail/208388.html): creates a regular data change ticket.
     * *   [CreateDataCronClearOrder](https://help.aliyun.com/document_detail/208385.html): creates a ticket to clear historical data.
     * *   [CreateDataImportOrder](https://help.aliyun.com/document_detail/208387.html): creates a data import ticket.
     * *   [CreateFreeLockCorrectOrder](https://help.aliyun.com/document_detail/208386.html): creates a lock-free change ticket.
     *
     * @param tmpReq - CreateOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateOrderResponse
     *
     * @param CreateOrderRequest $tmpReq
     * @param RuntimeOptions     $runtime
     *
     * @return CreateOrderResponse
     */
    public function createOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->pluginParam) {
            $request->pluginParamShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->pluginParam, 'PluginParam', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->pluginType) {
            @$query['PluginType'] = $request->pluginType;
        }

        if (null !== $request->relatedUserList) {
            @$query['RelatedUserList'] = $request->relatedUserList;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->pluginParamShrink) {
            @$body['PluginParam'] = $request->pluginParamShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'CreateOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a ticket in Data Management (DMS).
     *
     * @remarks
     * To facilitate ticket creation, you can call the following dedicated operations to create some types of tickets:
     * *   [CreateDataCorrectOrder](https://help.aliyun.com/document_detail/208388.html): creates a regular data change ticket.
     * *   [CreateDataCronClearOrder](https://help.aliyun.com/document_detail/208385.html): creates a ticket to clear historical data.
     * *   [CreateDataImportOrder](https://help.aliyun.com/document_detail/208387.html): creates a data import ticket.
     * *   [CreateFreeLockCorrectOrder](https://help.aliyun.com/document_detail/208386.html): creates a lock-free change ticket.
     *
     * @param request - CreateOrderRequest
     * @returns CreateOrderResponse
     *
     * @param CreateOrderRequest $request
     *
     * @return CreateOrderResponse
     */
    public function createOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createOrderWithOptions($request, $runtime);
    }

    /**
     * 创建可编程对象变更工单.
     *
     * @param tmpReq - CreateProcCorrectOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateProcCorrectOrderResponse
     *
     * @param CreateProcCorrectOrderRequest $tmpReq
     * @param RuntimeOptions                $runtime
     *
     * @return CreateProcCorrectOrderResponse
     */
    public function createProcCorrectOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateProcCorrectOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateProcCorrectOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateProcCorrectOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateProcCorrectOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 创建可编程对象变更工单.
     *
     * @param request - CreateProcCorrectOrderRequest
     * @returns CreateProcCorrectOrderResponse
     *
     * @param CreateProcCorrectOrderRequest $request
     *
     * @return CreateProcCorrectOrderResponse
     */
    public function createProcCorrectOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createProcCorrectOrderWithOptions($request, $runtime);
    }

    /**
     * Enables the secure access proxy feature for a database instance.
     *
     * @remarks
     * - The database instance runs the MySQL or MariaDB database engine. For example, the database instance can be an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, a Distributed Relational Database Service (DRDS) cluster, or an AnalyticDB for MySQL cluster. The database instance can also be a self-managed MySQL or MariaDB database, or a MySQL or MariaDB database in a third-party cloud.
     * - The database instance resides in the China (Hangzhou) or China (Beijing) region.
     * - You are a Data Management (DMS) administrator, a database administrator (DBA), or the owner of the database instance.
     *
     * @param request - CreateProxyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateProxyResponse
     *
     * @param CreateProxyRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return CreateProxyResponse
     */
    public function createProxyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->password) {
            @$query['Password'] = $request->password;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->username) {
            @$query['Username'] = $request->username;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateProxy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateProxyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateProxyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Enables the secure access proxy feature for a database instance.
     *
     * @remarks
     * - The database instance runs the MySQL or MariaDB database engine. For example, the database instance can be an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, a Distributed Relational Database Service (DRDS) cluster, or an AnalyticDB for MySQL cluster. The database instance can also be a self-managed MySQL or MariaDB database, or a MySQL or MariaDB database in a third-party cloud.
     * - The database instance resides in the China (Hangzhou) or China (Beijing) region.
     * - You are a Data Management (DMS) administrator, a database administrator (DBA), or the owner of the database instance.
     *
     * @param request - CreateProxyRequest
     * @returns CreateProxyResponse
     *
     * @param CreateProxyRequest $request
     *
     * @return CreateProxyResponse
     */
    public function createProxy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createProxyWithOptions($request, $runtime);
    }

    /**
     * You can call the CreateProxyAccess to authorize users to access the DB instance through the Data Security Protection agent.
     *
     * @remarks
     * - The data security protection feature is enabled for the instance.
     * - Your user role is the administrator role, DBA role, or the owner of data security protection for the current instance.
     *
     * @param request - CreateProxyAccessRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateProxyAccessResponse
     *
     * @param CreateProxyAccessRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return CreateProxyAccessResponse
     */
    public function createProxyAccessWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->indepAccount) {
            @$query['IndepAccount'] = $request->indepAccount;
        }

        if (null !== $request->indepPassword) {
            @$query['IndepPassword'] = $request->indepPassword;
        }

        if (null !== $request->proxyId) {
            @$query['ProxyId'] = $request->proxyId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateProxyAccess',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateProxyAccessResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateProxyAccessResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * You can call the CreateProxyAccess to authorize users to access the DB instance through the Data Security Protection agent.
     *
     * @remarks
     * - The data security protection feature is enabled for the instance.
     * - Your user role is the administrator role, DBA role, or the owner of data security protection for the current instance.
     *
     * @param request - CreateProxyAccessRequest
     * @returns CreateProxyAccessResponse
     *
     * @param CreateProxyAccessRequest $request
     *
     * @return CreateProxyAccessResponse
     */
    public function createProxyAccess($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createProxyAccessWithOptions($request, $runtime);
    }

    /**
     * Executes a schema design ticket.
     *
     * @param request - CreatePublishGroupTaskRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreatePublishGroupTaskResponse
     *
     * @param CreatePublishGroupTaskRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return CreatePublishGroupTaskResponse
     */
    public function createPublishGroupTaskWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->planTime) {
            @$query['PlanTime'] = $request->planTime;
        }

        if (null !== $request->publishStrategy) {
            @$query['PublishStrategy'] = $request->publishStrategy;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreatePublishGroupTask',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreatePublishGroupTaskResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreatePublishGroupTaskResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Executes a schema design ticket.
     *
     * @param request - CreatePublishGroupTaskRequest
     * @returns CreatePublishGroupTaskResponse
     *
     * @param CreatePublishGroupTaskRequest $request
     *
     * @return CreatePublishGroupTaskResponse
     */
    public function createPublishGroupTask($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createPublishGroupTaskWithOptions($request, $runtime);
    }

    /**
     * Creates a SQL review ticket.
     *
     * @remarks
     * You can call this operation only for database instances that are managed in Security Collaboration mode.
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param tmpReq - CreateSQLReviewOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateSQLReviewOrderResponse
     *
     * @param CreateSQLReviewOrderRequest $tmpReq
     * @param RuntimeOptions              $runtime
     *
     * @return CreateSQLReviewOrderResponse
     */
    public function createSQLReviewOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateSQLReviewOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateSQLReviewOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateSQLReviewOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateSQLReviewOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a SQL review ticket.
     *
     * @remarks
     * You can call this operation only for database instances that are managed in Security Collaboration mode.
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param request - CreateSQLReviewOrderRequest
     * @returns CreateSQLReviewOrderResponse
     *
     * @param CreateSQLReviewOrderRequest $request
     *
     * @return CreateSQLReviewOrderResponse
     */
    public function createSQLReviewOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createSQLReviewOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a business scenario to group task flows by business scenario.
     *
     * @param request - CreateScenarioRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateScenarioResponse
     *
     * @param CreateScenarioRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return CreateScenarioResponse
     */
    public function createScenarioWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->scenarioName) {
            @$query['ScenarioName'] = $request->scenarioName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateScenario',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateScenarioResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateScenarioResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a business scenario to group task flows by business scenario.
     *
     * @param request - CreateScenarioRequest
     * @returns CreateScenarioResponse
     *
     * @param CreateScenarioRequest $request
     *
     * @return CreateScenarioResponse
     */
    public function createScenario($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createScenarioWithOptions($request, $runtime);
    }

    /**
     * Creates a security rule set.
     *
     * @param request - CreateStandardGroupRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateStandardGroupResponse
     *
     * @param CreateStandardGroupRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return CreateStandardGroupResponse
     */
    public function createStandardGroupWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbType) {
            @$query['DbType'] = $request->dbType;
        }

        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->groupName) {
            @$query['GroupName'] = $request->groupName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateStandardGroup',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateStandardGroupResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateStandardGroupResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a security rule set.
     *
     * @param request - CreateStandardGroupRequest
     * @returns CreateStandardGroupResponse
     *
     * @param CreateStandardGroupRequest $request
     *
     * @return CreateStandardGroupResponse
     */
    public function createStandardGroup($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createStandardGroupWithOptions($request, $runtime);
    }

    /**
     * Creates a schema synchronization ticket.
     *
     * @param tmpReq - CreateStructSyncOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateStructSyncOrderResponse
     *
     * @param CreateStructSyncOrderRequest $tmpReq
     * @param RuntimeOptions               $runtime
     *
     * @return CreateStructSyncOrderResponse
     */
    public function createStructSyncOrderWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateStructSyncOrderShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->param) {
            $request->paramShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->param, 'Param', 'json');
        }

        if (null !== $tmpReq->relatedUserList) {
            $request->relatedUserListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->relatedUserList, 'RelatedUserList', 'json');
        }

        $query = [];
        if (null !== $request->attachmentKey) {
            @$query['AttachmentKey'] = $request->attachmentKey;
        }

        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->paramShrink) {
            @$query['Param'] = $request->paramShrink;
        }

        if (null !== $request->relatedUserListShrink) {
            @$query['RelatedUserList'] = $request->relatedUserListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateStructSyncOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateStructSyncOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateStructSyncOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a schema synchronization ticket.
     *
     * @param request - CreateStructSyncOrderRequest
     * @returns CreateStructSyncOrderResponse
     *
     * @param CreateStructSyncOrderRequest $request
     *
     * @return CreateStructSyncOrderResponse
     */
    public function createStructSyncOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createStructSyncOrderWithOptions($request, $runtime);
    }

    /**
     * Creates a task node for a task flow.
     *
     * @param request - CreateTaskRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTaskResponse
     *
     * @param CreateTaskRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return CreateTaskResponse
     */
    public function createTaskWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->graphParam) {
            @$query['GraphParam'] = $request->graphParam;
        }

        if (null !== $request->nodeContent) {
            @$query['NodeContent'] = $request->nodeContent;
        }

        if (null !== $request->nodeName) {
            @$query['NodeName'] = $request->nodeName;
        }

        if (null !== $request->nodeOutput) {
            @$query['NodeOutput'] = $request->nodeOutput;
        }

        if (null !== $request->nodeType) {
            @$query['NodeType'] = $request->nodeType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->timeVariables) {
            @$query['TimeVariables'] = $request->timeVariables;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateTask',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateTaskResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateTaskResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a task node for a task flow.
     *
     * @param request - CreateTaskRequest
     * @returns CreateTaskResponse
     *
     * @param CreateTaskRequest $request
     *
     * @return CreateTaskResponse
     */
    public function createTask($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createTaskWithOptions($request, $runtime);
    }

    /**
     * Creates a task flow.
     *
     * @param request - CreateTaskFlowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateTaskFlowResponse
     *
     * @param CreateTaskFlowRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return CreateTaskFlowResponse
     */
    public function createTaskFlowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagName) {
            @$query['DagName'] = $request->dagName;
        }

        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->scenarioId) {
            @$query['ScenarioId'] = $request->scenarioId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateTaskFlow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateTaskFlowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateTaskFlowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a task flow.
     *
     * @param request - CreateTaskFlowRequest
     * @returns CreateTaskFlowResponse
     *
     * @param CreateTaskFlowRequest $request
     *
     * @return CreateTaskFlowResponse
     */
    public function createTaskFlow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createTaskFlowWithOptions($request, $runtime);
    }

    /**
     * 创建上传附件任务
     *
     * @param request - CreateUploadFileJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateUploadFileJobResponse
     *
     * @param CreateUploadFileJobRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return CreateUploadFileJobResponse
     */
    public function createUploadFileJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->fileName) {
            @$query['FileName'] = $request->fileName;
        }

        if (null !== $request->fileSource) {
            @$query['FileSource'] = $request->fileSource;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uploadURL) {
            @$query['UploadURL'] = $request->uploadURL;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateUploadFileJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateUploadFileJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateUploadFileJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 创建上传附件任务
     *
     * @param request - CreateUploadFileJobRequest
     * @returns CreateUploadFileJobResponse
     *
     * @param CreateUploadFileJobRequest $request
     *
     * @return CreateUploadFileJobResponse
     */
    public function createUploadFileJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createUploadFileJobWithOptions($request, $runtime);
    }

    /**
     * Creates a task to upload an Object Storage Service (OSS) file and obtain the key of the task.
     *
     * @param tmpReq - CreateUploadOSSFileJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns CreateUploadOSSFileJobResponse
     *
     * @param CreateUploadOSSFileJobRequest $tmpReq
     * @param RuntimeOptions                $runtime
     *
     * @return CreateUploadOSSFileJobResponse
     */
    public function createUploadOSSFileJobWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new CreateUploadOSSFileJobShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->uploadTarget) {
            $request->uploadTargetShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->uploadTarget, 'UploadTarget', 'json');
        }

        $query = [];
        if (null !== $request->fileName) {
            @$query['FileName'] = $request->fileName;
        }

        if (null !== $request->fileSource) {
            @$query['FileSource'] = $request->fileSource;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uploadTargetShrink) {
            @$query['UploadTarget'] = $request->uploadTargetShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'CreateUploadOSSFileJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return CreateUploadOSSFileJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return CreateUploadOSSFileJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Creates a task to upload an Object Storage Service (OSS) file and obtain the key of the task.
     *
     * @param request - CreateUploadOSSFileJobRequest
     * @returns CreateUploadOSSFileJobResponse
     *
     * @param CreateUploadOSSFileJobRequest $request
     *
     * @return CreateUploadOSSFileJobResponse
     */
    public function createUploadOSSFileJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->createUploadOSSFileJobWithOptions($request, $runtime);
    }

    /**
     * 删除权限策略授权.
     *
     * @param request - DeleteAbacAuthorizationRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAbacAuthorizationResponse
     *
     * @param DeleteAbacAuthorizationRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return DeleteAbacAuthorizationResponse
     */
    public function deleteAbacAuthorizationWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->authorizationId) {
            @$query['AuthorizationId'] = $request->authorizationId;
        }

        if (null !== $request->identityType) {
            @$query['IdentityType'] = $request->identityType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteAbacAuthorization',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteAbacAuthorizationResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteAbacAuthorizationResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除权限策略授权.
     *
     * @param request - DeleteAbacAuthorizationRequest
     * @returns DeleteAbacAuthorizationResponse
     *
     * @param DeleteAbacAuthorizationRequest $request
     *
     * @return DeleteAbacAuthorizationResponse
     */
    public function deleteAbacAuthorization($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteAbacAuthorizationWithOptions($request, $runtime);
    }

    /**
     * 删除权限策略.
     *
     * @param request - DeleteAbacPolicyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAbacPolicyResponse
     *
     * @param DeleteAbacPolicyRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return DeleteAbacPolicyResponse
     */
    public function deleteAbacPolicyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->abacPolicyId) {
            @$query['AbacPolicyId'] = $request->abacPolicyId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteAbacPolicy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteAbacPolicyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteAbacPolicyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除权限策略.
     *
     * @param request - DeleteAbacPolicyRequest
     * @returns DeleteAbacPolicyResponse
     *
     * @param DeleteAbacPolicyRequest $request
     *
     * @return DeleteAbacPolicyResponse
     */
    public function deleteAbacPolicy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteAbacPolicyWithOptions($request, $runtime);
    }

    /**
     * 删除权限模版.
     *
     * @param request - DeleteAuthorityTemplateRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteAuthorityTemplateResponse
     *
     * @param DeleteAuthorityTemplateRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return DeleteAuthorityTemplateResponse
     */
    public function deleteAuthorityTemplateWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteAuthorityTemplate',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteAuthorityTemplateResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteAuthorityTemplateResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除权限模版.
     *
     * @param request - DeleteAuthorityTemplateRequest
     * @returns DeleteAuthorityTemplateResponse
     *
     * @param DeleteAuthorityTemplateRequest $request
     *
     * @return DeleteAuthorityTemplateResponse
     */
    public function deleteAuthorityTemplate($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteAuthorityTemplateWithOptions($request, $runtime);
    }

    /**
     * 删除湖仓数据库.
     *
     * @param request - DeleteDataLakeDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDataLakeDatabaseResponse
     *
     * @param DeleteDataLakeDatabaseRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return DeleteDataLakeDatabaseResponse
     */
    public function deleteDataLakeDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteDataLakeDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteDataLakeDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteDataLakeDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除湖仓数据库.
     *
     * @param request - DeleteDataLakeDatabaseRequest
     * @returns DeleteDataLakeDatabaseResponse
     *
     * @param DeleteDataLakeDatabaseRequest $request
     *
     * @return DeleteDataLakeDatabaseResponse
     */
    public function deleteDataLakeDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteDataLakeDatabaseWithOptions($request, $runtime);
    }

    /**
     * 删除湖仓表分区.
     *
     * @param tmpReq - DeleteDataLakePartitionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDataLakePartitionResponse
     *
     * @param DeleteDataLakePartitionRequest $tmpReq
     * @param RuntimeOptions                 $runtime
     *
     * @return DeleteDataLakePartitionResponse
     */
    public function deleteDataLakePartitionWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new DeleteDataLakePartitionShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->partitionValues) {
            $request->partitionValuesShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->partitionValues, 'PartitionValues', 'simple');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->ifExists) {
            @$query['IfExists'] = $request->ifExists;
        }

        if (null !== $request->partitionValuesShrink) {
            @$query['PartitionValues'] = $request->partitionValuesShrink;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteDataLakePartition',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteDataLakePartitionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteDataLakePartitionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除湖仓表分区.
     *
     * @param request - DeleteDataLakePartitionRequest
     * @returns DeleteDataLakePartitionResponse
     *
     * @param DeleteDataLakePartitionRequest $request
     *
     * @return DeleteDataLakePartitionResponse
     */
    public function deleteDataLakePartition($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteDataLakePartitionWithOptions($request, $runtime);
    }

    /**
     * 删除湖仓表.
     *
     * @param request - DeleteDataLakeTableRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteDataLakeTableResponse
     *
     * @param DeleteDataLakeTableRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return DeleteDataLakeTableResponse
     */
    public function deleteDataLakeTableWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteDataLakeTable',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteDataLakeTableResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteDataLakeTableResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除湖仓表.
     *
     * @param request - DeleteDataLakeTableRequest
     * @returns DeleteDataLakeTableResponse
     *
     * @param DeleteDataLakeTableRequest $request
     *
     * @return DeleteDataLakeTableResponse
     */
    public function deleteDataLakeTable($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteDataLakeTableWithOptions($request, $runtime);
    }

    /**
     * Removes a database instance from Data Management (DMS).
     *
     * @remarks
     * Note: You can call this operation only to remove a database instance from the instance list of DMS. The instance is not deleted or shut down.
     *
     * @param request - DeleteInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteInstanceResponse
     *
     * @param DeleteInstanceRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return DeleteInstanceResponse
     */
    public function deleteInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->host) {
            @$query['Host'] = $request->host;
        }

        if (null !== $request->port) {
            @$query['Port'] = $request->port;
        }

        if (null !== $request->sid) {
            @$query['Sid'] = $request->sid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Removes a database instance from Data Management (DMS).
     *
     * @remarks
     * Note: You can call this operation only to remove a database instance from the instance list of DMS. The instance is not deleted or shut down.
     *
     * @param request - DeleteInstanceRequest
     * @returns DeleteInstanceResponse
     *
     * @param DeleteInstanceRequest $request
     *
     * @return DeleteInstanceResponse
     */
    public function deleteInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteInstanceWithOptions($request, $runtime);
    }

    /**
     * Deletes a workspace.
     *
     * @param request - DeleteLakeHouseSpaceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteLakeHouseSpaceResponse
     *
     * @param DeleteLakeHouseSpaceRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return DeleteLakeHouseSpaceResponse
     */
    public function deleteLakeHouseSpaceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->spaceId) {
            @$query['SpaceId'] = $request->spaceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteLakeHouseSpace',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteLakeHouseSpaceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteLakeHouseSpaceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes a workspace.
     *
     * @param request - DeleteLakeHouseSpaceRequest
     * @returns DeleteLakeHouseSpaceResponse
     *
     * @param DeleteLakeHouseSpaceRequest $request
     *
     * @return DeleteLakeHouseSpaceResponse
     */
    public function deleteLakeHouseSpace($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteLakeHouseSpaceWithOptions($request, $runtime);
    }

    /**
     * 删除数仓空间成员.
     *
     * @remarks
     * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
     * You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
     *
     * @param tmpReq - DeleteLhMembersRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteLhMembersResponse
     *
     * @param DeleteLhMembersRequest $tmpReq
     * @param RuntimeOptions         $runtime
     *
     * @return DeleteLhMembersResponse
     */
    public function deleteLhMembersWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new DeleteLhMembersShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->memberIds) {
            $request->memberIdsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->memberIds, 'MemberIds', 'json');
        }

        $query = [];
        if (null !== $request->memberIdsShrink) {
            @$query['MemberIds'] = $request->memberIdsShrink;
        }

        if (null !== $request->objectId) {
            @$query['ObjectId'] = $request->objectId;
        }

        if (null !== $request->objectType) {
            @$query['ObjectType'] = $request->objectType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteLhMembers',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteLhMembersResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteLhMembersResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除数仓空间成员.
     *
     * @remarks
     * You must call this operation as a DMS administrator, a database administrator (DBA), or a workspace administrator.
     * You cannot call this operation to transfer the ownership of a task flow. To transfer the ownership of a task flow, call the [ChangLhDagOwner](https://help.aliyun.com/document_detail/424761.html) operation.
     *
     * @param request - DeleteLhMembersRequest
     * @returns DeleteLhMembersResponse
     *
     * @param DeleteLhMembersRequest $request
     *
     * @return DeleteLhMembersResponse
     */
    public function deleteLhMembers($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteLhMembersWithOptions($request, $runtime);
    }

    /**
     * Deletes a logical database in Database Management (DMS). This operation only deletes the specified logical database but does not delete physical databases.
     *
     * @param request - DeleteLogicDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteLogicDatabaseResponse
     *
     * @param DeleteLogicDatabaseRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return DeleteLogicDatabaseResponse
     */
    public function deleteLogicDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->logicDbId) {
            @$query['LogicDbId'] = $request->logicDbId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteLogicDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteLogicDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteLogicDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes a logical database in Database Management (DMS). This operation only deletes the specified logical database but does not delete physical databases.
     *
     * @param request - DeleteLogicDatabaseRequest
     * @returns DeleteLogicDatabaseResponse
     *
     * @param DeleteLogicDatabaseRequest $request
     *
     * @return DeleteLogicDatabaseResponse
     */
    public function deleteLogicDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteLogicDatabaseWithOptions($request, $runtime);
    }

    /**
     * Deletes the routing algorithm of a logical table.
     *
     * @param request - DeleteLogicTableRouteConfigRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteLogicTableRouteConfigResponse
     *
     * @param DeleteLogicTableRouteConfigRequest $request
     * @param RuntimeOptions                     $runtime
     *
     * @return DeleteLogicTableRouteConfigResponse
     */
    public function deleteLogicTableRouteConfigWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->routeKey) {
            @$query['RouteKey'] = $request->routeKey;
        }

        if (null !== $request->tableId) {
            @$query['TableId'] = $request->tableId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteLogicTableRouteConfig',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteLogicTableRouteConfigResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteLogicTableRouteConfigResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes the routing algorithm of a logical table.
     *
     * @param request - DeleteLogicTableRouteConfigRequest
     * @returns DeleteLogicTableRouteConfigResponse
     *
     * @param DeleteLogicTableRouteConfigRequest $request
     *
     * @return DeleteLogicTableRouteConfigResponse
     */
    public function deleteLogicTableRouteConfig($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteLogicTableRouteConfigWithOptions($request, $runtime);
    }

    /**
     * You can call this operation to disable the data security protection proxy of a DB instance.
     *
     * @remarks
     * After you disable this feature, your DB instance loses the JDBC protocol. All authorization information is recycled.
     *
     * @param request - DeleteProxyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteProxyResponse
     *
     * @param DeleteProxyRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return DeleteProxyResponse
     */
    public function deleteProxyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->proxyId) {
            @$query['ProxyId'] = $request->proxyId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteProxy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteProxyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteProxyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * You can call this operation to disable the data security protection proxy of a DB instance.
     *
     * @remarks
     * After you disable this feature, your DB instance loses the JDBC protocol. All authorization information is recycled.
     *
     * @param request - DeleteProxyRequest
     * @returns DeleteProxyResponse
     *
     * @param DeleteProxyRequest $request
     *
     * @return DeleteProxyResponse
     */
    public function deleteProxy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteProxyWithOptions($request, $runtime);
    }

    /**
     * You can call this operation to DeleteProxyAccess reclaim the data security protection authorization of the target user.
     *
     * @param request - DeleteProxyAccessRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteProxyAccessResponse
     *
     * @param DeleteProxyAccessRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return DeleteProxyAccessResponse
     */
    public function deleteProxyAccessWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->proxyAccessId) {
            @$query['ProxyAccessId'] = $request->proxyAccessId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteProxyAccess',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteProxyAccessResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteProxyAccessResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * You can call this operation to DeleteProxyAccess reclaim the data security protection authorization of the target user.
     *
     * @param request - DeleteProxyAccessRequest
     * @returns DeleteProxyAccessResponse
     *
     * @param DeleteProxyAccessRequest $request
     *
     * @return DeleteProxyAccessResponse
     */
    public function deleteProxyAccess($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteProxyAccessWithOptions($request, $runtime);
    }

    /**
     * Deletes a business scenario.
     *
     * @remarks
     * When you call this operation, make sure that no task flow is specified in the business scenario.
     *
     * @param request - DeleteScenarioRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteScenarioResponse
     *
     * @param DeleteScenarioRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return DeleteScenarioResponse
     */
    public function deleteScenarioWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->scenarioId) {
            @$query['ScenarioId'] = $request->scenarioId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteScenario',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteScenarioResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteScenarioResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes a business scenario.
     *
     * @remarks
     * When you call this operation, make sure that no task flow is specified in the business scenario.
     *
     * @param request - DeleteScenarioRequest
     * @returns DeleteScenarioResponse
     *
     * @param DeleteScenarioRequest $request
     *
     * @return DeleteScenarioResponse
     */
    public function deleteScenario($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteScenarioWithOptions($request, $runtime);
    }

    /**
     * 删除安全规则.
     *
     * @param request - DeleteStandardGroupRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteStandardGroupResponse
     *
     * @param DeleteStandardGroupRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return DeleteStandardGroupResponse
     */
    public function deleteStandardGroupWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->groupId) {
            @$query['GroupId'] = $request->groupId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteStandardGroup',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteStandardGroupResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteStandardGroupResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除安全规则.
     *
     * @param request - DeleteStandardGroupRequest
     * @returns DeleteStandardGroupResponse
     *
     * @param DeleteStandardGroupRequest $request
     *
     * @return DeleteStandardGroupResponse
     */
    public function deleteStandardGroup($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteStandardGroupWithOptions($request, $runtime);
    }

    /**
     * Deletes a task in a specified task flow.
     *
     * @param request - DeleteTaskRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTaskResponse
     *
     * @param DeleteTaskRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return DeleteTaskResponse
     */
    public function deleteTaskWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->nodeId) {
            @$query['NodeId'] = $request->nodeId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteTask',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteTaskResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteTaskResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes a task in a specified task flow.
     *
     * @param request - DeleteTaskRequest
     * @returns DeleteTaskResponse
     *
     * @param DeleteTaskRequest $request
     *
     * @return DeleteTaskResponse
     */
    public function deleteTask($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteTaskWithOptions($request, $runtime);
    }

    /**
     * Deletes a task flow.
     *
     * @param request - DeleteTaskFlowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTaskFlowResponse
     *
     * @param DeleteTaskFlowRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return DeleteTaskFlowResponse
     */
    public function deleteTaskFlowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteTaskFlow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteTaskFlowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteTaskFlowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes a task flow.
     *
     * @param request - DeleteTaskFlowRequest
     * @returns DeleteTaskFlowResponse
     *
     * @param DeleteTaskFlowRequest $request
     *
     * @return DeleteTaskFlowResponse
     */
    public function deleteTaskFlow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteTaskFlowWithOptions($request, $runtime);
    }

    /**
     * Deletes task flow edges based on multiple conditions.
     *
     * @remarks
     * This operation is used for multi-condition query. You can call it to delete the edges of a specified task flow that meet all specified conditions.
     *
     * @param request - DeleteTaskFlowEdgesByConditionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteTaskFlowEdgesByConditionResponse
     *
     * @param DeleteTaskFlowEdgesByConditionRequest $request
     * @param RuntimeOptions                        $runtime
     *
     * @return DeleteTaskFlowEdgesByConditionResponse
     */
    public function deleteTaskFlowEdgesByConditionWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->id) {
            @$query['Id'] = $request->id;
        }

        if (null !== $request->nodeEnd) {
            @$query['NodeEnd'] = $request->nodeEnd;
        }

        if (null !== $request->nodeFrom) {
            @$query['NodeFrom'] = $request->nodeFrom;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteTaskFlowEdgesByCondition',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteTaskFlowEdgesByConditionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteTaskFlowEdgesByConditionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes task flow edges based on multiple conditions.
     *
     * @remarks
     * This operation is used for multi-condition query. You can call it to delete the edges of a specified task flow that meet all specified conditions.
     *
     * @param request - DeleteTaskFlowEdgesByConditionRequest
     * @returns DeleteTaskFlowEdgesByConditionResponse
     *
     * @param DeleteTaskFlowEdgesByConditionRequest $request
     *
     * @return DeleteTaskFlowEdgesByConditionResponse
     */
    public function deleteTaskFlowEdgesByCondition($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteTaskFlowEdgesByConditionWithOptions($request, $runtime);
    }

    /**
     * Deletes an Alibaba Cloud account that is no longer used.
     *
     * @remarks
     * The effect of deleting a user by calling this operation is the same as that of deleting a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to delete a user that is no longer used from DMS Enterprise. After the user is deleted, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
     * >  This operation only removes the association of the Alibaba Cloud account or RAM user with DMS Enterprise of the enterprise, rather than actually deleting the Alibaba Cloud account or RAM user. After the user is deleted, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is added to DMS Enterprise again.
     *
     * @param request - DeleteUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DeleteUserResponse
     *
     * @param DeleteUserRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return DeleteUserResponse
     */
    public function deleteUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uid) {
            @$query['Uid'] = $request->uid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DeleteUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DeleteUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DeleteUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Deletes an Alibaba Cloud account that is no longer used.
     *
     * @remarks
     * The effect of deleting a user by calling this operation is the same as that of deleting a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to delete a user that is no longer used from DMS Enterprise. After the user is deleted, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
     * >  This operation only removes the association of the Alibaba Cloud account or RAM user with DMS Enterprise of the enterprise, rather than actually deleting the Alibaba Cloud account or RAM user. After the user is deleted, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is added to DMS Enterprise again.
     *
     * @param request - DeleteUserRequest
     * @returns DeleteUserResponse
     *
     * @param DeleteUserRequest $request
     *
     * @return DeleteUserResponse
     */
    public function deleteUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->deleteUserWithOptions($request, $runtime);
    }

    /**
     * You can call this operation to disable a user that is temporarily not used in Data Management (DMS) Enterprise.
     *
     * @remarks
     * The effect of disabling a user by calling this operation is the same as that of disabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to disable a user that is temporarily not used in DMS Enterprise. After the user is disabled, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
     * >  This operation only stops the Alibaba Cloud account or RAM user from logging on to DMS Enterprise of the enterprise, rather than actually disabling the Alibaba Cloud account or RAM user. After the user is disabled, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is enabled again. The disabled user, however, still exists in DMS Enterprise.
     *
     * @param request - DisableUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DisableUserResponse
     *
     * @param DisableUserRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return DisableUserResponse
     */
    public function disableUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uid) {
            @$query['Uid'] = $request->uid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DisableUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DisableUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DisableUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * You can call this operation to disable a user that is temporarily not used in Data Management (DMS) Enterprise.
     *
     * @remarks
     * The effect of disabling a user by calling this operation is the same as that of disabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to disable a user that is temporarily not used in DMS Enterprise. After the user is disabled, the data source permission, data owner configuration, and database administrator (DBA) configuration of the corresponding Alibaba Cloud account or Resource Access Management (RAM) user are revoked and become invalid.
     * >  This operation only stops the Alibaba Cloud account or RAM user from logging on to DMS Enterprise of the enterprise, rather than actually disabling the Alibaba Cloud account or RAM user. After the user is disabled, the Alibaba Cloud account or RAM user cannot log on to DMS Enterprise, unless the user is enabled again. The disabled user, however, still exists in DMS Enterprise.
     *
     * @param request - DisableUserRequest
     * @returns DisableUserResponse
     *
     * @param DisableUserRequest $request
     *
     * @return DisableUserResponse
     */
    public function disableUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->disableUserWithOptions($request, $runtime);
    }

    /**
     * Downloads the parsing result of a data tracking task.
     *
     * @param tmpReq - DownloadDataTrackResultRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns DownloadDataTrackResultResponse
     *
     * @param DownloadDataTrackResultRequest $tmpReq
     * @param RuntimeOptions                 $runtime
     *
     * @return DownloadDataTrackResultResponse
     */
    public function downloadDataTrackResultWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new DownloadDataTrackResultShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->columnFilter) {
            $request->columnFilterShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->columnFilter, 'ColumnFilter', 'json');
        }

        if (null !== $tmpReq->eventIdList) {
            $request->eventIdListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->eventIdList, 'EventIdList', 'json');
        }

        if (null !== $tmpReq->filterTableList) {
            $request->filterTableListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->filterTableList, 'FilterTableList', 'json');
        }

        if (null !== $tmpReq->filterTypeList) {
            $request->filterTypeListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->filterTypeList, 'FilterTypeList', 'json');
        }

        $query = [];
        if (null !== $request->columnFilterShrink) {
            @$query['ColumnFilter'] = $request->columnFilterShrink;
        }

        if (null !== $request->eventIdListShrink) {
            @$query['EventIdList'] = $request->eventIdListShrink;
        }

        if (null !== $request->filterEndTime) {
            @$query['FilterEndTime'] = $request->filterEndTime;
        }

        if (null !== $request->filterStartTime) {
            @$query['FilterStartTime'] = $request->filterStartTime;
        }

        if (null !== $request->filterTableListShrink) {
            @$query['FilterTableList'] = $request->filterTableListShrink;
        }

        if (null !== $request->filterTypeListShrink) {
            @$query['FilterTypeList'] = $request->filterTypeListShrink;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->rollbackSQLType) {
            @$query['RollbackSQLType'] = $request->rollbackSQLType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'DownloadDataTrackResult',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return DownloadDataTrackResultResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return DownloadDataTrackResultResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Downloads the parsing result of a data tracking task.
     *
     * @param request - DownloadDataTrackResultRequest
     * @returns DownloadDataTrackResultResponse
     *
     * @param DownloadDataTrackResultRequest $request
     *
     * @return DownloadDataTrackResultResponse
     */
    public function downloadDataTrackResult($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->downloadDataTrackResultWithOptions($request, $runtime);
    }

    /**
     * Modifies the information about a logical database.
     *
     * @param tmpReq - EditLogicDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EditLogicDatabaseResponse
     *
     * @param EditLogicDatabaseRequest $tmpReq
     * @param RuntimeOptions           $runtime
     *
     * @return EditLogicDatabaseResponse
     */
    public function editLogicDatabaseWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new EditLogicDatabaseShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->databaseIds) {
            $request->databaseIdsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->databaseIds, 'DatabaseIds', 'json');
        }

        $query = [];
        if (null !== $request->alias) {
            @$query['Alias'] = $request->alias;
        }

        if (null !== $request->databaseIdsShrink) {
            @$query['DatabaseIds'] = $request->databaseIdsShrink;
        }

        if (null !== $request->logicDbId) {
            @$query['LogicDbId'] = $request->logicDbId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'EditLogicDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return EditLogicDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return EditLogicDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Modifies the information about a logical database.
     *
     * @param request - EditLogicDatabaseRequest
     * @returns EditLogicDatabaseResponse
     *
     * @param EditLogicDatabaseRequest $request
     *
     * @return EditLogicDatabaseResponse
     */
    public function editLogicDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->editLogicDatabaseWithOptions($request, $runtime);
    }

    /**
     * You can call this operation to enable a user that has been disabled in Data Management (DMS) Enterprise.
     *
     * @remarks
     * The effect of enabling a user by calling this operation is the same as that of enabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to enable a user that has been disabled in DMS Enterprise. After the user is enabled, the corresponding Alibaba Cloud account or Resource Access Management (RAM) user can continue to log on to DMS Enterprise and perform relevant operations.
     * >  This operation only enables the Alibaba Cloud account or RAM user to log on to DMS Enterprise of the enterprise and perform relevant operations, rather than granting other permissions to the Alibaba Cloud account or RAM user.
     *
     * @param request - EnableUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns EnableUserResponse
     *
     * @param EnableUserRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return EnableUserResponse
     */
    public function enableUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uid) {
            @$query['Uid'] = $request->uid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'EnableUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return EnableUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return EnableUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * You can call this operation to enable a user that has been disabled in Data Management (DMS) Enterprise.
     *
     * @remarks
     * The effect of enabling a user by calling this operation is the same as that of enabling a user by choosing System Management > User Management in the DMS Enterprise console. The administrator of DMS Enterprise can call this operation to enable a user that has been disabled in DMS Enterprise. After the user is enabled, the corresponding Alibaba Cloud account or Resource Access Management (RAM) user can continue to log on to DMS Enterprise and perform relevant operations.
     * >  This operation only enables the Alibaba Cloud account or RAM user to log on to DMS Enterprise of the enterprise and perform relevant operations, rather than granting other permissions to the Alibaba Cloud account or RAM user.
     *
     * @param request - EnableUserRequest
     * @returns EnableUserResponse
     *
     * @param EnableUserRequest $request
     *
     * @return EnableUserResponse
     */
    public function enableUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->enableUserWithOptions($request, $runtime);
    }

    /**
     * Submits a ticket for data change.
     *
     * @param tmpReq - ExecuteDataCorrectRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExecuteDataCorrectResponse
     *
     * @param ExecuteDataCorrectRequest $tmpReq
     * @param RuntimeOptions            $runtime
     *
     * @return ExecuteDataCorrectResponse
     */
    public function executeDataCorrectWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new ExecuteDataCorrectShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->actionDetail) {
            $request->actionDetailShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->actionDetail, 'ActionDetail', 'json');
        }

        $query = [];
        if (null !== $request->actionDetailShrink) {
            @$query['ActionDetail'] = $request->actionDetailShrink;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ExecuteDataCorrect',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ExecuteDataCorrectResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ExecuteDataCorrectResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Submits a ticket for data change.
     *
     * @param request - ExecuteDataCorrectRequest
     * @returns ExecuteDataCorrectResponse
     *
     * @param ExecuteDataCorrectRequest $request
     *
     * @return ExecuteDataCorrectResponse
     */
    public function executeDataCorrect($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->executeDataCorrectWithOptions($request, $runtime);
    }

    /**
     * Executes a data export ticket.
     *
     * @param tmpReq - ExecuteDataExportRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExecuteDataExportResponse
     *
     * @param ExecuteDataExportRequest $tmpReq
     * @param RuntimeOptions           $runtime
     *
     * @return ExecuteDataExportResponse
     */
    public function executeDataExportWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new ExecuteDataExportShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->actionDetail) {
            $request->actionDetailShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->actionDetail, 'ActionDetail', 'json');
        }

        $query = [];
        if (null !== $request->actionDetailShrink) {
            @$query['ActionDetail'] = $request->actionDetailShrink;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ExecuteDataExport',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ExecuteDataExportResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ExecuteDataExportResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Executes a data export ticket.
     *
     * @param request - ExecuteDataExportRequest
     * @returns ExecuteDataExportResponse
     *
     * @param ExecuteDataExportRequest $request
     *
     * @return ExecuteDataExportResponse
     */
    public function executeDataExport($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->executeDataExportWithOptions($request, $runtime);
    }

    /**
     * Executes SQL statements.
     *
     * @remarks
     * You can call this operation only for instances that are managed in Security Collaboration mode.
     *
     * @param request - ExecuteScriptRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExecuteScriptResponse
     *
     * @param ExecuteScriptRequest $request
     * @param RuntimeOptions       $runtime
     *
     * @return ExecuteScriptResponse
     */
    public function executeScriptWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->script) {
            @$query['Script'] = $request->script;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ExecuteScript',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ExecuteScriptResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ExecuteScriptResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Executes SQL statements.
     *
     * @remarks
     * You can call this operation only for instances that are managed in Security Collaboration mode.
     *
     * @param request - ExecuteScriptRequest
     * @returns ExecuteScriptResponse
     *
     * @param ExecuteScriptRequest $request
     *
     * @return ExecuteScriptResponse
     */
    public function executeScript($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->executeScriptWithOptions($request, $runtime);
    }

    /**
     * Executes a schema synchronization task.
     *
     * @remarks
     * If the security rules of an instance indicate that a ticket must be approved before you perform schema synchronization, you can call the [SubmitStructSyncOrderApproval](https://help.aliyun.com/document_detail/206166.html) operation to submit the ticket for approval.
     * >  You can call the [GetStructSyncJobDetail](https://help.aliyun.com/document_detail/206160.html) operation to query whether you need to submit a ticket for approval.
     *
     * @param request - ExecuteStructSyncRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ExecuteStructSyncResponse
     *
     * @param ExecuteStructSyncRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return ExecuteStructSyncResponse
     */
    public function executeStructSyncWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ExecuteStructSync',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ExecuteStructSyncResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ExecuteStructSyncResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Executes a schema synchronization task.
     *
     * @remarks
     * If the security rules of an instance indicate that a ticket must be approved before you perform schema synchronization, you can call the [SubmitStructSyncOrderApproval](https://help.aliyun.com/document_detail/206166.html) operation to submit the ticket for approval.
     * >  You can call the [GetStructSyncJobDetail](https://help.aliyun.com/document_detail/206160.html) operation to query whether you need to submit a ticket for approval.
     *
     * @param request - ExecuteStructSyncRequest
     * @returns ExecuteStructSyncResponse
     *
     * @param ExecuteStructSyncRequest $request
     *
     * @return ExecuteStructSyncResponse
     */
    public function executeStructSync($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->executeStructSyncWithOptions($request, $runtime);
    }

    /**
     * 获取策略详情.
     *
     * @param request - GetAbacPolicyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAbacPolicyResponse
     *
     * @param GetAbacPolicyRequest $request
     * @param RuntimeOptions       $runtime
     *
     * @return GetAbacPolicyResponse
     */
    public function getAbacPolicyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->abacPolicyId) {
            @$query['AbacPolicyId'] = $request->abacPolicyId;
        }

        if (null !== $request->abacPolicyName) {
            @$query['AbacPolicyName'] = $request->abacPolicyName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetAbacPolicy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetAbacPolicyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetAbacPolicyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取策略详情.
     *
     * @param request - GetAbacPolicyRequest
     * @returns GetAbacPolicyResponse
     *
     * @param GetAbacPolicyRequest $request
     *
     * @return GetAbacPolicyResponse
     */
    public function getAbacPolicy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getAbacPolicyWithOptions($request, $runtime);
    }

    /**
     * Queries the approval details of a ticket.
     *
     * @param request - GetApprovalDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetApprovalDetailResponse
     *
     * @param GetApprovalDetailRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return GetApprovalDetailResponse
     */
    public function getApprovalDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->workflowInstanceId) {
            @$query['WorkflowInstanceId'] = $request->workflowInstanceId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetApprovalDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetApprovalDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetApprovalDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the approval details of a ticket.
     *
     * @param request - GetApprovalDetailRequest
     * @returns GetApprovalDetailResponse
     *
     * @param GetApprovalDetailRequest $request
     *
     * @return GetApprovalDetailResponse
     */
    public function getApprovalDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getApprovalDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the information about a permission template.
     *
     * @remarks
     * You must be a Data Management (DMS) administrator or a database administrator (DBA). For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - GetAuthorityTemplateRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAuthorityTemplateResponse
     *
     * @param GetAuthorityTemplateRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return GetAuthorityTemplateResponse
     */
    public function getAuthorityTemplateWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetAuthorityTemplate',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetAuthorityTemplateResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetAuthorityTemplateResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about a permission template.
     *
     * @remarks
     * You must be a Data Management (DMS) administrator or a database administrator (DBA). For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - GetAuthorityTemplateRequest
     * @returns GetAuthorityTemplateResponse
     *
     * @param GetAuthorityTemplateRequest $request
     *
     * @return GetAuthorityTemplateResponse
     */
    public function getAuthorityTemplate($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getAuthorityTemplateWithOptions($request, $runtime);
    }

    /**
     * Queries the resources in a permission template.
     *
     * @remarks
     * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - GetAuthorityTemplateItemRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetAuthorityTemplateItemResponse
     *
     * @param GetAuthorityTemplateItemRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return GetAuthorityTemplateItemResponse
     */
    public function getAuthorityTemplateItemWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetAuthorityTemplateItem',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetAuthorityTemplateItemResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetAuthorityTemplateItemResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the resources in a permission template.
     *
     * @remarks
     * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - GetAuthorityTemplateItemRequest
     * @returns GetAuthorityTemplateItemResponse
     *
     * @param GetAuthorityTemplateItemRequest $request
     *
     * @return GetAuthorityTemplateItemResponse
     */
    public function getAuthorityTemplateItem($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getAuthorityTemplateItemWithOptions($request, $runtime);
    }

    /**
     * 获取实例绑定的分类分级模板
     *
     * @param request - GetClassificationTemplateRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetClassificationTemplateResponse
     *
     * @param GetClassificationTemplateRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return GetClassificationTemplateResponse
     */
    public function getClassificationTemplateWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetClassificationTemplate',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetClassificationTemplateResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetClassificationTemplateResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取实例绑定的分类分级模板
     *
     * @param request - GetClassificationTemplateRequest
     * @returns GetClassificationTemplateResponse
     *
     * @param GetClassificationTemplateRequest $request
     *
     * @return GetClassificationTemplateResponse
     */
    public function getClassificationTemplate($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getClassificationTemplateWithOptions($request, $runtime);
    }

    /**
     * Queries the log that records the scheduling details of an SQL task.
     *
     * @param request - GetDBTaskSQLJobLogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDBTaskSQLJobLogResponse
     *
     * @param GetDBTaskSQLJobLogRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return GetDBTaskSQLJobLogResponse
     */
    public function getDBTaskSQLJobLogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDBTaskSQLJobLog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDBTaskSQLJobLogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDBTaskSQLJobLogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the log that records the scheduling details of an SQL task.
     *
     * @param request - GetDBTaskSQLJobLogRequest
     * @returns GetDBTaskSQLJobLogResponse
     *
     * @param GetDBTaskSQLJobLogRequest $request
     *
     * @return GetDBTaskSQLJobLogResponse
     */
    public function getDBTaskSQLJobLog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDBTaskSQLJobLogWithOptions($request, $runtime);
    }

    /**
     * Queries the topologies of a logical database and its physical database shards.
     *
     * @param request - GetDBTopologyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDBTopologyResponse
     *
     * @param GetDBTopologyRequest $request
     * @param RuntimeOptions       $runtime
     *
     * @return GetDBTopologyResponse
     */
    public function getDBTopologyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->logicDbId) {
            @$query['LogicDbId'] = $request->logicDbId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDBTopology',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDBTopologyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDBTopologyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the topologies of a logical database and its physical database shards.
     *
     * @param request - GetDBTopologyRequest
     * @returns GetDBTopologyResponse
     *
     * @param GetDBTopologyRequest $request
     *
     * @return GetDBTopologyResponse
     */
    public function getDBTopology($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDBTopologyWithOptions($request, $runtime);
    }

    /**
     * Queries the statistics on the number of data archiving tickets, including the number of tickets of successful data archiving, failed data archiving,and in-progress data archiving, and the total number of data archiving tickets.
     *
     * @param request - GetDataArchiveCountRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataArchiveCountResponse
     *
     * @param GetDataArchiveCountRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return GetDataArchiveCountResponse
     */
    public function getDataArchiveCountWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderResultType) {
            @$query['OrderResultType'] = $request->orderResultType;
        }

        if (null !== $request->pluginType) {
            @$query['PluginType'] = $request->pluginType;
        }

        if (null !== $request->searchDateType) {
            @$query['SearchDateType'] = $request->searchDateType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataArchiveCount',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataArchiveCountResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataArchiveCountResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the statistics on the number of data archiving tickets, including the number of tickets of successful data archiving, failed data archiving,and in-progress data archiving, and the total number of data archiving tickets.
     *
     * @param request - GetDataArchiveCountRequest
     * @returns GetDataArchiveCountResponse
     *
     * @param GetDataArchiveCountRequest $request
     *
     * @return GetDataArchiveCountResponse
     */
    public function getDataArchiveCount($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataArchiveCountWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a data archiving ticket, including the time when the ticket was created, the scheduling information of the data archiving task, the logs of the data archiving task, and the database to which data is archived.
     *
     * @param request - GetDataArchiveOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataArchiveOrderDetailResponse
     *
     * @param GetDataArchiveOrderDetailRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return GetDataArchiveOrderDetailResponse
     */
    public function getDataArchiveOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataArchiveOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataArchiveOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataArchiveOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a data archiving ticket, including the time when the ticket was created, the scheduling information of the data archiving task, the logs of the data archiving task, and the database to which data is archived.
     *
     * @param request - GetDataArchiveOrderDetailRequest
     * @returns GetDataArchiveOrderDetailResponse
     *
     * @param GetDataArchiveOrderDetailRequest $request
     *
     * @return GetDataArchiveOrderDetailResponse
     */
    public function getDataArchiveOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataArchiveOrderDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the download URL of the backup file for a data change ticket in Data Management (DMS).
     *
     * @param tmpReq - GetDataCorrectBackupFilesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataCorrectBackupFilesResponse
     *
     * @param GetDataCorrectBackupFilesRequest $tmpReq
     * @param RuntimeOptions                   $runtime
     *
     * @return GetDataCorrectBackupFilesResponse
     */
    public function getDataCorrectBackupFilesWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new GetDataCorrectBackupFilesShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->actionDetail) {
            $request->actionDetailShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->actionDetail, 'ActionDetail', 'json');
        }

        $query = [];
        if (null !== $request->actionDetailShrink) {
            @$query['ActionDetail'] = $request->actionDetailShrink;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataCorrectBackupFiles',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataCorrectBackupFilesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataCorrectBackupFilesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the download URL of the backup file for a data change ticket in Data Management (DMS).
     *
     * @param request - GetDataCorrectBackupFilesRequest
     * @returns GetDataCorrectBackupFilesResponse
     *
     * @param GetDataCorrectBackupFilesRequest $request
     *
     * @return GetDataCorrectBackupFilesResponse
     */
    public function getDataCorrectBackupFiles($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataCorrectBackupFilesWithOptions($request, $runtime);
    }

    /**
     * Queries the information about a data change ticket in Data Management (DMS).
     *
     * @param request - GetDataCorrectOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataCorrectOrderDetailResponse
     *
     * @param GetDataCorrectOrderDetailRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return GetDataCorrectOrderDetailResponse
     */
    public function getDataCorrectOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataCorrectOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataCorrectOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataCorrectOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about a data change ticket in Data Management (DMS).
     *
     * @param request - GetDataCorrectOrderDetailRequest
     * @returns GetDataCorrectOrderDetailResponse
     *
     * @param GetDataCorrectOrderDetailRequest $request
     *
     * @return GetDataCorrectOrderDetailResponse
     */
    public function getDataCorrectOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataCorrectOrderDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the download URL of the rollback attachment submitted along with a data change ticket.
     *
     * @param request - GetDataCorrectRollbackFileRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataCorrectRollbackFileResponse
     *
     * @param GetDataCorrectRollbackFileRequest $request
     * @param RuntimeOptions                    $runtime
     *
     * @return GetDataCorrectRollbackFileResponse
     */
    public function getDataCorrectRollbackFileWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataCorrectRollbackFile',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataCorrectRollbackFileResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataCorrectRollbackFileResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the download URL of the rollback attachment submitted along with a data change ticket.
     *
     * @param request - GetDataCorrectRollbackFileRequest
     * @returns GetDataCorrectRollbackFileResponse
     *
     * @param GetDataCorrectRollbackFileRequest $request
     *
     * @return GetDataCorrectRollbackFileResponse
     */
    public function getDataCorrectRollbackFile($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataCorrectRollbackFileWithOptions($request, $runtime);
    }

    /**
     * Queries the download URL of the SQL script for a data change task.
     *
     * @remarks
     * This operation applies to [regular data change](https://help.aliyun.com/document_detail/58419.html) and [batch data import](https://help.aliyun.com/document_detail/144643.html).
     *
     * @param request - GetDataCorrectSQLFileRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataCorrectSQLFileResponse
     *
     * @param GetDataCorrectSQLFileRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return GetDataCorrectSQLFileResponse
     */
    public function getDataCorrectSQLFileWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataCorrectSQLFile',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataCorrectSQLFileResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataCorrectSQLFileResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the download URL of the SQL script for a data change task.
     *
     * @remarks
     * This operation applies to [regular data change](https://help.aliyun.com/document_detail/58419.html) and [batch data import](https://help.aliyun.com/document_detail/144643.html).
     *
     * @param request - GetDataCorrectSQLFileRequest
     * @returns GetDataCorrectSQLFileResponse
     *
     * @param GetDataCorrectSQLFileRequest $request
     *
     * @return GetDataCorrectSQLFileResponse
     */
    public function getDataCorrectSQLFile($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataCorrectSQLFileWithOptions($request, $runtime);
    }

    /**
     * Queries the information about a data change, lock-free data change, or data import task.
     *
     * @param request - GetDataCorrectTaskDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataCorrectTaskDetailResponse
     *
     * @param GetDataCorrectTaskDetailRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return GetDataCorrectTaskDetailResponse
     */
    public function getDataCorrectTaskDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataCorrectTaskDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataCorrectTaskDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataCorrectTaskDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about a data change, lock-free data change, or data import task.
     *
     * @param request - GetDataCorrectTaskDetailRequest
     * @returns GetDataCorrectTaskDetailResponse
     *
     * @param GetDataCorrectTaskDetailRequest $request
     *
     * @return GetDataCorrectTaskDetailResponse
     */
    public function getDataCorrectTaskDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataCorrectTaskDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the scheduling configuration of a ticket for cleaning up historical data.
     *
     * @param request - GetDataCronClearConfigRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataCronClearConfigResponse
     *
     * @param GetDataCronClearConfigRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return GetDataCronClearConfigResponse
     */
    public function getDataCronClearConfigWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataCronClearConfig',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataCronClearConfigResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataCronClearConfigResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the scheduling configuration of a ticket for cleaning up historical data.
     *
     * @param request - GetDataCronClearConfigRequest
     * @returns GetDataCronClearConfigResponse
     *
     * @param GetDataCronClearConfigRequest $request
     *
     * @return GetDataCronClearConfigResponse
     */
    public function getDataCronClearConfig($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataCronClearConfigWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a historical data cleansing ticket.
     *
     * @param request - GetDataCronClearTaskDetailListRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataCronClearTaskDetailListResponse
     *
     * @param GetDataCronClearTaskDetailListRequest $request
     * @param RuntimeOptions                        $runtime
     *
     * @return GetDataCronClearTaskDetailListResponse
     */
    public function getDataCronClearTaskDetailListWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataCronClearTaskDetailList',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataCronClearTaskDetailListResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataCronClearTaskDetailListResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a historical data cleansing ticket.
     *
     * @param request - GetDataCronClearTaskDetailListRequest
     * @returns GetDataCronClearTaskDetailListResponse
     *
     * @param GetDataCronClearTaskDetailListRequest $request
     *
     * @return GetDataCronClearTaskDetailListResponse
     */
    public function getDataCronClearTaskDetailList($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataCronClearTaskDetailListWithOptions($request, $runtime);
    }

    /**
     * Queries the download URL of the file that records the export results for a data export ticket in Data Management (DMS).
     *
     * @param request - GetDataExportDownloadURLRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataExportDownloadURLResponse
     *
     * @param GetDataExportDownloadURLRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return GetDataExportDownloadURLResponse
     */
    public function getDataExportDownloadURLWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataExportDownloadURL',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataExportDownloadURLResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataExportDownloadURLResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the download URL of the file that records the export results for a data export ticket in Data Management (DMS).
     *
     * @param request - GetDataExportDownloadURLRequest
     * @returns GetDataExportDownloadURLResponse
     *
     * @param GetDataExportDownloadURLRequest $request
     *
     * @return GetDataExportDownloadURLResponse
     */
    public function getDataExportDownloadURL($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataExportDownloadURLWithOptions($request, $runtime);
    }

    /**
     * Queries the information about a data export ticket.
     *
     * @param request - GetDataExportOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataExportOrderDetailResponse
     *
     * @param GetDataExportOrderDetailRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return GetDataExportOrderDetailResponse
     */
    public function getDataExportOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->orderId) {
            @$body['OrderId'] = $request->orderId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'GetDataExportOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataExportOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataExportOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about a data export ticket.
     *
     * @param request - GetDataExportOrderDetailRequest
     * @returns GetDataExportOrderDetailResponse
     *
     * @param GetDataExportOrderDetailRequest $request
     *
     * @return GetDataExportOrderDetailResponse
     */
    public function getDataExportOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataExportOrderDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the precheck details of an SQL result set export ticket.
     *
     * @param request - GetDataExportPreCheckDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataExportPreCheckDetailResponse
     *
     * @param GetDataExportPreCheckDetailRequest $request
     * @param RuntimeOptions                     $runtime
     *
     * @return GetDataExportPreCheckDetailResponse
     */
    public function getDataExportPreCheckDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataExportPreCheckDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataExportPreCheckDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataExportPreCheckDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the precheck details of an SQL result set export ticket.
     *
     * @param request - GetDataExportPreCheckDetailRequest
     * @returns GetDataExportPreCheckDetailResponse
     *
     * @param GetDataExportPreCheckDetailRequest $request
     *
     * @return GetDataExportPreCheckDetailResponse
     */
    public function getDataExportPreCheckDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataExportPreCheckDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the SQL statements used for data import in a ticket.
     *
     * @remarks
     * You can call this operation only if the data is imported in security mode in your data import ticket.
     *
     * @param request - GetDataImportSQLRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataImportSQLResponse
     *
     * @param GetDataImportSQLRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetDataImportSQLResponse
     */
    public function getDataImportSQLWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->sqlId) {
            @$query['SqlId'] = $request->sqlId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataImportSQL',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataImportSQLResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataImportSQLResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the SQL statements used for data import in a ticket.
     *
     * @remarks
     * You can call this operation only if the data is imported in security mode in your data import ticket.
     *
     * @param request - GetDataImportSQLRequest
     * @returns GetDataImportSQLResponse
     *
     * @param GetDataImportSQLRequest $request
     *
     * @return GetDataImportSQLResponse
     */
    public function getDataImportSQL($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataImportSQLWithOptions($request, $runtime);
    }

    /**
     * 获取uc的数据库目录.
     *
     * @param request - GetDataLakeCatalogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataLakeCatalogResponse
     *
     * @param GetDataLakeCatalogRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return GetDataLakeCatalogResponse
     */
    public function getDataLakeCatalogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataLakeCatalog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataLakeCatalogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataLakeCatalogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取uc的数据库目录.
     *
     * @param request - GetDataLakeCatalogRequest
     * @returns GetDataLakeCatalogResponse
     *
     * @param GetDataLakeCatalogRequest $request
     *
     * @return GetDataLakeCatalogResponse
     */
    public function getDataLakeCatalog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataLakeCatalogWithOptions($request, $runtime);
    }

    /**
     * 获取UC的数据库.
     *
     * @param request - GetDataLakeDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataLakeDatabaseResponse
     *
     * @param GetDataLakeDatabaseRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return GetDataLakeDatabaseResponse
     */
    public function getDataLakeDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->name) {
            @$query['Name'] = $request->name;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataLakeDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataLakeDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataLakeDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取UC的数据库.
     *
     * @param request - GetDataLakeDatabaseRequest
     * @returns GetDataLakeDatabaseResponse
     *
     * @param GetDataLakeDatabaseRequest $request
     *
     * @return GetDataLakeDatabaseResponse
     */
    public function getDataLakeDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataLakeDatabaseWithOptions($request, $runtime);
    }

    /**
     * 获取湖仓表分区详情.
     *
     * @param tmpReq - GetDataLakePartitionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataLakePartitionResponse
     *
     * @param GetDataLakePartitionRequest $tmpReq
     * @param RuntimeOptions              $runtime
     *
     * @return GetDataLakePartitionResponse
     */
    public function getDataLakePartitionWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new GetDataLakePartitionShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->partitionValues) {
            $request->partitionValuesShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->partitionValues, 'PartitionValues', 'simple');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->partitionValuesShrink) {
            @$query['PartitionValues'] = $request->partitionValuesShrink;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataLakePartition',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataLakePartitionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataLakePartitionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取湖仓表分区详情.
     *
     * @param request - GetDataLakePartitionRequest
     * @returns GetDataLakePartitionResponse
     *
     * @param GetDataLakePartitionRequest $request
     *
     * @return GetDataLakePartitionResponse
     */
    public function getDataLakePartition($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataLakePartitionWithOptions($request, $runtime);
    }

    /**
     * 获取表信息.
     *
     * @param request - GetDataLakeTableRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataLakeTableResponse
     *
     * @param GetDataLakeTableRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetDataLakeTableResponse
     */
    public function getDataLakeTableWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->name) {
            @$query['Name'] = $request->name;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataLakeTable',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataLakeTableResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataLakeTableResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取表信息.
     *
     * @param request - GetDataLakeTableRequest
     * @returns GetDataLakeTableResponse
     *
     * @param GetDataLakeTableRequest $request
     *
     * @return GetDataLakeTableResponse
     */
    public function getDataLakeTable($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataLakeTableWithOptions($request, $runtime);
    }

    /**
     * Queries the progress of a data tracking task.
     *
     * @param request - GetDataTrackJobDegreeRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataTrackJobDegreeResponse
     *
     * @param GetDataTrackJobDegreeRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return GetDataTrackJobDegreeResponse
     */
    public function getDataTrackJobDegreeWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataTrackJobDegree',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataTrackJobDegreeResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataTrackJobDegreeResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the progress of a data tracking task.
     *
     * @param request - GetDataTrackJobDegreeRequest
     * @returns GetDataTrackJobDegreeResponse
     *
     * @param GetDataTrackJobDegreeRequest $request
     *
     * @return GetDataTrackJobDegreeResponse
     */
    public function getDataTrackJobDegree($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataTrackJobDegreeWithOptions($request, $runtime);
    }

    /**
     * Queries the metadata of tables involved in a data tracking task.
     *
     * @param request - GetDataTrackJobTableMetaRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataTrackJobTableMetaResponse
     *
     * @param GetDataTrackJobTableMetaRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return GetDataTrackJobTableMetaResponse
     */
    public function getDataTrackJobTableMetaWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataTrackJobTableMeta',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataTrackJobTableMetaResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataTrackJobTableMetaResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the metadata of tables involved in a data tracking task.
     *
     * @param request - GetDataTrackJobTableMetaRequest
     * @returns GetDataTrackJobTableMetaResponse
     *
     * @param GetDataTrackJobTableMetaRequest $request
     *
     * @return GetDataTrackJobTableMetaResponse
     */
    public function getDataTrackJobTableMeta($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataTrackJobTableMetaWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a data tracking ticket.
     *
     * @param request - GetDataTrackOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDataTrackOrderDetailResponse
     *
     * @param GetDataTrackOrderDetailRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return GetDataTrackOrderDetailResponse
     */
    public function getDataTrackOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDataTrackOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDataTrackOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDataTrackOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a data tracking ticket.
     *
     * @param request - GetDataTrackOrderDetailRequest
     * @returns GetDataTrackOrderDetailResponse
     *
     * @param GetDataTrackOrderDetailRequest $request
     *
     * @return GetDataTrackOrderDetailResponse
     */
    public function getDataTrackOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDataTrackOrderDetailWithOptions($request, $runtime);
    }

    /**
     * Queries details of a specific database.
     *
     * @param request - GetDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDatabaseResponse
     *
     * @param GetDatabaseRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return GetDatabaseResponse
     */
    public function getDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->host) {
            @$query['Host'] = $request->host;
        }

        if (null !== $request->port) {
            @$query['Port'] = $request->port;
        }

        if (null !== $request->schemaName) {
            @$query['SchemaName'] = $request->schemaName;
        }

        if (null !== $request->sid) {
            @$query['Sid'] = $request->sid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries details of a specific database.
     *
     * @param request - GetDatabaseRequest
     * @returns GetDatabaseResponse
     *
     * @param GetDatabaseRequest $request
     *
     * @return GetDatabaseResponse
     */
    public function getDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDatabaseWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a database export ticket.
     *
     * @param request - GetDatabaseExportOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDatabaseExportOrderDetailResponse
     *
     * @param GetDatabaseExportOrderDetailRequest $request
     * @param RuntimeOptions                      $runtime
     *
     * @return GetDatabaseExportOrderDetailResponse
     */
    public function getDatabaseExportOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->orderId) {
            @$body['OrderId'] = $request->orderId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'GetDatabaseExportOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDatabaseExportOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDatabaseExportOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a database export ticket.
     *
     * @param request - GetDatabaseExportOrderDetailRequest
     * @returns GetDatabaseExportOrderDetailResponse
     *
     * @param GetDatabaseExportOrderDetailRequest $request
     *
     * @return GetDatabaseExportOrderDetailResponse
     */
    public function getDatabaseExportOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDatabaseExportOrderDetailWithOptions($request, $runtime);
    }

    /**
     * 获取数据库导出下载地址
     *
     * @param request - GetDbExportDownloadURLRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetDbExportDownloadURLResponse
     *
     * @param GetDbExportDownloadURLRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return GetDbExportDownloadURLResponse
     */
    public function getDbExportDownloadURLWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetDbExportDownloadURL',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetDbExportDownloadURLResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetDbExportDownloadURLResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取数据库导出下载地址
     *
     * @param request - GetDbExportDownloadURLRequest
     * @returns GetDbExportDownloadURLResponse
     *
     * @param GetDbExportDownloadURLRequest $request
     *
     * @return GetDbExportDownloadURLResponse
     */
    public function getDbExportDownloadURL($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getDbExportDownloadURLWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a database instance.
     *
     * @param request - GetInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetInstanceResponse
     *
     * @param GetInstanceRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return GetInstanceResponse
     */
    public function getInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->host) {
            @$query['Host'] = $request->host;
        }

        if (null !== $request->port) {
            @$query['Port'] = $request->port;
        }

        if (null !== $request->sid) {
            @$query['Sid'] = $request->sid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a database instance.
     *
     * @param request - GetInstanceRequest
     * @returns GetInstanceResponse
     *
     * @param GetInstanceRequest $request
     *
     * @return GetInstanceResponse
     */
    public function getInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getInstanceWithOptions($request, $runtime);
    }

    /**
     * Queries the minimum scheduling cycle of a task flow when a service level agreement (SLA) timeout rule is configured for the task flow.
     *
     * @remarks
     * The scheduling cycle of a task flow must be greater than the minimum scheduling cycle configured in the SLA rule for the task flow.
     *
     * @param request - GetIntervalLimitOfSLARequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetIntervalLimitOfSLAResponse
     *
     * @param GetIntervalLimitOfSLARequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return GetIntervalLimitOfSLAResponse
     */
    public function getIntervalLimitOfSLAWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetIntervalLimitOfSLA',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetIntervalLimitOfSLAResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetIntervalLimitOfSLAResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the minimum scheduling cycle of a task flow when a service level agreement (SLA) timeout rule is configured for the task flow.
     *
     * @remarks
     * The scheduling cycle of a task flow must be greater than the minimum scheduling cycle configured in the SLA rule for the task flow.
     *
     * @param request - GetIntervalLimitOfSLARequest
     * @returns GetIntervalLimitOfSLAResponse
     *
     * @param GetIntervalLimitOfSLARequest $request
     *
     * @return GetIntervalLimitOfSLAResponse
     */
    public function getIntervalLimitOfSLA($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getIntervalLimitOfSLAWithOptions($request, $runtime);
    }

    /**
     * Queries the information about a workspace based on the workspace name in Data Management (DMS).
     *
     * @remarks
     * You are a DMS administrator or a database administrator (DBA).
     *
     * @param request - GetLhSpaceByNameRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetLhSpaceByNameResponse
     *
     * @param GetLhSpaceByNameRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetLhSpaceByNameResponse
     */
    public function getLhSpaceByNameWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->spaceName) {
            @$query['SpaceName'] = $request->spaceName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetLhSpaceByName',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetLhSpaceByNameResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetLhSpaceByNameResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about a workspace based on the workspace name in Data Management (DMS).
     *
     * @remarks
     * You are a DMS administrator or a database administrator (DBA).
     *
     * @param request - GetLhSpaceByNameRequest
     * @returns GetLhSpaceByNameResponse
     *
     * @param GetLhSpaceByNameRequest $request
     *
     * @return GetLhSpaceByNameResponse
     */
    public function getLhSpaceByName($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getLhSpaceByNameWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a logical database.
     *
     * @param request - GetLogicDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetLogicDatabaseResponse
     *
     * @param GetLogicDatabaseRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetLogicDatabaseResponse
     */
    public function getLogicDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetLogicDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetLogicDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetLogicDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a logical database.
     *
     * @param request - GetLogicDatabaseRequest
     * @returns GetLogicDatabaseResponse
     *
     * @param GetLogicDatabaseRequest $request
     *
     * @return GetLogicDatabaseResponse
     */
    public function getLogicDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getLogicDatabaseWithOptions($request, $runtime);
    }

    /**
     * Queries the details of columns in a table.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - GetMetaTableColumnRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMetaTableColumnResponse
     *
     * @param GetMetaTableColumnRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return GetMetaTableColumnResponse
     */
    public function getMetaTableColumnWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tableGuid) {
            @$query['TableGuid'] = $request->tableGuid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetMetaTableColumn',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetMetaTableColumnResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetMetaTableColumnResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of columns in a table.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - GetMetaTableColumnRequest
     * @returns GetMetaTableColumnResponse
     *
     * @param GetMetaTableColumnRequest $request
     *
     * @return GetMetaTableColumnResponse
     */
    public function getMetaTableColumn($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getMetaTableColumnWithOptions($request, $runtime);
    }

    /**
     * Queries the details of columns and indexes in a table.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - GetMetaTableDetailInfoRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetMetaTableDetailInfoResponse
     *
     * @param GetMetaTableDetailInfoRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return GetMetaTableDetailInfoResponse
     */
    public function getMetaTableDetailInfoWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tableGuid) {
            @$query['TableGuid'] = $request->tableGuid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetMetaTableDetailInfo',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetMetaTableDetailInfoResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetMetaTableDetailInfoResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of columns and indexes in a table.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - GetMetaTableDetailInfoRequest
     * @returns GetMetaTableDetailInfoResponse
     *
     * @param GetMetaTableDetailInfoRequest $request
     *
     * @return GetMetaTableDetailInfoResponse
     */
    public function getMetaTableDetailInfo($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getMetaTableDetailInfoWithOptions($request, $runtime);
    }

    /**
     * Queries the details and progress of an OnlineDDL task.
     *
     * @param request - GetOnlineDDLProgressRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOnlineDDLProgressResponse
     *
     * @param GetOnlineDDLProgressRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return GetOnlineDDLProgressResponse
     */
    public function getOnlineDDLProgressWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobDetailId) {
            @$query['JobDetailId'] = $request->jobDetailId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetOnlineDDLProgress',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetOnlineDDLProgressResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetOnlineDDLProgressResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details and progress of an OnlineDDL task.
     *
     * @param request - GetOnlineDDLProgressRequest
     * @returns GetOnlineDDLProgressResponse
     *
     * @param GetOnlineDDLProgressRequest $request
     *
     * @return GetOnlineDDLProgressResponse
     */
    public function getOnlineDDLProgress($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getOnlineDDLProgressWithOptions($request, $runtime);
    }

    /**
     * Queries the details of operation logs that are generated in a specified period of time.
     *
     * @remarks
     * Prerequisites: You are an administrator of Data Management (DMS) or a security administrator. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain your user role from the RoleIdList parameter that is returned.
     *
     * @param request - GetOpLogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOpLogResponse
     *
     * @param GetOpLogRequest $request
     * @param RuntimeOptions  $runtime
     *
     * @return GetOpLogResponse
     */
    public function getOpLogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->databaseName) {
            @$query['DatabaseName'] = $request->databaseName;
        }

        if (null !== $request->endTime) {
            @$query['EndTime'] = $request->endTime;
        }

        if (null !== $request->module) {
            @$query['Module'] = $request->module;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->startTime) {
            @$query['StartTime'] = $request->startTime;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userNick) {
            @$query['UserNick'] = $request->userNick;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetOpLog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetOpLogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetOpLogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of operation logs that are generated in a specified period of time.
     *
     * @remarks
     * Prerequisites: You are an administrator of Data Management (DMS) or a security administrator. You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to obtain your user role from the RoleIdList parameter that is returned.
     *
     * @param request - GetOpLogRequest
     * @returns GetOpLogResponse
     *
     * @param GetOpLogRequest $request
     *
     * @return GetOpLogResponse
     */
    public function getOpLog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getOpLogWithOptions($request, $runtime);
    }

    /**
     * Queries the download URL of the attachment of a ticket.
     *
     * @param request - GetOrderAttachmentFileRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOrderAttachmentFileResponse
     *
     * @param GetOrderAttachmentFileRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return GetOrderAttachmentFileResponse
     */
    public function getOrderAttachmentFileWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetOrderAttachmentFile',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetOrderAttachmentFileResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetOrderAttachmentFileResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the download URL of the attachment of a ticket.
     *
     * @param request - GetOrderAttachmentFileRequest
     * @returns GetOrderAttachmentFileResponse
     *
     * @param GetOrderAttachmentFileRequest $request
     *
     * @return GetOrderAttachmentFileResponse
     */
    public function getOrderAttachmentFile($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getOrderAttachmentFileWithOptions($request, $runtime);
    }

    /**
     * Queries the basic information about a ticket.
     *
     * @param request - GetOrderBaseInfoRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOrderBaseInfoResponse
     *
     * @param GetOrderBaseInfoRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetOrderBaseInfoResponse
     */
    public function getOrderBaseInfoWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetOrderBaseInfo',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetOrderBaseInfoResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetOrderBaseInfoResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the basic information about a ticket.
     *
     * @param request - GetOrderBaseInfoRequest
     * @returns GetOrderBaseInfoResponse
     *
     * @param GetOrderBaseInfoRequest $request
     *
     * @return GetOrderBaseInfoResponse
     */
    public function getOrderBaseInfo($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getOrderBaseInfoWithOptions($request, $runtime);
    }

    /**
     * Queries the details of the Database-OWNER, Table-OWNER, and Instance-OWNER tickets.
     *
     * @param request - GetOwnerApplyOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetOwnerApplyOrderDetailResponse
     *
     * @param GetOwnerApplyOrderDetailRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return GetOwnerApplyOrderDetailResponse
     */
    public function getOwnerApplyOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetOwnerApplyOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetOwnerApplyOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetOwnerApplyOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of the Database-OWNER, Table-OWNER, and Instance-OWNER tickets.
     *
     * @param request - GetOwnerApplyOrderDetailRequest
     * @returns GetOwnerApplyOrderDetailResponse
     *
     * @param GetOwnerApplyOrderDetailRequest $request
     *
     * @return GetOwnerApplyOrderDetailResponse
     */
    public function getOwnerApplyOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getOwnerApplyOrderDetailWithOptions($request, $runtime);
    }

    /**
     * 获取数据归档工单任务实例.
     *
     * @param request - GetPagedInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPagedInstanceResponse
     *
     * @param GetPagedInstanceRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetPagedInstanceResponse
     */
    public function getPagedInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = Utils::query($request->toMap());
        $req   = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetPagedInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'GET',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetPagedInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetPagedInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取数据归档工单任务实例.
     *
     * @param request - GetPagedInstanceRequest
     * @returns GetPagedInstanceResponse
     *
     * @param GetPagedInstanceRequest $request
     *
     * @return GetPagedInstanceResponse
     */
    public function getPagedInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getPagedInstanceWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a ticket that applies for permissions.
     *
     * @remarks
     * You can call this operation to query the information about tickets that apply for permissions on databases, tables, and sensitive columns.
     *
     * @param request - GetPermApplyOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPermApplyOrderDetailResponse
     *
     * @param GetPermApplyOrderDetailRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return GetPermApplyOrderDetailResponse
     */
    public function getPermApplyOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetPermApplyOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetPermApplyOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetPermApplyOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a ticket that applies for permissions.
     *
     * @remarks
     * You can call this operation to query the information about tickets that apply for permissions on databases, tables, and sensitive columns.
     *
     * @param request - GetPermApplyOrderDetailRequest
     * @returns GetPermApplyOrderDetailResponse
     *
     * @param GetPermApplyOrderDetailRequest $request
     *
     * @return GetPermApplyOrderDetailResponse
     */
    public function getPermApplyOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getPermApplyOrderDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a physical database.
     *
     * @param request - GetPhysicalDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetPhysicalDatabaseResponse
     *
     * @param GetPhysicalDatabaseRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return GetPhysicalDatabaseResponse
     */
    public function getPhysicalDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetPhysicalDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetPhysicalDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetPhysicalDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a physical database.
     *
     * @param request - GetPhysicalDatabaseRequest
     * @returns GetPhysicalDatabaseResponse
     *
     * @param GetPhysicalDatabaseRequest $request
     *
     * @return GetPhysicalDatabaseResponse
     */
    public function getPhysicalDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getPhysicalDatabaseWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a secure access proxy.
     *
     * @param request - GetProxyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetProxyResponse
     *
     * @param GetProxyRequest $request
     * @param RuntimeOptions  $runtime
     *
     * @return GetProxyResponse
     */
    public function getProxyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->proxyId) {
            @$query['ProxyId'] = $request->proxyId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetProxy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetProxyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetProxyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a secure access proxy.
     *
     * @param request - GetProxyRequest
     * @returns GetProxyResponse
     *
     * @param GetProxyRequest $request
     *
     * @return GetProxyResponse
     */
    public function getProxy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getProxyWithOptions($request, $runtime);
    }

    /**
     * Queries the authorization information about the secure access proxy feature.
     *
     * @param request - GetProxyAccessRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetProxyAccessResponse
     *
     * @param GetProxyAccessRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return GetProxyAccessResponse
     */
    public function getProxyAccessWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->proxyAccessId) {
            @$query['ProxyAccessId'] = $request->proxyAccessId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetProxyAccess',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetProxyAccessResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetProxyAccessResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the authorization information about the secure access proxy feature.
     *
     * @param request - GetProxyAccessRequest
     * @returns GetProxyAccessResponse
     *
     * @param GetProxyAccessRequest $request
     *
     * @return GetProxyAccessResponse
     */
    public function getProxyAccess($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getProxyAccessWithOptions($request, $runtime);
    }

    /**
     * Queries the maximum number of custom service-level agreement (SLA) rules for task orchestration.
     *
     * @param request - GetRuleNumLimitOfSLARequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetRuleNumLimitOfSLAResponse
     *
     * @param GetRuleNumLimitOfSLARequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return GetRuleNumLimitOfSLAResponse
     */
    public function getRuleNumLimitOfSLAWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetRuleNumLimitOfSLA',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetRuleNumLimitOfSLAResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetRuleNumLimitOfSLAResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the maximum number of custom service-level agreement (SLA) rules for task orchestration.
     *
     * @param request - GetRuleNumLimitOfSLARequest
     * @returns GetRuleNumLimitOfSLAResponse
     *
     * @param GetRuleNumLimitOfSLARequest $request
     *
     * @return GetRuleNumLimitOfSLAResponse
     */
    public function getRuleNumLimitOfSLA($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getRuleNumLimitOfSLAWithOptions($request, $runtime);
    }

    /**
     * Queries the result of an SQL review.
     *
     * @remarks
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param request - GetSQLReviewCheckResultStatusRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSQLReviewCheckResultStatusResponse
     *
     * @param GetSQLReviewCheckResultStatusRequest $request
     * @param RuntimeOptions                       $runtime
     *
     * @return GetSQLReviewCheckResultStatusResponse
     */
    public function getSQLReviewCheckResultStatusWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetSQLReviewCheckResultStatus',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetSQLReviewCheckResultStatusResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetSQLReviewCheckResultStatusResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the result of an SQL review.
     *
     * @remarks
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param request - GetSQLReviewCheckResultStatusRequest
     * @returns GetSQLReviewCheckResultStatusResponse
     *
     * @param GetSQLReviewCheckResultStatusRequest $request
     *
     * @return GetSQLReviewCheckResultStatusResponse
     */
    public function getSQLReviewCheckResultStatus($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getSQLReviewCheckResultStatusWithOptions($request, $runtime);
    }

    /**
     * Queries the details of optimization suggestions. The operation applies only to the tickets for the data changes and SQL review.
     *
     * @remarks
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param request - GetSQLReviewOptimizeDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetSQLReviewOptimizeDetailResponse
     *
     * @param GetSQLReviewOptimizeDetailRequest $request
     * @param RuntimeOptions                    $runtime
     *
     * @return GetSQLReviewOptimizeDetailResponse
     */
    public function getSQLReviewOptimizeDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->SQLReviewQueryKey) {
            @$query['SQLReviewQueryKey'] = $request->SQLReviewQueryKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetSQLReviewOptimizeDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetSQLReviewOptimizeDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetSQLReviewOptimizeDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of optimization suggestions. The operation applies only to the tickets for the data changes and SQL review.
     *
     * @remarks
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param request - GetSQLReviewOptimizeDetailRequest
     * @returns GetSQLReviewOptimizeDetailResponse
     *
     * @param GetSQLReviewOptimizeDetailRequest $request
     *
     * @return GetSQLReviewOptimizeDetailResponse
     */
    public function getSQLReviewOptimizeDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getSQLReviewOptimizeDetailWithOptions($request, $runtime);
    }

    /**
     * 获取安全规则.
     *
     * @param request - GetStandardGroupRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetStandardGroupResponse
     *
     * @param GetStandardGroupRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetStandardGroupResponse
     */
    public function getStandardGroupWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->groupId) {
            @$query['GroupId'] = $request->groupId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetStandardGroup',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetStandardGroupResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetStandardGroupResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取安全规则.
     *
     * @param request - GetStandardGroupRequest
     * @returns GetStandardGroupResponse
     *
     * @param GetStandardGroupRequest $request
     *
     * @return GetStandardGroupResponse
     */
    public function getStandardGroup($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getStandardGroupWithOptions($request, $runtime);
    }

    /**
     * Queries the SQL statements that are involved in a schema synchronization ticket.
     *
     * @param request - GetStructSyncExecSqlDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetStructSyncExecSqlDetailResponse
     *
     * @param GetStructSyncExecSqlDetailRequest $request
     * @param RuntimeOptions                    $runtime
     *
     * @return GetStructSyncExecSqlDetailResponse
     */
    public function getStructSyncExecSqlDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetStructSyncExecSqlDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetStructSyncExecSqlDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetStructSyncExecSqlDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the SQL statements that are involved in a schema synchronization ticket.
     *
     * @param request - GetStructSyncExecSqlDetailRequest
     * @returns GetStructSyncExecSqlDetailResponse
     *
     * @param GetStructSyncExecSqlDetailRequest $request
     *
     * @return GetStructSyncExecSqlDetailResponse
     */
    public function getStructSyncExecSqlDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getStructSyncExecSqlDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the analysis result of a schema synchronization task.
     *
     * @param request - GetStructSyncJobAnalyzeResultRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetStructSyncJobAnalyzeResultResponse
     *
     * @param GetStructSyncJobAnalyzeResultRequest $request
     * @param RuntimeOptions                       $runtime
     *
     * @return GetStructSyncJobAnalyzeResultResponse
     */
    public function getStructSyncJobAnalyzeResultWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->compareType) {
            @$query['CompareType'] = $request->compareType;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetStructSyncJobAnalyzeResult',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetStructSyncJobAnalyzeResultResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetStructSyncJobAnalyzeResultResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the analysis result of a schema synchronization task.
     *
     * @param request - GetStructSyncJobAnalyzeResultRequest
     * @returns GetStructSyncJobAnalyzeResultResponse
     *
     * @param GetStructSyncJobAnalyzeResultRequest $request
     *
     * @return GetStructSyncJobAnalyzeResultResponse
     */
    public function getStructSyncJobAnalyzeResult($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getStructSyncJobAnalyzeResultWithOptions($request, $runtime);
    }

    /**
     * Queries the information of a schema synchronization task.
     *
     * @param request - GetStructSyncJobDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetStructSyncJobDetailResponse
     *
     * @param GetStructSyncJobDetailRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return GetStructSyncJobDetailResponse
     */
    public function getStructSyncJobDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetStructSyncJobDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetStructSyncJobDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetStructSyncJobDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information of a schema synchronization task.
     *
     * @param request - GetStructSyncJobDetailRequest
     * @returns GetStructSyncJobDetailResponse
     *
     * @param GetStructSyncJobDetailRequest $request
     *
     * @return GetStructSyncJobDetailResponse
     */
    public function getStructSyncJobDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getStructSyncJobDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a schema synchronization ticket.
     *
     * @param request - GetStructSyncOrderDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetStructSyncOrderDetailResponse
     *
     * @param GetStructSyncOrderDetailRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return GetStructSyncOrderDetailResponse
     */
    public function getStructSyncOrderDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetStructSyncOrderDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetStructSyncOrderDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetStructSyncOrderDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a schema synchronization ticket.
     *
     * @param request - GetStructSyncOrderDetailRequest
     * @returns GetStructSyncOrderDetailResponse
     *
     * @param GetStructSyncOrderDetailRequest $request
     *
     * @return GetStructSyncOrderDetailResponse
     */
    public function getStructSyncOrderDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getStructSyncOrderDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the topology of a data table.
     *
     * @param request - GetTableDBTopologyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTableDBTopologyResponse
     *
     * @param GetTableDBTopologyRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return GetTableDBTopologyResponse
     */
    public function getTableDBTopologyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tableGuid) {
            @$query['TableGuid'] = $request->tableGuid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTableDBTopology',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTableDBTopologyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTableDBTopologyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the topology of a data table.
     *
     * @param request - GetTableDBTopologyRequest
     * @returns GetTableDBTopologyResponse
     *
     * @param GetTableDBTopologyRequest $request
     *
     * @return GetTableDBTopologyResponse
     */
    public function getTableDBTopology($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTableDBTopologyWithOptions($request, $runtime);
    }

    /**
     * Queries the information about a schema design ticket, such as the current node of the ticket, whether the ticket can be returned to the schema design node, and the publishing strategy.
     *
     * @param request - GetTableDesignProjectFlowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTableDesignProjectFlowResponse
     *
     * @param GetTableDesignProjectFlowRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return GetTableDesignProjectFlowResponse
     */
    public function getTableDesignProjectFlowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTableDesignProjectFlow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTableDesignProjectFlowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTableDesignProjectFlowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about a schema design ticket, such as the current node of the ticket, whether the ticket can be returned to the schema design node, and the publishing strategy.
     *
     * @param request - GetTableDesignProjectFlowRequest
     * @returns GetTableDesignProjectFlowResponse
     *
     * @param GetTableDesignProjectFlowRequest $request
     *
     * @return GetTableDesignProjectFlowResponse
     */
    public function getTableDesignProjectFlow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTableDesignProjectFlowWithOptions($request, $runtime);
    }

    /**
     * Queries the information about the project and change base database of a schema design ticket, such as the state of the ticket, the ID of the user who created the ticket, and the name and ID of the change base database.
     *
     * @param request - GetTableDesignProjectInfoRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTableDesignProjectInfoResponse
     *
     * @param GetTableDesignProjectInfoRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return GetTableDesignProjectInfoResponse
     */
    public function getTableDesignProjectInfoWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTableDesignProjectInfo',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTableDesignProjectInfoResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTableDesignProjectInfoResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about the project and change base database of a schema design ticket, such as the state of the ticket, the ID of the user who created the ticket, and the name and ID of the change base database.
     *
     * @param request - GetTableDesignProjectInfoRequest
     * @returns GetTableDesignProjectInfoResponse
     *
     * @param GetTableDesignProjectInfoRequest $request
     *
     * @return GetTableDesignProjectInfoResponse
     */
    public function getTableDesignProjectInfo($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTableDesignProjectInfoWithOptions($request, $runtime);
    }

    /**
     * Queries the topology of a table.
     *
     * @param request - GetTableTopologyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTableTopologyResponse
     *
     * @param GetTableTopologyRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetTableTopologyResponse
     */
    public function getTableTopologyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tableGuid) {
            @$query['TableGuid'] = $request->tableGuid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTableTopology',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTableTopologyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTableTopologyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the topology of a table.
     *
     * @param request - GetTableTopologyRequest
     * @returns GetTableTopologyResponse
     *
     * @param GetTableTopologyRequest $request
     *
     * @return GetTableTopologyResponse
     */
    public function getTableTopology($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTableTopologyWithOptions($request, $runtime);
    }

    /**
     * Queries the configurations, including time variables, of a specified task node based on the task node ID.
     *
     * @param request - GetTaskRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskResponse
     *
     * @param GetTaskRequest $request
     * @param RuntimeOptions $runtime
     *
     * @return GetTaskResponse
     */
    public function getTaskWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->nodeId) {
            @$query['NodeId'] = $request->nodeId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTask',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTaskResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTaskResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the configurations, including time variables, of a specified task node based on the task node ID.
     *
     * @param request - GetTaskRequest
     * @returns GetTaskResponse
     *
     * @param GetTaskRequest $request
     *
     * @return GetTaskResponse
     */
    public function getTask($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTaskWithOptions($request, $runtime);
    }

    /**
     * Queries the Directed Acyclic Graph (DAG) of a task flow.
     *
     * @param request - GetTaskFlowGraphRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskFlowGraphResponse
     *
     * @param GetTaskFlowGraphRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return GetTaskFlowGraphResponse
     */
    public function getTaskFlowGraphWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTaskFlowGraph',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTaskFlowGraphResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTaskFlowGraphResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the Directed Acyclic Graph (DAG) of a task flow.
     *
     * @param request - GetTaskFlowGraphRequest
     * @returns GetTaskFlowGraphResponse
     *
     * @param GetTaskFlowGraphRequest $request
     *
     * @return GetTaskFlowGraphResponse
     */
    public function getTaskFlowGraph($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTaskFlowGraphWithOptions($request, $runtime);
    }

    /**
     * Queries the notification settings for task flows.
     *
     * @param request - GetTaskFlowNotificationRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskFlowNotificationResponse
     *
     * @param GetTaskFlowNotificationRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return GetTaskFlowNotificationResponse
     */
    public function getTaskFlowNotificationWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTaskFlowNotification',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTaskFlowNotificationResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTaskFlowNotificationResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the notification settings for task flows.
     *
     * @param request - GetTaskFlowNotificationRequest
     * @returns GetTaskFlowNotificationResponse
     *
     * @param GetTaskFlowNotificationRequest $request
     *
     * @return GetTaskFlowNotificationResponse
     */
    public function getTaskFlowNotification($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTaskFlowNotificationWithOptions($request, $runtime);
    }

    /**
     * Queries the information about the nodes in an execution record of a task flow.
     *
     * @param request - GetTaskInstanceRelationRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetTaskInstanceRelationResponse
     *
     * @param GetTaskInstanceRelationRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return GetTaskInstanceRelationResponse
     */
    public function getTaskInstanceRelationWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagInstanceId) {
            @$query['DagInstanceId'] = $request->dagInstanceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetTaskInstanceRelation',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetTaskInstanceRelationResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetTaskInstanceRelationResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about the nodes in an execution record of a task flow.
     *
     * @param request - GetTaskInstanceRelationRequest
     * @returns GetTaskInstanceRelationResponse
     *
     * @param GetTaskInstanceRelationRequest $request
     *
     * @return GetTaskInstanceRelationResponse
     */
    public function getTaskInstanceRelation($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getTaskInstanceRelationWithOptions($request, $runtime);
    }

    /**
     * Queries the information about a user.
     *
     * @param request - GetUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserResponse
     *
     * @param GetUserRequest $request
     * @param RuntimeOptions $runtime
     *
     * @return GetUserResponse
     */
    public function getUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uid) {
            @$query['Uid'] = $request->uid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about a user.
     *
     * @param request - GetUserRequest
     * @returns GetUserResponse
     *
     * @param GetUserRequest $request
     *
     * @return GetUserResponse
     */
    public function getUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getUserWithOptions($request, $runtime);
    }

    /**
     * Queries details of the active tenant.
     *
     * @param request - GetUserActiveTenantRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserActiveTenantResponse
     *
     * @param GetUserActiveTenantRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return GetUserActiveTenantResponse
     */
    public function getUserActiveTenantWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetUserActiveTenant',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetUserActiveTenantResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetUserActiveTenantResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries details of the active tenant.
     *
     * @param request - GetUserActiveTenantRequest
     * @returns GetUserActiveTenantResponse
     *
     * @param GetUserActiveTenantRequest $request
     *
     * @return GetUserActiveTenantResponse
     */
    public function getUserActiveTenant($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getUserActiveTenantWithOptions($request, $runtime);
    }

    /**
     * Obtains the information of a file upload task.
     *
     * @param request - GetUserUploadFileJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GetUserUploadFileJobResponse
     *
     * @param GetUserUploadFileJobRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return GetUserUploadFileJobResponse
     */
    public function getUserUploadFileJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobKey) {
            @$query['JobKey'] = $request->jobKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GetUserUploadFileJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GetUserUploadFileJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GetUserUploadFileJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Obtains the information of a file upload task.
     *
     * @param request - GetUserUploadFileJobRequest
     * @returns GetUserUploadFileJobResponse
     *
     * @param GetUserUploadFileJobRequest $request
     *
     * @return GetUserUploadFileJobResponse
     */
    public function getUserUploadFileJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->getUserUploadFileJobWithOptions($request, $runtime);
    }

    /**
     * Grants permissions on resources to users by using a permission template.
     *
     * @remarks
     * You must be a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - GrantTemplateAuthorityRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GrantTemplateAuthorityResponse
     *
     * @param GrantTemplateAuthorityRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return GrantTemplateAuthorityResponse
     */
    public function grantTemplateAuthorityWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->comment) {
            @$query['Comment'] = $request->comment;
        }

        if (null !== $request->expireDate) {
            @$query['ExpireDate'] = $request->expireDate;
        }

        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userIds) {
            @$query['UserIds'] = $request->userIds;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GrantTemplateAuthority',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GrantTemplateAuthorityResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GrantTemplateAuthorityResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Grants permissions on resources to users by using a permission template.
     *
     * @remarks
     * You must be a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - GrantTemplateAuthorityRequest
     * @returns GrantTemplateAuthorityResponse
     *
     * @param GrantTemplateAuthorityRequest $request
     *
     * @return GrantTemplateAuthorityResponse
     */
    public function grantTemplateAuthority($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->grantTemplateAuthorityWithOptions($request, $runtime);
    }

    /**
     * Grants permissions on an instance, a database, or a table to a user.
     *
     * @param request - GrantUserPermissionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns GrantUserPermissionResponse
     *
     * @param GrantUserPermissionRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return GrantUserPermissionResponse
     */
    public function grantUserPermissionWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->dsType) {
            @$query['DsType'] = $request->dsType;
        }

        if (null !== $request->expireDate) {
            @$query['ExpireDate'] = $request->expireDate;
        }

        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->permTypes) {
            @$query['PermTypes'] = $request->permTypes;
        }

        if (null !== $request->tableId) {
            @$query['TableId'] = $request->tableId;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'GrantUserPermission',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return GrantUserPermissionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return GrantUserPermissionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Grants permissions on an instance, a database, or a table to a user.
     *
     * @param request - GrantUserPermissionRequest
     * @returns GrantUserPermissionResponse
     *
     * @param GrantUserPermissionRequest $request
     *
     * @return GrantUserPermissionResponse
     */
    public function grantUserPermission($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->grantUserPermissionWithOptions($request, $runtime);
    }

    /**
     * You can call this operation to obtain the authorization password of the security protection agent InspectProxyAccessSecret.
     *
     * @param request - InspectProxyAccessSecretRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns InspectProxyAccessSecretResponse
     *
     * @param InspectProxyAccessSecretRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return InspectProxyAccessSecretResponse
     */
    public function inspectProxyAccessSecretWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->proxyAccessId) {
            @$query['ProxyAccessId'] = $request->proxyAccessId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'InspectProxyAccessSecret',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return InspectProxyAccessSecretResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return InspectProxyAccessSecretResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * You can call this operation to obtain the authorization password of the security protection agent InspectProxyAccessSecret.
     *
     * @param request - InspectProxyAccessSecretRequest
     * @returns InspectProxyAccessSecretResponse
     *
     * @param InspectProxyAccessSecretRequest $request
     *
     * @return InspectProxyAccessSecretResponse
     */
    public function inspectProxyAccessSecret($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->inspectProxyAccessSecretWithOptions($request, $runtime);
    }

    /**
     * 获取权限策略授权列表.
     *
     * @param request - ListAbacAuthorizationsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAbacAuthorizationsResponse
     *
     * @param ListAbacAuthorizationsRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return ListAbacAuthorizationsResponse
     */
    public function listAbacAuthorizationsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->policyId) {
            @$query['PolicyId'] = $request->policyId;
        }

        if (null !== $request->policySource) {
            @$query['PolicySource'] = $request->policySource;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListAbacAuthorizations',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListAbacAuthorizationsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListAbacAuthorizationsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取权限策略授权列表.
     *
     * @param request - ListAbacAuthorizationsRequest
     * @returns ListAbacAuthorizationsResponse
     *
     * @param ListAbacAuthorizationsRequest $request
     *
     * @return ListAbacAuthorizationsResponse
     */
    public function listAbacAuthorizations($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listAbacAuthorizationsWithOptions($request, $runtime);
    }

    /**
     * 获取权限策略列表.
     *
     * @param request - ListAbacPoliciesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAbacPoliciesResponse
     *
     * @param ListAbacPoliciesRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return ListAbacPoliciesResponse
     */
    public function listAbacPoliciesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListAbacPolicies',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListAbacPoliciesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListAbacPoliciesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取权限策略列表.
     *
     * @param request - ListAbacPoliciesRequest
     * @returns ListAbacPoliciesResponse
     *
     * @param ListAbacPoliciesRequest $request
     *
     * @return ListAbacPoliciesResponse
     */
    public function listAbacPolicies($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listAbacPoliciesWithOptions($request, $runtime);
    }

    /**
     * 获取权限模版列表.
     *
     * @param request - ListAuthorityTemplateRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAuthorityTemplateResponse
     *
     * @param ListAuthorityTemplateRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return ListAuthorityTemplateResponse
     */
    public function listAuthorityTemplateWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListAuthorityTemplate',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListAuthorityTemplateResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListAuthorityTemplateResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取权限模版列表.
     *
     * @param request - ListAuthorityTemplateRequest
     * @returns ListAuthorityTemplateResponse
     *
     * @param ListAuthorityTemplateRequest $request
     *
     * @return ListAuthorityTemplateResponse
     */
    public function listAuthorityTemplate($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listAuthorityTemplateWithOptions($request, $runtime);
    }

    /**
     * 获取用户有权限的数据库.
     *
     * @param request - ListAuthorizedDatabasesForUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAuthorizedDatabasesForUserResponse
     *
     * @param ListAuthorizedDatabasesForUserRequest $request
     * @param RuntimeOptions                        $runtime
     *
     * @return ListAuthorizedDatabasesForUserResponse
     */
    public function listAuthorizedDatabasesForUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbType) {
            @$query['DbType'] = $request->dbType;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListAuthorizedDatabasesForUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListAuthorizedDatabasesForUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListAuthorizedDatabasesForUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取用户有权限的数据库.
     *
     * @param request - ListAuthorizedDatabasesForUserRequest
     * @returns ListAuthorizedDatabasesForUserResponse
     *
     * @param ListAuthorizedDatabasesForUserRequest $request
     *
     * @return ListAuthorizedDatabasesForUserResponse
     */
    public function listAuthorizedDatabasesForUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listAuthorizedDatabasesForUserWithOptions($request, $runtime);
    }

    /**
     * 获取用户有权限的实例.
     *
     * @param request - ListAuthorizedInstancesForUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAuthorizedInstancesForUserResponse
     *
     * @param ListAuthorizedInstancesForUserRequest $request
     * @param RuntimeOptions                        $runtime
     *
     * @return ListAuthorizedInstancesForUserResponse
     */
    public function listAuthorizedInstancesForUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbType) {
            @$query['DbType'] = $request->dbType;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListAuthorizedInstancesForUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListAuthorizedInstancesForUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListAuthorizedInstancesForUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取用户有权限的实例.
     *
     * @param request - ListAuthorizedInstancesForUserRequest
     * @returns ListAuthorizedInstancesForUserResponse
     *
     * @param ListAuthorizedInstancesForUserRequest $request
     *
     * @return ListAuthorizedInstancesForUserResponse
     */
    public function listAuthorizedInstancesForUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listAuthorizedInstancesForUserWithOptions($request, $runtime);
    }

    /**
     * 查询有数据库权限的用户.
     *
     * @param request - ListAuthorizedUsersForDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAuthorizedUsersForDatabaseResponse
     *
     * @param ListAuthorizedUsersForDatabaseRequest $request
     * @param RuntimeOptions                        $runtime
     *
     * @return ListAuthorizedUsersForDatabaseResponse
     */
    public function listAuthorizedUsersForDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListAuthorizedUsersForDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListAuthorizedUsersForDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListAuthorizedUsersForDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 查询有数据库权限的用户.
     *
     * @param request - ListAuthorizedUsersForDatabaseRequest
     * @returns ListAuthorizedUsersForDatabaseResponse
     *
     * @param ListAuthorizedUsersForDatabaseRequest $request
     *
     * @return ListAuthorizedUsersForDatabaseResponse
     */
    public function listAuthorizedUsersForDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listAuthorizedUsersForDatabaseWithOptions($request, $runtime);
    }

    /**
     * 查询有实例权限的用户.
     *
     * @param request - ListAuthorizedUsersForInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListAuthorizedUsersForInstanceResponse
     *
     * @param ListAuthorizedUsersForInstanceRequest $request
     * @param RuntimeOptions                        $runtime
     *
     * @return ListAuthorizedUsersForInstanceResponse
     */
    public function listAuthorizedUsersForInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListAuthorizedUsersForInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListAuthorizedUsersForInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListAuthorizedUsersForInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 查询有实例权限的用户.
     *
     * @param request - ListAuthorizedUsersForInstanceRequest
     * @returns ListAuthorizedUsersForInstanceResponse
     *
     * @param ListAuthorizedUsersForInstanceRequest $request
     *
     * @return ListAuthorizedUsersForInstanceResponse
     */
    public function listAuthorizedUsersForInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listAuthorizedUsersForInstanceWithOptions($request, $runtime);
    }

    /**
     * Queries the classification templates.
     *
     * @param request - ListClassificationTemplatesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListClassificationTemplatesResponse
     *
     * @param ListClassificationTemplatesRequest $request
     * @param RuntimeOptions                     $runtime
     *
     * @return ListClassificationTemplatesResponse
     */
    public function listClassificationTemplatesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListClassificationTemplates',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListClassificationTemplatesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListClassificationTemplatesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the classification templates.
     *
     * @param request - ListClassificationTemplatesRequest
     * @returns ListClassificationTemplatesResponse
     *
     * @param ListClassificationTemplatesRequest $request
     *
     * @return ListClassificationTemplatesResponse
     */
    public function listClassificationTemplates($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listClassificationTemplatesWithOptions($request, $runtime);
    }

    /**
     * Returns the column information of a table.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - ListColumnsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListColumnsResponse
     *
     * @param ListColumnsRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return ListColumnsResponse
     */
    public function listColumnsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->tableId) {
            @$query['TableId'] = $request->tableId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListColumns',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListColumnsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListColumnsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Returns the column information of a table.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - ListColumnsRequest
     * @returns ListColumnsResponse
     *
     * @param ListColumnsRequest $request
     *
     * @return ListColumnsResponse
     */
    public function listColumns($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listColumnsWithOptions($request, $runtime);
    }

    /**
     * Queries the published versions of a task flow.
     *
     * @param request - ListDAGVersionsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDAGVersionsResponse
     *
     * @param ListDAGVersionsRequest $request
     * @param RuntimeOptions         $runtime
     *
     * @return ListDAGVersionsResponse
     */
    public function listDAGVersionsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->pageIndex) {
            @$query['PageIndex'] = $request->pageIndex;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDAGVersions',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDAGVersionsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDAGVersionsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the published versions of a task flow.
     *
     * @param request - ListDAGVersionsRequest
     * @returns ListDAGVersionsResponse
     *
     * @param ListDAGVersionsRequest $request
     *
     * @return ListDAGVersionsResponse
     */
    public function listDAGVersions($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDAGVersionsWithOptions($request, $runtime);
    }

    /**
     * Queries a list of SQL tasks.
     *
     * @param request - ListDBTaskSQLJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDBTaskSQLJobResponse
     *
     * @param ListDBTaskSQLJobRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return ListDBTaskSQLJobResponse
     */
    public function listDBTaskSQLJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->DBTaskGroupId) {
            @$query['DBTaskGroupId'] = $request->DBTaskGroupId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDBTaskSQLJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDBTaskSQLJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDBTaskSQLJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries a list of SQL tasks.
     *
     * @param request - ListDBTaskSQLJobRequest
     * @returns ListDBTaskSQLJobResponse
     *
     * @param ListDBTaskSQLJobRequest $request
     *
     * @return ListDBTaskSQLJobResponse
     */
    public function listDBTaskSQLJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDBTaskSQLJobWithOptions($request, $runtime);
    }

    /**
     * Queries the details of an SQL task.
     *
     * @param request - ListDBTaskSQLJobDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDBTaskSQLJobDetailResponse
     *
     * @param ListDBTaskSQLJobDetailRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return ListDBTaskSQLJobDetailResponse
     */
    public function listDBTaskSQLJobDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDBTaskSQLJobDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDBTaskSQLJobDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDBTaskSQLJobDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of an SQL task.
     *
     * @param request - ListDBTaskSQLJobDetailRequest
     * @returns ListDBTaskSQLJobDetailResponse
     *
     * @param ListDBTaskSQLJobDetailRequest $request
     *
     * @return ListDBTaskSQLJobDetailResponse
     */
    public function listDBTaskSQLJobDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDBTaskSQLJobDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the publishing details of a schema design ticket.
     *
     * @param request - ListDDLPublishRecordsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDDLPublishRecordsResponse
     *
     * @param ListDDLPublishRecordsRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return ListDDLPublishRecordsResponse
     */
    public function listDDLPublishRecordsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDDLPublishRecords',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDDLPublishRecordsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDDLPublishRecordsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the publishing details of a schema design ticket.
     *
     * @param request - ListDDLPublishRecordsRequest
     * @returns ListDDLPublishRecordsResponse
     *
     * @param ListDDLPublishRecordsRequest $request
     *
     * @return ListDDLPublishRecordsResponse
     */
    public function listDDLPublishRecords($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDDLPublishRecordsWithOptions($request, $runtime);
    }

    /**
     * Queries the databases that are involved in the precheck of a data change ticket.
     *
     * @remarks
     * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
     *
     * @param request - ListDataCorrectPreCheckDBRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataCorrectPreCheckDBResponse
     *
     * @param ListDataCorrectPreCheckDBRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListDataCorrectPreCheckDBResponse
     */
    public function listDataCorrectPreCheckDBWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataCorrectPreCheckDB',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataCorrectPreCheckDBResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataCorrectPreCheckDBResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the databases that are involved in the precheck of a data change ticket.
     *
     * @remarks
     * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
     *
     * @param request - ListDataCorrectPreCheckDBRequest
     * @returns ListDataCorrectPreCheckDBResponse
     *
     * @param ListDataCorrectPreCheckDBRequest $request
     *
     * @return ListDataCorrectPreCheckDBResponse
     */
    public function listDataCorrectPreCheckDB($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataCorrectPreCheckDBWithOptions($request, $runtime);
    }

    /**
     * Queries the precheck information about an SQL statement that is specified in a data change ticket.
     *
     * @remarks
     * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
     *
     * @param request - ListDataCorrectPreCheckSQLRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataCorrectPreCheckSQLResponse
     *
     * @param ListDataCorrectPreCheckSQLRequest $request
     * @param RuntimeOptions                    $runtime
     *
     * @return ListDataCorrectPreCheckSQLResponse
     */
    public function listDataCorrectPreCheckSQLWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataCorrectPreCheckSQL',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataCorrectPreCheckSQLResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataCorrectPreCheckSQLResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the precheck information about an SQL statement that is specified in a data change ticket.
     *
     * @remarks
     * For more information about the Normal Data Modify feature, see [Change regular data](https://help.aliyun.com/document_detail/58419.html).
     *
     * @param request - ListDataCorrectPreCheckSQLRequest
     * @returns ListDataCorrectPreCheckSQLResponse
     *
     * @param ListDataCorrectPreCheckSQLRequest $request
     *
     * @return ListDataCorrectPreCheckSQLResponse
     */
    public function listDataCorrectPreCheckSQL($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataCorrectPreCheckSQLWithOptions($request, $runtime);
    }

    /**
     * Queries the precheck information of SQL statements used for data import in a ticket.
     *
     * @remarks
     * You can call this operation only if the data is imported in security mode in your data import ticket.
     *
     * @param request - ListDataImportSQLPreCheckDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataImportSQLPreCheckDetailResponse
     *
     * @param ListDataImportSQLPreCheckDetailRequest $request
     * @param RuntimeOptions                         $runtime
     *
     * @return ListDataImportSQLPreCheckDetailResponse
     */
    public function listDataImportSQLPreCheckDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->pageNumer) {
            @$query['PageNumer'] = $request->pageNumer;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->sqlType) {
            @$query['SqlType'] = $request->sqlType;
        }

        if (null !== $request->statusCode) {
            @$query['StatusCode'] = $request->statusCode;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataImportSQLPreCheckDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataImportSQLPreCheckDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataImportSQLPreCheckDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the precheck information of SQL statements used for data import in a ticket.
     *
     * @remarks
     * You can call this operation only if the data is imported in security mode in your data import ticket.
     *
     * @param request - ListDataImportSQLPreCheckDetailRequest
     * @returns ListDataImportSQLPreCheckDetailResponse
     *
     * @param ListDataImportSQLPreCheckDetailRequest $request
     *
     * @return ListDataImportSQLPreCheckDetailResponse
     */
    public function listDataImportSQLPreCheckDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataImportSQLPreCheckDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the types of SQL statements used for data import in a ticket.
     *
     * @remarks
     * You can call this operation only if the data is imported in security mode in your data import ticket.
     *
     * @param request - ListDataImportSQLTypeRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataImportSQLTypeResponse
     *
     * @param ListDataImportSQLTypeRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return ListDataImportSQLTypeResponse
     */
    public function listDataImportSQLTypeWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataImportSQLType',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataImportSQLTypeResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataImportSQLTypeResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the types of SQL statements used for data import in a ticket.
     *
     * @remarks
     * You can call this operation only if the data is imported in security mode in your data import ticket.
     *
     * @param request - ListDataImportSQLTypeRequest
     * @returns ListDataImportSQLTypeResponse
     *
     * @param ListDataImportSQLTypeRequest $request
     *
     * @return ListDataImportSQLTypeResponse
     */
    public function listDataImportSQLType($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataImportSQLTypeWithOptions($request, $runtime);
    }

    /**
     * 获取uc的数据库目录列表.
     *
     * @param request - ListDataLakeCatalogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakeCatalogResponse
     *
     * @param ListDataLakeCatalogRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return ListDataLakeCatalogResponse
     */
    public function listDataLakeCatalogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakeCatalog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakeCatalogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakeCatalogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取uc的数据库目录列表.
     *
     * @param request - ListDataLakeCatalogRequest
     * @returns ListDataLakeCatalogResponse
     *
     * @param ListDataLakeCatalogRequest $request
     *
     * @return ListDataLakeCatalogResponse
     */
    public function listDataLakeCatalog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakeCatalogWithOptions($request, $runtime);
    }

    /**
     * 获取数据库列表.
     *
     * @param request - ListDataLakeDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakeDatabaseResponse
     *
     * @param ListDataLakeDatabaseRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return ListDataLakeDatabaseResponse
     */
    public function listDataLakeDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->maxResults) {
            @$query['MaxResults'] = $request->maxResults;
        }

        if (null !== $request->nextToken) {
            @$query['NextToken'] = $request->nextToken;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakeDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakeDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakeDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取数据库列表.
     *
     * @param request - ListDataLakeDatabaseRequest
     * @returns ListDataLakeDatabaseResponse
     *
     * @param ListDataLakeDatabaseRequest $request
     *
     * @return ListDataLakeDatabaseResponse
     */
    public function listDataLakeDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakeDatabaseWithOptions($request, $runtime);
    }

    /**
     * 获取数据湖表分区列表.
     *
     * @param tmpReq - ListDataLakePartitionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakePartitionResponse
     *
     * @param ListDataLakePartitionRequest $tmpReq
     * @param RuntimeOptions               $runtime
     *
     * @return ListDataLakePartitionResponse
     */
    public function listDataLakePartitionWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new ListDataLakePartitionShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->partNames) {
            $request->partNamesShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->partNames, 'PartNames', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->maxResults) {
            @$query['MaxResults'] = $request->maxResults;
        }

        if (null !== $request->nextToken) {
            @$query['NextToken'] = $request->nextToken;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->partNamesShrink) {
            @$body['PartNames'] = $request->partNamesShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakePartition',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakePartitionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakePartitionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取数据湖表分区列表.
     *
     * @param request - ListDataLakePartitionRequest
     * @returns ListDataLakePartitionResponse
     *
     * @param ListDataLakePartitionRequest $request
     *
     * @return ListDataLakePartitionResponse
     */
    public function listDataLakePartition($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakePartitionWithOptions($request, $runtime);
    }

    /**
     * 根据筛选条件获取数据湖表分区列表.
     *
     * @param request - ListDataLakePartitionByFilterRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakePartitionByFilterResponse
     *
     * @param ListDataLakePartitionByFilterRequest $request
     * @param RuntimeOptions                       $runtime
     *
     * @return ListDataLakePartitionByFilterResponse
     */
    public function listDataLakePartitionByFilterWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->maxResults) {
            @$query['MaxResults'] = $request->maxResults;
        }

        if (null !== $request->nextToken) {
            @$query['NextToken'] = $request->nextToken;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->filter) {
            @$body['Filter'] = $request->filter;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakePartitionByFilter',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakePartitionByFilterResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakePartitionByFilterResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 根据筛选条件获取数据湖表分区列表.
     *
     * @param request - ListDataLakePartitionByFilterRequest
     * @returns ListDataLakePartitionByFilterResponse
     *
     * @param ListDataLakePartitionByFilterRequest $request
     *
     * @return ListDataLakePartitionByFilterResponse
     */
    public function listDataLakePartitionByFilter($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakePartitionByFilterWithOptions($request, $runtime);
    }

    /**
     * 获取数据湖表分区名列表.
     *
     * @param request - ListDataLakePartitionNameRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakePartitionNameResponse
     *
     * @param ListDataLakePartitionNameRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListDataLakePartitionNameResponse
     */
    public function listDataLakePartitionNameWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->maxResults) {
            @$query['MaxResults'] = $request->maxResults;
        }

        if (null !== $request->nextToken) {
            @$query['NextToken'] = $request->nextToken;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakePartitionName',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakePartitionNameResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakePartitionNameResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取数据湖表分区名列表.
     *
     * @param request - ListDataLakePartitionNameRequest
     * @returns ListDataLakePartitionNameResponse
     *
     * @param ListDataLakePartitionNameRequest $request
     *
     * @return ListDataLakePartitionNameResponse
     */
    public function listDataLakePartitionName($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakePartitionNameWithOptions($request, $runtime);
    }

    /**
     * 获取数据湖表列表.
     *
     * @param request - ListDataLakeTableRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakeTableResponse
     *
     * @param ListDataLakeTableRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return ListDataLakeTableResponse
     */
    public function listDataLakeTableWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->maxResults) {
            @$query['MaxResults'] = $request->maxResults;
        }

        if (null !== $request->nextToken) {
            @$query['NextToken'] = $request->nextToken;
        }

        if (null !== $request->tableNamePattern) {
            @$query['TableNamePattern'] = $request->tableNamePattern;
        }

        if (null !== $request->tableType) {
            @$query['TableType'] = $request->tableType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakeTable',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakeTableResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakeTableResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取数据湖表列表.
     *
     * @param request - ListDataLakeTableRequest
     * @returns ListDataLakeTableResponse
     *
     * @param ListDataLakeTableRequest $request
     *
     * @return ListDataLakeTableResponse
     */
    public function listDataLakeTable($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakeTableWithOptions($request, $runtime);
    }

    /**
     * 获取数据湖表名列表.
     *
     * @param request - ListDataLakeTableNameRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakeTableNameResponse
     *
     * @param ListDataLakeTableNameRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return ListDataLakeTableNameResponse
     */
    public function listDataLakeTableNameWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->maxResults) {
            @$query['MaxResults'] = $request->maxResults;
        }

        if (null !== $request->nextToken) {
            @$query['NextToken'] = $request->nextToken;
        }

        if (null !== $request->tableNamePattern) {
            @$query['TableNamePattern'] = $request->tableNamePattern;
        }

        if (null !== $request->tableType) {
            @$query['TableType'] = $request->tableType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakeTableName',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakeTableNameResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakeTableNameResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取数据湖表名列表.
     *
     * @param request - ListDataLakeTableNameRequest
     * @returns ListDataLakeTableNameResponse
     *
     * @param ListDataLakeTableNameRequest $request
     *
     * @return ListDataLakeTableNameResponse
     */
    public function listDataLakeTableName($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakeTableNameWithOptions($request, $runtime);
    }

    /**
     * 获取表信息.
     *
     * @param request - ListDataLakeTablebaseInfoRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDataLakeTablebaseInfoResponse
     *
     * @param ListDataLakeTablebaseInfoRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListDataLakeTablebaseInfoResponse
     */
    public function listDataLakeTablebaseInfoWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->page) {
            @$query['Page'] = $request->page;
        }

        if (null !== $request->rows) {
            @$query['Rows'] = $request->rows;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDataLakeTablebaseInfo',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDataLakeTablebaseInfoResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDataLakeTablebaseInfoResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取表信息.
     *
     * @param request - ListDataLakeTablebaseInfoRequest
     * @returns ListDataLakeTablebaseInfoResponse
     *
     * @param ListDataLakeTablebaseInfoRequest $request
     *
     * @return ListDataLakeTablebaseInfoResponse
     */
    public function listDataLakeTablebaseInfo($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDataLakeTablebaseInfoWithOptions($request, $runtime);
    }

    /**
     * Queries the permissions of users on a database.
     *
     * @param request - ListDatabaseUserPermssionsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDatabaseUserPermssionsResponse
     *
     * @param ListDatabaseUserPermssionsRequest $request
     * @param RuntimeOptions                    $runtime
     *
     * @return ListDatabaseUserPermssionsResponse
     */
    public function listDatabaseUserPermssionsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->permType) {
            @$query['PermType'] = $request->permType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userName) {
            @$query['UserName'] = $request->userName;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDatabaseUserPermssions',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDatabaseUserPermssionsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDatabaseUserPermssionsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the permissions of users on a database.
     *
     * @param request - ListDatabaseUserPermssionsRequest
     * @returns ListDatabaseUserPermssionsResponse
     *
     * @param ListDatabaseUserPermssionsRequest $request
     *
     * @return ListDatabaseUserPermssionsResponse
     */
    public function listDatabaseUserPermssions($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDatabaseUserPermssionsWithOptions($request, $runtime);
    }

    /**
     * Queries the databases in a database instance.
     *
     * @param request - ListDatabasesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDatabasesResponse
     *
     * @param ListDatabasesRequest $request
     * @param RuntimeOptions       $runtime
     *
     * @return ListDatabasesResponse
     */
    public function listDatabasesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDatabases',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDatabasesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDatabasesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the databases in a database instance.
     *
     * @param request - ListDatabasesRequest
     * @returns ListDatabasesResponse
     *
     * @param ListDatabasesRequest $request
     *
     * @return ListDatabasesResponse
     */
    public function listDatabases($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDatabasesWithOptions($request, $runtime);
    }

    /**
     * Queries the default service level agreement (SLA) timeout rules.
     *
     * @param request - ListDefaultSLARulesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDefaultSLARulesResponse
     *
     * @param ListDefaultSLARulesRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return ListDefaultSLARulesResponse
     */
    public function listDefaultSLARulesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDefaultSLARules',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDefaultSLARulesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDefaultSLARulesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the default service level agreement (SLA) timeout rules.
     *
     * @param request - ListDefaultSLARulesRequest
     * @returns ListDefaultSLARulesResponse
     *
     * @param ListDefaultSLARulesRequest $request
     *
     * @return ListDefaultSLARulesResponse
     */
    public function listDefaultSLARules($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDefaultSLARulesWithOptions($request, $runtime);
    }

    /**
     * Queries masking rules.
     *
     * @param request - ListDesensitizationRuleRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListDesensitizationRuleResponse
     *
     * @param ListDesensitizationRuleRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return ListDesensitizationRuleResponse
     */
    public function listDesensitizationRuleWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->funcType) {
            @$query['FuncType'] = $request->funcType;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->ruleId) {
            @$query['RuleId'] = $request->ruleId;
        }

        if (null !== $request->ruleName) {
            @$query['RuleName'] = $request->ruleName;
        }

        if (null !== $request->ruleType) {
            @$query['RuleType'] = $request->ruleType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListDesensitizationRule',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListDesensitizationRuleResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListDesensitizationRuleResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries masking rules.
     *
     * @param request - ListDesensitizationRuleRequest
     * @returns ListDesensitizationRuleResponse
     *
     * @param ListDesensitizationRuleRequest $request
     *
     * @return ListDesensitizationRuleResponse
     */
    public function listDesensitizationRule($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listDesensitizationRuleWithOptions($request, $runtime);
    }

    /**
     * Queries valid orders.
     *
     * @param request - ListEffectiveOrdersRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListEffectiveOrdersResponse
     *
     * @param ListEffectiveOrdersRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return ListEffectiveOrdersResponse
     */
    public function listEffectiveOrdersWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListEffectiveOrders',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListEffectiveOrdersResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListEffectiveOrdersResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries valid orders.
     *
     * @param request - ListEffectiveOrdersRequest
     * @returns ListEffectiveOrdersResponse
     *
     * @param ListEffectiveOrdersRequest $request
     *
     * @return ListEffectiveOrdersResponse
     */
    public function listEffectiveOrders($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listEffectiveOrdersWithOptions($request, $runtime);
    }

    /**
     * Queries the indexes of a table.
     *
     * @param request - ListIndexesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListIndexesResponse
     *
     * @param ListIndexesRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return ListIndexesResponse
     */
    public function listIndexesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->tableId) {
            @$query['TableId'] = $request->tableId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListIndexes',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListIndexesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListIndexesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the indexes of a table.
     *
     * @param request - ListIndexesRequest
     * @returns ListIndexesResponse
     *
     * @param ListIndexesRequest $request
     *
     * @return ListIndexesResponse
     */
    public function listIndexes($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listIndexesWithOptions($request, $runtime);
    }

    /**
     * Queries the logon records of an instance.
     *
     * @param request - ListInstanceLoginAuditLogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListInstanceLoginAuditLogResponse
     *
     * @param ListInstanceLoginAuditLogRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListInstanceLoginAuditLogResponse
     */
    public function listInstanceLoginAuditLogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->endTime) {
            @$query['EndTime'] = $request->endTime;
        }

        if (null !== $request->opUserName) {
            @$query['OpUserName'] = $request->opUserName;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchName) {
            @$query['SearchName'] = $request->searchName;
        }

        if (null !== $request->startTime) {
            @$query['StartTime'] = $request->startTime;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListInstanceLoginAuditLog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListInstanceLoginAuditLogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListInstanceLoginAuditLogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the logon records of an instance.
     *
     * @param request - ListInstanceLoginAuditLogRequest
     * @returns ListInstanceLoginAuditLogResponse
     *
     * @param ListInstanceLoginAuditLogRequest $request
     *
     * @return ListInstanceLoginAuditLogResponse
     */
    public function listInstanceLoginAuditLog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listInstanceLoginAuditLogWithOptions($request, $runtime);
    }

    /**
     * Queries the permissions of a user on a specific instance.
     *
     * @param request - ListInstanceUserPermissionsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListInstanceUserPermissionsResponse
     *
     * @param ListInstanceUserPermissionsRequest $request
     * @param RuntimeOptions                     $runtime
     *
     * @return ListInstanceUserPermissionsResponse
     */
    public function listInstanceUserPermissionsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userName) {
            @$query['UserName'] = $request->userName;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListInstanceUserPermissions',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListInstanceUserPermissionsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListInstanceUserPermissionsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the permissions of a user on a specific instance.
     *
     * @param request - ListInstanceUserPermissionsRequest
     * @returns ListInstanceUserPermissionsResponse
     *
     * @param ListInstanceUserPermissionsRequest $request
     *
     * @return ListInstanceUserPermissionsResponse
     */
    public function listInstanceUserPermissions($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listInstanceUserPermissionsWithOptions($request, $runtime);
    }

    /**
     * Queries the information about database instances.
     *
     * @param request - ListInstancesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListInstancesResponse
     *
     * @param ListInstancesRequest $request
     * @param RuntimeOptions       $runtime
     *
     * @return ListInstancesResponse
     */
    public function listInstancesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbType) {
            @$query['DbType'] = $request->dbType;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->instanceSource) {
            @$query['InstanceSource'] = $request->instanceSource;
        }

        if (null !== $request->instanceState) {
            @$query['InstanceState'] = $request->instanceState;
        }

        if (null !== $request->netType) {
            @$query['NetType'] = $request->netType;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListInstances',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListInstancesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListInstancesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the information about database instances.
     *
     * @param request - ListInstancesRequest
     * @returns ListInstancesResponse
     *
     * @param ListInstancesRequest $request
     *
     * @return ListInstancesResponse
     */
    public function listInstances($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listInstancesWithOptions($request, $runtime);
    }

    /**
     * Queries the task flows corresponding to a specific business scenario in a workspace in Data Management (DMS).
     *
     * @remarks
     *   Before you call this operation, make sure that you have the access permissions on the workspace. If you do not have the access permissions on the workspace, you can contact a DMS administrator, database administrator (DBA), or workspace administrator to add you as a member of the workspace. The [AddLhMembers](https://help.aliyun.com/document_detail/424759.html) operation can be called to add a workspace member.
     * *   If you are a DMS administrator or a workspace administrator, you can query the business scenarios and task flows related to a user in a workspace based on the user ID.
     *
     * @param request - ListLhTaskFlowAndScenarioRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListLhTaskFlowAndScenarioResponse
     *
     * @param ListLhTaskFlowAndScenarioRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListLhTaskFlowAndScenarioResponse
     */
    public function listLhTaskFlowAndScenarioWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->spaceId) {
            @$query['SpaceId'] = $request->spaceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListLhTaskFlowAndScenario',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListLhTaskFlowAndScenarioResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListLhTaskFlowAndScenarioResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the task flows corresponding to a specific business scenario in a workspace in Data Management (DMS).
     *
     * @remarks
     *   Before you call this operation, make sure that you have the access permissions on the workspace. If you do not have the access permissions on the workspace, you can contact a DMS administrator, database administrator (DBA), or workspace administrator to add you as a member of the workspace. The [AddLhMembers](https://help.aliyun.com/document_detail/424759.html) operation can be called to add a workspace member.
     * *   If you are a DMS administrator or a workspace administrator, you can query the business scenarios and task flows related to a user in a workspace based on the user ID.
     *
     * @param request - ListLhTaskFlowAndScenarioRequest
     * @returns ListLhTaskFlowAndScenarioResponse
     *
     * @param ListLhTaskFlowAndScenarioRequest $request
     *
     * @return ListLhTaskFlowAndScenarioResponse
     */
    public function listLhTaskFlowAndScenario($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listLhTaskFlowAndScenarioWithOptions($request, $runtime);
    }

    /**
     * Queries the details of logical databases.
     *
     * @param request - ListLogicDatabasesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListLogicDatabasesResponse
     *
     * @param ListLogicDatabasesRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return ListLogicDatabasesResponse
     */
    public function listLogicDatabasesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListLogicDatabases',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListLogicDatabasesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListLogicDatabasesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of logical databases.
     *
     * @param request - ListLogicDatabasesRequest
     * @returns ListLogicDatabasesResponse
     *
     * @param ListLogicDatabasesRequest $request
     *
     * @return ListLogicDatabasesResponse
     */
    public function listLogicDatabases($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listLogicDatabasesWithOptions($request, $runtime);
    }

    /**
     * Queries the routing algorithms of a logical table.
     *
     * @param request - ListLogicTableRouteConfigRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListLogicTableRouteConfigResponse
     *
     * @param ListLogicTableRouteConfigRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListLogicTableRouteConfigResponse
     */
    public function listLogicTableRouteConfigWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tableId) {
            @$query['TableId'] = $request->tableId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListLogicTableRouteConfig',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListLogicTableRouteConfigResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListLogicTableRouteConfigResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the routing algorithms of a logical table.
     *
     * @param request - ListLogicTableRouteConfigRequest
     * @returns ListLogicTableRouteConfigResponse
     *
     * @param ListLogicTableRouteConfigRequest $request
     *
     * @return ListLogicTableRouteConfigResponse
     */
    public function listLogicTableRouteConfig($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listLogicTableRouteConfigWithOptions($request, $runtime);
    }

    /**
     * Queries the details of the logical tables in a logical database.
     *
     * @param request - ListLogicTablesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListLogicTablesResponse
     *
     * @param ListLogicTablesRequest $request
     * @param RuntimeOptions         $runtime
     *
     * @return ListLogicTablesResponse
     */
    public function listLogicTablesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->databaseId) {
            @$query['DatabaseId'] = $request->databaseId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->returnGuid) {
            @$query['ReturnGuid'] = $request->returnGuid;
        }

        if (null !== $request->searchName) {
            @$query['SearchName'] = $request->searchName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListLogicTables',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListLogicTablesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListLogicTablesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of the logical tables in a logical database.
     *
     * @param request - ListLogicTablesRequest
     * @returns ListLogicTablesResponse
     *
     * @param ListLogicTablesRequest $request
     *
     * @return ListLogicTablesResponse
     */
    public function listLogicTables($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listLogicTablesWithOptions($request, $runtime);
    }

    /**
     * Queries tickets in Data Management (DMS).
     *
     * @param request - ListOrdersRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListOrdersResponse
     *
     * @param ListOrdersRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return ListOrdersResponse
     */
    public function listOrdersWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->endTime) {
            @$query['EndTime'] = $request->endTime;
        }

        if (null !== $request->orderResultType) {
            @$query['OrderResultType'] = $request->orderResultType;
        }

        if (null !== $request->orderStatus) {
            @$query['OrderStatus'] = $request->orderStatus;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->pluginType) {
            @$query['PluginType'] = $request->pluginType;
        }

        if (null !== $request->searchContent) {
            @$query['SearchContent'] = $request->searchContent;
        }

        if (null !== $request->searchDateType) {
            @$query['SearchDateType'] = $request->searchDateType;
        }

        if (null !== $request->startTime) {
            @$query['StartTime'] = $request->startTime;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListOrders',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListOrdersResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListOrdersResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries tickets in Data Management (DMS).
     *
     * @param request - ListOrdersRequest
     * @returns ListOrdersResponse
     *
     * @param ListOrdersRequest $request
     *
     * @return ListOrdersResponse
     */
    public function listOrders($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listOrdersWithOptions($request, $runtime);
    }

    /**
     * Queries the proxies that are generated by the secure access proxy feature.
     *
     * @param request - ListProxiesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListProxiesResponse
     *
     * @param ListProxiesRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return ListProxiesResponse
     */
    public function listProxiesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListProxies',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListProxiesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListProxiesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the proxies that are generated by the secure access proxy feature.
     *
     * @param request - ListProxiesRequest
     * @returns ListProxiesResponse
     *
     * @param ListProxiesRequest $request
     *
     * @return ListProxiesResponse
     */
    public function listProxies($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listProxiesWithOptions($request, $runtime);
    }

    /**
     * Queries information about users that are authorized to access a database instance by using the secure access proxy feature.
     *
     * @param request - ListProxyAccessesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListProxyAccessesResponse
     *
     * @param ListProxyAccessesRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return ListProxyAccessesResponse
     */
    public function listProxyAccessesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->proxyId) {
            @$query['ProxyId'] = $request->proxyId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListProxyAccesses',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListProxyAccessesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListProxyAccessesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries information about users that are authorized to access a database instance by using the secure access proxy feature.
     *
     * @param request - ListProxyAccessesRequest
     * @returns ListProxyAccessesResponse
     *
     * @param ListProxyAccessesRequest $request
     *
     * @return ListProxyAccessesResponse
     */
    public function listProxyAccesses($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listProxyAccessesWithOptions($request, $runtime);
    }

    /**
     * 操作审计-数据安全代理SQL执行列表.
     *
     * @param request - ListProxySQLExecAuditLogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListProxySQLExecAuditLogResponse
     *
     * @param ListProxySQLExecAuditLogRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return ListProxySQLExecAuditLogResponse
     */
    public function listProxySQLExecAuditLogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->endTime) {
            @$query['EndTime'] = $request->endTime;
        }

        if (null !== $request->execState) {
            @$query['ExecState'] = $request->execState;
        }

        if (null !== $request->opUserName) {
            @$query['OpUserName'] = $request->opUserName;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->SQLType) {
            @$query['SQLType'] = $request->SQLType;
        }

        if (null !== $request->searchName) {
            @$query['SearchName'] = $request->searchName;
        }

        if (null !== $request->startTime) {
            @$query['StartTime'] = $request->startTime;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListProxySQLExecAuditLog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListProxySQLExecAuditLogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListProxySQLExecAuditLogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 操作审计-数据安全代理SQL执行列表.
     *
     * @param request - ListProxySQLExecAuditLogRequest
     * @returns ListProxySQLExecAuditLogResponse
     *
     * @param ListProxySQLExecAuditLogRequest $request
     *
     * @return ListProxySQLExecAuditLogResponse
     */
    public function listProxySQLExecAuditLog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listProxySQLExecAuditLogWithOptions($request, $runtime);
    }

    /**
     * Queries the custom service level agreement (SLA) rules.
     *
     * @param request - ListSLARulesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSLARulesResponse
     *
     * @param ListSLARulesRequest $request
     * @param RuntimeOptions      $runtime
     *
     * @return ListSLARulesResponse
     */
    public function listSLARulesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSLARules',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSLARulesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSLARulesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the custom service level agreement (SLA) rules.
     *
     * @param request - ListSLARulesRequest
     * @returns ListSLARulesResponse
     *
     * @param ListSLARulesRequest $request
     *
     * @return ListSLARulesResponse
     */
    public function listSLARules($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSLARulesWithOptions($request, $runtime);
    }

    /**
     * Queries SQL statements that were written on the SQLConsole tab.
     *
     * @param request - ListSQLExecAuditLogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSQLExecAuditLogResponse
     *
     * @param ListSQLExecAuditLogRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return ListSQLExecAuditLogResponse
     */
    public function listSQLExecAuditLogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->endTime) {
            @$query['EndTime'] = $request->endTime;
        }

        if (null !== $request->execState) {
            @$query['ExecState'] = $request->execState;
        }

        if (null !== $request->opUserName) {
            @$query['OpUserName'] = $request->opUserName;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchName) {
            @$query['SearchName'] = $request->searchName;
        }

        if (null !== $request->sqlType) {
            @$query['SqlType'] = $request->sqlType;
        }

        if (null !== $request->startTime) {
            @$query['StartTime'] = $request->startTime;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSQLExecAuditLog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSQLExecAuditLogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSQLExecAuditLogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries SQL statements that were written on the SQLConsole tab.
     *
     * @param request - ListSQLExecAuditLogRequest
     * @returns ListSQLExecAuditLogResponse
     *
     * @param ListSQLExecAuditLogRequest $request
     *
     * @return ListSQLExecAuditLogResponse
     */
    public function listSQLExecAuditLog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSQLExecAuditLogWithOptions($request, $runtime);
    }

    /**
     * Queries the details of the SQL statements that are involved in an SQL review ticket.
     *
     * @remarks
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param tmpReq - ListSQLReviewOriginSQLRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSQLReviewOriginSQLResponse
     *
     * @param ListSQLReviewOriginSQLRequest $tmpReq
     * @param RuntimeOptions                $runtime
     *
     * @return ListSQLReviewOriginSQLResponse
     */
    public function listSQLReviewOriginSQLWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new ListSQLReviewOriginSQLShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->orderActionDetail) {
            $request->orderActionDetailShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->orderActionDetail, 'OrderActionDetail', 'json');
        }

        $query = [];
        if (null !== $request->orderActionDetailShrink) {
            @$query['OrderActionDetail'] = $request->orderActionDetailShrink;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSQLReviewOriginSQL',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSQLReviewOriginSQLResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSQLReviewOriginSQLResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of the SQL statements that are involved in an SQL review ticket.
     *
     * @remarks
     * For more information about the SQL review feature, see [SQL review](https://help.aliyun.com/document_detail/60374.html).
     *
     * @param request - ListSQLReviewOriginSQLRequest
     * @returns ListSQLReviewOriginSQLResponse
     *
     * @param ListSQLReviewOriginSQLRequest $request
     *
     * @return ListSQLReviewOriginSQLResponse
     */
    public function listSQLReviewOriginSQL($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSQLReviewOriginSQLWithOptions($request, $runtime);
    }

    /**
     * Queries business scenarios.
     *
     * @param request - ListScenariosRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListScenariosResponse
     *
     * @param ListScenariosRequest $request
     * @param RuntimeOptions       $runtime
     *
     * @return ListScenariosResponse
     */
    public function listScenariosWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListScenarios',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListScenariosResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListScenariosResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries business scenarios.
     *
     * @param request - ListScenariosRequest
     * @returns ListScenariosResponse
     *
     * @param ListScenariosRequest $request
     *
     * @return ListScenariosResponse
     */
    public function listScenarios($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listScenariosWithOptions($request, $runtime);
    }

    /**
     * 获取敏感字段信息.
     *
     * @param request - ListSensitiveColumnInfoRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSensitiveColumnInfoResponse
     *
     * @param ListSensitiveColumnInfoRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return ListSensitiveColumnInfoResponse
     */
    public function listSensitiveColumnInfoWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->columnName) {
            @$query['ColumnName'] = $request->columnName;
        }

        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->schemaName) {
            @$query['SchemaName'] = $request->schemaName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSensitiveColumnInfo',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSensitiveColumnInfoResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSensitiveColumnInfoResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取敏感字段信息.
     *
     * @param request - ListSensitiveColumnInfoRequest
     * @returns ListSensitiveColumnInfoResponse
     *
     * @param ListSensitiveColumnInfoRequest $request
     *
     * @return ListSensitiveColumnInfoResponse
     */
    public function listSensitiveColumnInfo($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSensitiveColumnInfoWithOptions($request, $runtime);
    }

    /**
     * Queries sensitive fields in a table of a database.
     *
     * @param request - ListSensitiveColumnsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSensitiveColumnsResponse
     *
     * @param ListSensitiveColumnsRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return ListSensitiveColumnsResponse
     */
    public function listSensitiveColumnsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->columnName) {
            @$query['ColumnName'] = $request->columnName;
        }

        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->schemaName) {
            @$query['SchemaName'] = $request->schemaName;
        }

        if (null !== $request->securityLevel) {
            @$query['SecurityLevel'] = $request->securityLevel;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSensitiveColumns',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSensitiveColumnsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSensitiveColumnsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries sensitive fields in a table of a database.
     *
     * @param request - ListSensitiveColumnsRequest
     * @returns ListSensitiveColumnsResponse
     *
     * @param ListSensitiveColumnsRequest $request
     *
     * @return ListSensitiveColumnsResponse
     */
    public function listSensitiveColumns($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSensitiveColumnsWithOptions($request, $runtime);
    }

    /**
     * Queries the details of a sensitive field.
     *
     * @param request - ListSensitiveColumnsDetailRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSensitiveColumnsDetailResponse
     *
     * @param ListSensitiveColumnsDetailRequest $request
     * @param RuntimeOptions                    $runtime
     *
     * @return ListSensitiveColumnsDetailResponse
     */
    public function listSensitiveColumnsDetailWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->columnName) {
            @$query['ColumnName'] = $request->columnName;
        }

        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->schemaName) {
            @$query['SchemaName'] = $request->schemaName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSensitiveColumnsDetail',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSensitiveColumnsDetailResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSensitiveColumnsDetailResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of a sensitive field.
     *
     * @param request - ListSensitiveColumnsDetailRequest
     * @returns ListSensitiveColumnsDetailResponse
     *
     * @param ListSensitiveColumnsDetailRequest $request
     *
     * @return ListSensitiveColumnsDetailResponse
     */
    public function listSensitiveColumnsDetail($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSensitiveColumnsDetailWithOptions($request, $runtime);
    }

    /**
     * Queries the audit logs for sensitive information.
     *
     * @param request - ListSensitiveDataAuditLogRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSensitiveDataAuditLogResponse
     *
     * @param ListSensitiveDataAuditLogRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListSensitiveDataAuditLogResponse
     */
    public function listSensitiveDataAuditLogWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->columnName) {
            @$query['ColumnName'] = $request->columnName;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->endTime) {
            @$query['EndTime'] = $request->endTime;
        }

        if (null !== $request->moduleName) {
            @$query['ModuleName'] = $request->moduleName;
        }

        if (null !== $request->opUserName) {
            @$query['OpUserName'] = $request->opUserName;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->startTime) {
            @$query['StartTime'] = $request->startTime;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSensitiveDataAuditLog',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSensitiveDataAuditLogResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSensitiveDataAuditLogResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the audit logs for sensitive information.
     *
     * @param request - ListSensitiveDataAuditLogRequest
     * @returns ListSensitiveDataAuditLogResponse
     *
     * @param ListSensitiveDataAuditLogRequest $request
     *
     * @return ListSensitiveDataAuditLogResponse
     */
    public function listSensitiveDataAuditLog($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSensitiveDataAuditLogWithOptions($request, $runtime);
    }

    /**
     * Queries the sensitivity levels of a classification template.
     *
     * @param request - ListSensitivityLevelRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListSensitivityLevelResponse
     *
     * @param ListSensitivityLevelRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return ListSensitivityLevelResponse
     */
    public function listSensitivityLevelWithOptions($request, $runtime)
    {
        $request->validate();
        $query = Utils::query($request->toMap());
        $req   = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListSensitivityLevel',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'GET',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListSensitivityLevelResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListSensitivityLevelResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the sensitivity levels of a classification template.
     *
     * @param request - ListSensitivityLevelRequest
     * @returns ListSensitivityLevelResponse
     *
     * @param ListSensitivityLevelRequest $request
     *
     * @return ListSensitivityLevelResponse
     */
    public function listSensitivityLevel($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listSensitivityLevelWithOptions($request, $runtime);
    }

    /**
     * Queries security rule sets.
     *
     * @param request - ListStandardGroupsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListStandardGroupsResponse
     *
     * @param ListStandardGroupsRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return ListStandardGroupsResponse
     */
    public function listStandardGroupsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListStandardGroups',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListStandardGroupsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListStandardGroupsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries security rule sets.
     *
     * @param request - ListStandardGroupsRequest
     * @returns ListStandardGroupsResponse
     *
     * @param ListStandardGroupsRequest $request
     *
     * @return ListStandardGroupsResponse
     */
    public function listStandardGroups($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listStandardGroupsWithOptions($request, $runtime);
    }

    /**
     * Queries the tables in a database.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - ListTablesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTablesResponse
     *
     * @param ListTablesRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return ListTablesResponse
     */
    public function listTablesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->databaseId) {
            @$query['DatabaseId'] = $request->databaseId;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->returnGuid) {
            @$query['ReturnGuid'] = $request->returnGuid;
        }

        if (null !== $request->searchName) {
            @$query['SearchName'] = $request->searchName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTables',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTablesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTablesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the tables in a database.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - ListTablesRequest
     * @returns ListTablesResponse
     *
     * @param ListTablesRequest $request
     *
     * @return ListTablesResponse
     */
    public function listTables($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTablesWithOptions($request, $runtime);
    }

    /**
     * 任务编排获取任务流列表.
     *
     * @param request - ListTaskFlowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTaskFlowResponse
     *
     * @param ListTaskFlowRequest $request
     * @param RuntimeOptions      $runtime
     *
     * @return ListTaskFlowResponse
     */
    public function listTaskFlowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTaskFlow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTaskFlowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTaskFlowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 任务编排获取任务流列表.
     *
     * @param request - ListTaskFlowRequest
     * @returns ListTaskFlowResponse
     *
     * @param ListTaskFlowRequest $request
     *
     * @return ListTaskFlowResponse
     */
    public function listTaskFlow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTaskFlowWithOptions($request, $runtime);
    }

    /**
     * Queries the constants for a task flow.
     *
     * @param request - ListTaskFlowConstantsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTaskFlowConstantsResponse
     *
     * @param ListTaskFlowConstantsRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return ListTaskFlowConstantsResponse
     */
    public function listTaskFlowConstantsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTaskFlowConstants',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTaskFlowConstantsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTaskFlowConstantsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the constants for a task flow.
     *
     * @param request - ListTaskFlowConstantsRequest
     * @returns ListTaskFlowConstantsResponse
     *
     * @param ListTaskFlowConstantsRequest $request
     *
     * @return ListTaskFlowConstantsResponse
     */
    public function listTaskFlowConstants($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTaskFlowConstantsWithOptions($request, $runtime);
    }

    /**
     * Queries the users that are involved in a specified task flow.
     *
     * @param request - ListTaskFlowCooperatorsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTaskFlowCooperatorsResponse
     *
     * @param ListTaskFlowCooperatorsRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return ListTaskFlowCooperatorsResponse
     */
    public function listTaskFlowCooperatorsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTaskFlowCooperators',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTaskFlowCooperatorsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTaskFlowCooperatorsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the users that are involved in a specified task flow.
     *
     * @param request - ListTaskFlowCooperatorsRequest
     * @returns ListTaskFlowCooperatorsResponse
     *
     * @param ListTaskFlowCooperatorsRequest $request
     *
     * @return ListTaskFlowCooperatorsResponse
     */
    public function listTaskFlowCooperators($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTaskFlowCooperatorsWithOptions($request, $runtime);
    }

    /**
     * Queries the edges of the directed acyclic graph (DAG) for a specified task flow based on multiple conditions.
     *
     * @remarks
     * This operation is used for multi-condition query. You can call this operation to query the edges of a specified task flow that meet all specified conditions.
     *
     * @param request - ListTaskFlowEdgesByConditionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTaskFlowEdgesByConditionResponse
     *
     * @param ListTaskFlowEdgesByConditionRequest $request
     * @param RuntimeOptions                      $runtime
     *
     * @return ListTaskFlowEdgesByConditionResponse
     */
    public function listTaskFlowEdgesByConditionWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->id) {
            @$query['Id'] = $request->id;
        }

        if (null !== $request->nodeEnd) {
            @$query['NodeEnd'] = $request->nodeEnd;
        }

        if (null !== $request->nodeFrom) {
            @$query['NodeFrom'] = $request->nodeFrom;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTaskFlowEdgesByCondition',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTaskFlowEdgesByConditionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTaskFlowEdgesByConditionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the edges of the directed acyclic graph (DAG) for a specified task flow based on multiple conditions.
     *
     * @remarks
     * This operation is used for multi-condition query. You can call this operation to query the edges of a specified task flow that meet all specified conditions.
     *
     * @param request - ListTaskFlowEdgesByConditionRequest
     * @returns ListTaskFlowEdgesByConditionResponse
     *
     * @param ListTaskFlowEdgesByConditionRequest $request
     *
     * @return ListTaskFlowEdgesByConditionResponse
     */
    public function listTaskFlowEdgesByCondition($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTaskFlowEdgesByConditionWithOptions($request, $runtime);
    }

    /**
     * Queries the execution records of a task flow.
     *
     * @param request - ListTaskFlowInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTaskFlowInstanceResponse
     *
     * @param ListTaskFlowInstanceRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return ListTaskFlowInstanceResponse
     */
    public function listTaskFlowInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->pageIndex) {
            @$query['PageIndex'] = $request->pageIndex;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->startTimeBegin) {
            @$query['StartTimeBegin'] = $request->startTimeBegin;
        }

        if (null !== $request->startTimeEnd) {
            @$query['StartTimeEnd'] = $request->startTimeEnd;
        }

        if (null !== $request->status) {
            @$query['Status'] = $request->status;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->triggerType) {
            @$query['TriggerType'] = $request->triggerType;
        }

        if (null !== $request->useBizDate) {
            @$query['UseBizDate'] = $request->useBizDate;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTaskFlowInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTaskFlowInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTaskFlowInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the execution records of a task flow.
     *
     * @param request - ListTaskFlowInstanceRequest
     * @returns ListTaskFlowInstanceResponse
     *
     * @param ListTaskFlowInstanceRequest $request
     *
     * @return ListTaskFlowInstanceResponse
     */
    public function listTaskFlowInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTaskFlowInstanceWithOptions($request, $runtime);
    }

    /**
     * Queries the time variables for a task flow.
     *
     * @param request - ListTaskFlowTimeVariablesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTaskFlowTimeVariablesResponse
     *
     * @param ListTaskFlowTimeVariablesRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return ListTaskFlowTimeVariablesResponse
     */
    public function listTaskFlowTimeVariablesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTaskFlowTimeVariables',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTaskFlowTimeVariablesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTaskFlowTimeVariablesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the time variables for a task flow.
     *
     * @param request - ListTaskFlowTimeVariablesRequest
     * @returns ListTaskFlowTimeVariablesResponse
     *
     * @param ListTaskFlowTimeVariablesRequest $request
     *
     * @return ListTaskFlowTimeVariablesResponse
     */
    public function listTaskFlowTimeVariables($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTaskFlowTimeVariablesWithOptions($request, $runtime);
    }

    /**
     * Queries task flows by page.
     *
     * @param tmpReq - ListTaskFlowsByPageRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTaskFlowsByPageResponse
     *
     * @param ListTaskFlowsByPageRequest $tmpReq
     * @param RuntimeOptions             $runtime
     *
     * @return ListTaskFlowsByPageResponse
     */
    public function listTaskFlowsByPageWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new ListTaskFlowsByPageShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->dagIdList) {
            $request->dagIdListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->dagIdList, 'DagIdList', 'json');
        }

        $query = [];
        if (null !== $request->dagIdListShrink) {
            @$query['DagIdList'] = $request->dagIdListShrink;
        }

        if (null !== $request->pageIndex) {
            @$query['PageIndex'] = $request->pageIndex;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->scenarioId) {
            @$query['ScenarioId'] = $request->scenarioId;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTaskFlowsByPage',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTaskFlowsByPageResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTaskFlowsByPageResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries task flows by page.
     *
     * @param request - ListTaskFlowsByPageRequest
     * @returns ListTaskFlowsByPageResponse
     *
     * @param ListTaskFlowsByPageRequest $request
     *
     * @return ListTaskFlowsByPageResponse
     */
    public function listTaskFlowsByPage($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTaskFlowsByPageWithOptions($request, $runtime);
    }

    /**
     * Queries the tasks in a specified task flow.
     *
     * @param request - ListTasksInTaskFlowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListTasksInTaskFlowResponse
     *
     * @param ListTasksInTaskFlowRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return ListTasksInTaskFlowResponse
     */
    public function listTasksInTaskFlowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListTasksInTaskFlow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListTasksInTaskFlowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListTasksInTaskFlowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the tasks in a specified task flow.
     *
     * @param request - ListTasksInTaskFlowRequest
     * @returns ListTasksInTaskFlowResponse
     *
     * @param ListTasksInTaskFlowRequest $request
     *
     * @return ListTasksInTaskFlowResponse
     */
    public function listTasksInTaskFlow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listTasksInTaskFlowWithOptions($request, $runtime);
    }

    /**
     * Queries the permissions of a specific user on a database or a table.
     *
     * @param request - ListUserPermissionsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListUserPermissionsResponse
     *
     * @param ListUserPermissionsRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return ListUserPermissionsResponse
     */
    public function listUserPermissionsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->databaseName) {
            @$query['DatabaseName'] = $request->databaseName;
        }

        if (null !== $request->dbType) {
            @$query['DbType'] = $request->dbType;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->permType) {
            @$query['PermType'] = $request->permType;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListUserPermissions',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListUserPermissionsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListUserPermissionsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the permissions of a specific user on a database or a table.
     *
     * @param request - ListUserPermissionsRequest
     * @returns ListUserPermissionsResponse
     *
     * @param ListUserPermissionsRequest $request
     *
     * @return ListUserPermissionsResponse
     */
    public function listUserPermissions($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listUserPermissionsWithOptions($request, $runtime);
    }

    /**
     * 获取用户租户列表.
     *
     * @param request - ListUserTenantsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListUserTenantsResponse
     *
     * @param ListUserTenantsRequest $request
     * @param RuntimeOptions         $runtime
     *
     * @return ListUserTenantsResponse
     */
    public function listUserTenantsWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListUserTenants',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListUserTenantsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListUserTenantsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 获取用户租户列表.
     *
     * @param request - ListUserTenantsRequest
     * @returns ListUserTenantsResponse
     *
     * @param ListUserTenantsRequest $request
     *
     * @return ListUserTenantsResponse
     */
    public function listUserTenants($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listUserTenantsWithOptions($request, $runtime);
    }

    /**
     * Queries the details of users.
     *
     * @param request - ListUsersRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListUsersResponse
     *
     * @param ListUsersRequest $request
     * @param RuntimeOptions   $runtime
     *
     * @return ListUsersResponse
     */
    public function listUsersWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->role) {
            @$query['Role'] = $request->role;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userState) {
            @$query['UserState'] = $request->userState;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListUsers',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListUsersResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListUsersResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of users.
     *
     * @param request - ListUsersRequest
     * @returns ListUsersResponse
     *
     * @param ListUsersRequest $request
     *
     * @return ListUsersResponse
     */
    public function listUsers($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listUsersWithOptions($request, $runtime);
    }

    /**
     * Queries approval nodes.
     *
     * @param request - ListWorkFlowNodesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListWorkFlowNodesResponse
     *
     * @param ListWorkFlowNodesRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return ListWorkFlowNodesResponse
     */
    public function listWorkFlowNodesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->searchName) {
            @$query['SearchName'] = $request->searchName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListWorkFlowNodes',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListWorkFlowNodesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListWorkFlowNodesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries approval nodes.
     *
     * @param request - ListWorkFlowNodesRequest
     * @returns ListWorkFlowNodesResponse
     *
     * @param ListWorkFlowNodesRequest $request
     *
     * @return ListWorkFlowNodesResponse
     */
    public function listWorkFlowNodes($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listWorkFlowNodesWithOptions($request, $runtime);
    }

    /**
     * Queries approval templates.
     *
     * @param request - ListWorkFlowTemplatesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ListWorkFlowTemplatesResponse
     *
     * @param ListWorkFlowTemplatesRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return ListWorkFlowTemplatesResponse
     */
    public function listWorkFlowTemplatesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->searchName) {
            @$query['SearchName'] = $request->searchName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ListWorkFlowTemplates',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ListWorkFlowTemplatesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ListWorkFlowTemplatesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries approval templates.
     *
     * @param request - ListWorkFlowTemplatesRequest
     * @returns ListWorkFlowTemplatesResponse
     *
     * @param ListWorkFlowTemplatesRequest $request
     *
     * @return ListWorkFlowTemplatesResponse
     */
    public function listWorkFlowTemplates($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->listWorkFlowTemplatesWithOptions($request, $runtime);
    }

    /**
     * Sets the status of a task flow to "Successful".
     *
     * @param request - MakeTaskFlowInstanceSuccessRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MakeTaskFlowInstanceSuccessResponse
     *
     * @param MakeTaskFlowInstanceSuccessRequest $request
     * @param RuntimeOptions                     $runtime
     *
     * @return MakeTaskFlowInstanceSuccessResponse
     */
    public function makeTaskFlowInstanceSuccessWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagInstanceId) {
            @$query['DagInstanceId'] = $request->dagInstanceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'MakeTaskFlowInstanceSuccess',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return MakeTaskFlowInstanceSuccessResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return MakeTaskFlowInstanceSuccessResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Sets the status of a task flow to "Successful".
     *
     * @param request - MakeTaskFlowInstanceSuccessRequest
     * @returns MakeTaskFlowInstanceSuccessResponse
     *
     * @param MakeTaskFlowInstanceSuccessRequest $request
     *
     * @return MakeTaskFlowInstanceSuccessResponse
     */
    public function makeTaskFlowInstanceSuccess($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->makeTaskFlowInstanceSuccessWithOptions($request, $runtime);
    }

    /**
     * Modifies the SQL script that is submitted by using a data change ticket.
     *
     * @param request - ModifyDataCorrectExecSQLRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ModifyDataCorrectExecSQLResponse
     *
     * @param ModifyDataCorrectExecSQLRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return ModifyDataCorrectExecSQLResponse
     */
    public function modifyDataCorrectExecSQLWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->execSQL) {
            @$query['ExecSQL'] = $request->execSQL;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ModifyDataCorrectExecSQL',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ModifyDataCorrectExecSQLResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ModifyDataCorrectExecSQLResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Modifies the SQL script that is submitted by using a data change ticket.
     *
     * @param request - ModifyDataCorrectExecSQLRequest
     * @returns ModifyDataCorrectExecSQLResponse
     *
     * @param ModifyDataCorrectExecSQLRequest $request
     *
     * @return ModifyDataCorrectExecSQLResponse
     */
    public function modifyDataCorrectExecSQL($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->modifyDataCorrectExecSQLWithOptions($request, $runtime);
    }

    /**
     * Modifies the masking rule bound to a specified field.
     *
     * @param request - ModifyDesensitizationStrategyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ModifyDesensitizationStrategyResponse
     *
     * @param ModifyDesensitizationStrategyRequest $request
     * @param RuntimeOptions                       $runtime
     *
     * @return ModifyDesensitizationStrategyResponse
     */
    public function modifyDesensitizationStrategyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->columnName) {
            @$query['ColumnName'] = $request->columnName;
        }

        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->isDefault) {
            @$query['IsDefault'] = $request->isDefault;
        }

        if (null !== $request->isLogic) {
            @$query['IsLogic'] = $request->isLogic;
        }

        if (null !== $request->isReset) {
            @$query['IsReset'] = $request->isReset;
        }

        if (null !== $request->ruleId) {
            @$query['RuleId'] = $request->ruleId;
        }

        if (null !== $request->schemaName) {
            @$query['SchemaName'] = $request->schemaName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ModifyDesensitizationStrategy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ModifyDesensitizationStrategyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ModifyDesensitizationStrategyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Modifies the masking rule bound to a specified field.
     *
     * @param request - ModifyDesensitizationStrategyRequest
     * @returns ModifyDesensitizationStrategyResponse
     *
     * @param ModifyDesensitizationStrategyRequest $request
     *
     * @return ModifyDesensitizationStrategyResponse
     */
    public function modifyDesensitizationStrategy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->modifyDesensitizationStrategyWithOptions($request, $runtime);
    }

    /**
     * 修改实例信息，同时检查该实例连通性.
     *
     * @param request - ModifyInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ModifyInstanceResponse
     *
     * @param ModifyInstanceRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return ModifyInstanceResponse
     */
    public function modifyInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dataLinkName) {
            @$query['DataLinkName'] = $request->dataLinkName;
        }

        if (null !== $request->databasePassword) {
            @$query['DatabasePassword'] = $request->databasePassword;
        }

        if (null !== $request->databaseUser) {
            @$query['DatabaseUser'] = $request->databaseUser;
        }

        if (null !== $request->dbaId) {
            @$query['DbaId'] = $request->dbaId;
        }

        if (null !== $request->ddlOnline) {
            @$query['DdlOnline'] = $request->ddlOnline;
        }

        if (null !== $request->ecsInstanceId) {
            @$query['EcsInstanceId'] = $request->ecsInstanceId;
        }

        if (null !== $request->ecsRegion) {
            @$query['EcsRegion'] = $request->ecsRegion;
        }

        if (null !== $request->enableSellCommon) {
            @$query['EnableSellCommon'] = $request->enableSellCommon;
        }

        if (null !== $request->enableSellSitd) {
            @$query['EnableSellSitd'] = $request->enableSellSitd;
        }

        if (null !== $request->enableSellStable) {
            @$query['EnableSellStable'] = $request->enableSellStable;
        }

        if (null !== $request->enableSellTrust) {
            @$query['EnableSellTrust'] = $request->enableSellTrust;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->exportTimeout) {
            @$query['ExportTimeout'] = $request->exportTimeout;
        }

        if (null !== $request->host) {
            @$query['Host'] = $request->host;
        }

        if (null !== $request->instanceAlias) {
            @$query['InstanceAlias'] = $request->instanceAlias;
        }

        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->instanceSource) {
            @$query['InstanceSource'] = $request->instanceSource;
        }

        if (null !== $request->instanceType) {
            @$query['InstanceType'] = $request->instanceType;
        }

        if (null !== $request->networkType) {
            @$query['NetworkType'] = $request->networkType;
        }

        if (null !== $request->port) {
            @$query['Port'] = $request->port;
        }

        if (null !== $request->queryTimeout) {
            @$query['QueryTimeout'] = $request->queryTimeout;
        }

        if (null !== $request->safeRule) {
            @$query['SafeRule'] = $request->safeRule;
        }

        if (null !== $request->sid) {
            @$query['Sid'] = $request->sid;
        }

        if (null !== $request->skipTest) {
            @$query['SkipTest'] = $request->skipTest;
        }

        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->templateType) {
            @$query['TemplateType'] = $request->templateType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->useDsql) {
            @$query['UseDsql'] = $request->useDsql;
        }

        if (null !== $request->useSsl) {
            @$query['UseSsl'] = $request->useSsl;
        }

        if (null !== $request->vpcId) {
            @$query['VpcId'] = $request->vpcId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ModifyInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ModifyInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ModifyInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 修改实例信息，同时检查该实例连通性.
     *
     * @param request - ModifyInstanceRequest
     * @returns ModifyInstanceResponse
     *
     * @param ModifyInstanceRequest $request
     *
     * @return ModifyInstanceResponse
     */
    public function modifyInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->modifyInstanceWithOptions($request, $runtime);
    }

    /**
     * Migrates a task flow to a specified business scenario.
     *
     * @param request - MoveTaskFlowToScenarioRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns MoveTaskFlowToScenarioResponse
     *
     * @param MoveTaskFlowToScenarioRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return MoveTaskFlowToScenarioResponse
     */
    public function moveTaskFlowToScenarioWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->scenarioId) {
            @$query['ScenarioId'] = $request->scenarioId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'MoveTaskFlowToScenario',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return MoveTaskFlowToScenarioResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return MoveTaskFlowToScenarioResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Migrates a task flow to a specified business scenario.
     *
     * @param request - MoveTaskFlowToScenarioRequest
     * @returns MoveTaskFlowToScenarioResponse
     *
     * @param MoveTaskFlowToScenarioRequest $request
     *
     * @return MoveTaskFlowToScenarioResponse
     */
    public function moveTaskFlowToScenario($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->moveTaskFlowToScenarioWithOptions($request, $runtime);
    }

    /**
     * Unpublishes a published task flow.
     *
     * @param request - OfflineTaskFlowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns OfflineTaskFlowResponse
     *
     * @param OfflineTaskFlowRequest $request
     * @param RuntimeOptions         $runtime
     *
     * @return OfflineTaskFlowResponse
     */
    public function offlineTaskFlowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'OfflineTaskFlow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return OfflineTaskFlowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return OfflineTaskFlowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Unpublishes a published task flow.
     *
     * @param request - OfflineTaskFlowRequest
     * @returns OfflineTaskFlowResponse
     *
     * @param OfflineTaskFlowRequest $request
     *
     * @return OfflineTaskFlowResponse
     */
    public function offlineTaskFlow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->offlineTaskFlowWithOptions($request, $runtime);
    }

    /**
     * Pauses a SQL task for data change.
     *
     * @remarks
     * You can call this operation only for database instances that are managed in Security Collaboration mode.
     *
     * @param request - PauseDataCorrectSQLJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PauseDataCorrectSQLJobResponse
     *
     * @param PauseDataCorrectSQLJobRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return PauseDataCorrectSQLJobResponse
     */
    public function pauseDataCorrectSQLJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->type) {
            @$query['Type'] = $request->type;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'PauseDataCorrectSQLJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return PauseDataCorrectSQLJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return PauseDataCorrectSQLJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Pauses a SQL task for data change.
     *
     * @remarks
     * You can call this operation only for database instances that are managed in Security Collaboration mode.
     *
     * @param request - PauseDataCorrectSQLJobRequest
     * @returns PauseDataCorrectSQLJobResponse
     *
     * @param PauseDataCorrectSQLJobRequest $request
     *
     * @return PauseDataCorrectSQLJobResponse
     */
    public function pauseDataCorrectSQLJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->pauseDataCorrectSQLJobWithOptions($request, $runtime);
    }

    /**
     * 终止数据导出任务
     *
     * @param request - PauseDataExportJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PauseDataExportJobResponse
     *
     * @param PauseDataExportJobRequest $request
     * @param RuntimeOptions            $runtime
     *
     * @return PauseDataExportJobResponse
     */
    public function pauseDataExportJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'PauseDataExportJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return PauseDataExportJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return PauseDataExportJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 终止数据导出任务
     *
     * @param request - PauseDataExportJobRequest
     * @returns PauseDataExportJobResponse
     *
     * @param PauseDataExportJobRequest $request
     *
     * @return PauseDataExportJobResponse
     */
    public function pauseDataExportJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->pauseDataExportJobWithOptions($request, $runtime);
    }

    /**
     * 创建工单审批流
     *
     * @param request - PreviewWorkflowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PreviewWorkflowResponse
     *
     * @param PreviewWorkflowRequest $request
     * @param RuntimeOptions         $runtime
     *
     * @return PreviewWorkflowResponse
     */
    public function previewWorkflowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'PreviewWorkflow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return PreviewWorkflowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return PreviewWorkflowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 创建工单审批流
     *
     * @param request - PreviewWorkflowRequest
     * @returns PreviewWorkflowResponse
     *
     * @param PreviewWorkflowRequest $request
     *
     * @return PreviewWorkflowResponse
     */
    public function previewWorkflow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->previewWorkflowWithOptions($request, $runtime);
    }

    /**
     * Publishes and deploys a task flow.
     *
     * @param request - PublishAndDeployTaskFlowRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns PublishAndDeployTaskFlowResponse
     *
     * @param PublishAndDeployTaskFlowRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return PublishAndDeployTaskFlowResponse
     */
    public function publishAndDeployTaskFlowWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->versionComments) {
            @$query['VersionComments'] = $request->versionComments;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'PublishAndDeployTaskFlow',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return PublishAndDeployTaskFlowResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return PublishAndDeployTaskFlowResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Publishes and deploys a task flow.
     *
     * @param request - PublishAndDeployTaskFlowRequest
     * @returns PublishAndDeployTaskFlowResponse
     *
     * @param PublishAndDeployTaskFlowRequest $request
     *
     * @return PublishAndDeployTaskFlowResponse
     */
    public function publishAndDeployTaskFlow($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->publishAndDeployTaskFlowWithOptions($request, $runtime);
    }

    /**
     * Queries the download and parsing progress of data tracking logs.
     *
     * @param request - QueryDataTrackResultDownloadStatusRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns QueryDataTrackResultDownloadStatusResponse
     *
     * @param QueryDataTrackResultDownloadStatusRequest $request
     * @param RuntimeOptions                            $runtime
     *
     * @return QueryDataTrackResultDownloadStatusResponse
     */
    public function queryDataTrackResultDownloadStatusWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->downloadKeyId) {
            @$query['DownloadKeyId'] = $request->downloadKeyId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'QueryDataTrackResultDownloadStatus',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return QueryDataTrackResultDownloadStatusResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return QueryDataTrackResultDownloadStatusResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the download and parsing progress of data tracking logs.
     *
     * @param request - QueryDataTrackResultDownloadStatusRequest
     * @returns QueryDataTrackResultDownloadStatusResponse
     *
     * @param QueryDataTrackResultDownloadStatusRequest $request
     *
     * @return QueryDataTrackResultDownloadStatusResponse
     */
    public function queryDataTrackResultDownloadStatus($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->queryDataTrackResultDownloadStatusWithOptions($request, $runtime);
    }

    /**
     * 部署任务流的历史版本.
     *
     * @param request - ReDeployLhDagVersionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ReDeployLhDagVersionResponse
     *
     * @param ReDeployLhDagVersionRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return ReDeployLhDagVersionResponse
     */
    public function reDeployLhDagVersionWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagVersion) {
            @$query['DagVersion'] = $request->dagVersion;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ReDeployLhDagVersion',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ReDeployLhDagVersionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ReDeployLhDagVersionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 部署任务流的历史版本.
     *
     * @param request - ReDeployLhDagVersionRequest
     * @returns ReDeployLhDagVersionResponse
     *
     * @param ReDeployLhDagVersionRequest $request
     *
     * @return ReDeployLhDagVersionResponse
     */
    public function reDeployLhDagVersion($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->reDeployLhDagVersionWithOptions($request, $runtime);
    }

    /**
     * Reruns a task flow instance.
     *
     * @param request - ReRunTaskFlowInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ReRunTaskFlowInstanceResponse
     *
     * @param ReRunTaskFlowInstanceRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return ReRunTaskFlowInstanceResponse
     */
    public function reRunTaskFlowInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagInstanceId) {
            @$query['DagInstanceId'] = $request->dagInstanceId;
        }

        if (null !== $request->dagVersion) {
            @$query['DagVersion'] = $request->dagVersion;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ReRunTaskFlowInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ReRunTaskFlowInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ReRunTaskFlowInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Reruns a task flow instance.
     *
     * @param request - ReRunTaskFlowInstanceRequest
     * @returns ReRunTaskFlowInstanceResponse
     *
     * @param ReRunTaskFlowInstanceRequest $request
     *
     * @return ReRunTaskFlowInstanceResponse
     */
    public function reRunTaskFlowInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->reRunTaskFlowInstanceWithOptions($request, $runtime);
    }

    /**
     * Unsubscribes from a pay-as-you-go Data Management (DMS) resource.
     *
     * @param request - RefundPayAsYouGoOrderRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RefundPayAsYouGoOrderResponse
     *
     * @param RefundPayAsYouGoOrderRequest $request
     * @param RuntimeOptions               $runtime
     *
     * @return RefundPayAsYouGoOrderResponse
     */
    public function refundPayAsYouGoOrderWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RefundPayAsYouGoOrder',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RefundPayAsYouGoOrderResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RefundPayAsYouGoOrderResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Unsubscribes from a pay-as-you-go Data Management (DMS) resource.
     *
     * @param request - RefundPayAsYouGoOrderRequest
     * @returns RefundPayAsYouGoOrderResponse
     *
     * @param RefundPayAsYouGoOrderRequest $request
     *
     * @return RefundPayAsYouGoOrderResponse
     */
    public function refundPayAsYouGoOrder($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->refundPayAsYouGoOrderWithOptions($request, $runtime);
    }

    /**
     * Registers a database instance in Data Management (DMS).
     *
     * @remarks
     * Prerequisites: You are a DMS administrator or a database administrator (DBA). You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query your user role from the RoleIdList parameter that is returned.
     *
     * @param request - RegisterInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterInstanceResponse
     *
     * @param RegisterInstanceRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return RegisterInstanceResponse
     */
    public function registerInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dataLinkName) {
            @$query['DataLinkName'] = $request->dataLinkName;
        }

        if (null !== $request->databasePassword) {
            @$query['DatabasePassword'] = $request->databasePassword;
        }

        if (null !== $request->databaseUser) {
            @$query['DatabaseUser'] = $request->databaseUser;
        }

        if (null !== $request->dbaUid) {
            @$query['DbaUid'] = $request->dbaUid;
        }

        if (null !== $request->dbaUidByString) {
            @$query['DbaUidByString'] = $request->dbaUidByString;
        }

        if (null !== $request->ddlOnline) {
            @$query['DdlOnline'] = $request->ddlOnline;
        }

        if (null !== $request->ecsInstanceId) {
            @$query['EcsInstanceId'] = $request->ecsInstanceId;
        }

        if (null !== $request->ecsRegion) {
            @$query['EcsRegion'] = $request->ecsRegion;
        }

        if (null !== $request->enableSellSitd) {
            @$query['EnableSellSitd'] = $request->enableSellSitd;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->exportTimeout) {
            @$query['ExportTimeout'] = $request->exportTimeout;
        }

        if (null !== $request->host) {
            @$query['Host'] = $request->host;
        }

        if (null !== $request->instanceAlias) {
            @$query['InstanceAlias'] = $request->instanceAlias;
        }

        if (null !== $request->instanceSource) {
            @$query['InstanceSource'] = $request->instanceSource;
        }

        if (null !== $request->instanceType) {
            @$query['InstanceType'] = $request->instanceType;
        }

        if (null !== $request->networkType) {
            @$query['NetworkType'] = $request->networkType;
        }

        if (null !== $request->port) {
            @$query['Port'] = $request->port;
        }

        if (null !== $request->queryTimeout) {
            @$query['QueryTimeout'] = $request->queryTimeout;
        }

        if (null !== $request->safeRule) {
            @$query['SafeRule'] = $request->safeRule;
        }

        if (null !== $request->sid) {
            @$query['Sid'] = $request->sid;
        }

        if (null !== $request->skipTest) {
            @$query['SkipTest'] = $request->skipTest;
        }

        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->templateType) {
            @$query['TemplateType'] = $request->templateType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->useDsql) {
            @$query['UseDsql'] = $request->useDsql;
        }

        if (null !== $request->vpcId) {
            @$query['VpcId'] = $request->vpcId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RegisterInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RegisterInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RegisterInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Registers a database instance in Data Management (DMS).
     *
     * @remarks
     * Prerequisites: You are a DMS administrator or a database administrator (DBA). You can call the [ListUsers](https://help.aliyun.com/document_detail/141938.html) or [GetUser](https://help.aliyun.com/document_detail/147098.html) operation to query your user role from the RoleIdList parameter that is returned.
     *
     * @param request - RegisterInstanceRequest
     * @returns RegisterInstanceResponse
     *
     * @param RegisterInstanceRequest $request
     *
     * @return RegisterInstanceResponse
     */
    public function registerInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->registerInstanceWithOptions($request, $runtime);
    }

    /**
     * Registers a user for your enterprise.
     *
     * @remarks
     * If you are an **administrator** in Data Management (DMS), you can call this operation to register a user for your enterprise. To view users that are assigned the administrator role, perform the following steps: Log on to the DMS console. In the top navigation bar, click O&M. In the left-side navigation pane, click User.
     *
     * @param request - RegisterUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RegisterUserResponse
     *
     * @param RegisterUserRequest $request
     * @param RuntimeOptions      $runtime
     *
     * @return RegisterUserResponse
     */
    public function registerUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->mobile) {
            @$query['Mobile'] = $request->mobile;
        }

        if (null !== $request->roleNames) {
            @$query['RoleNames'] = $request->roleNames;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uid) {
            @$query['Uid'] = $request->uid;
        }

        if (null !== $request->userNick) {
            @$query['UserNick'] = $request->userNick;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RegisterUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RegisterUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RegisterUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Registers a user for your enterprise.
     *
     * @remarks
     * If you are an **administrator** in Data Management (DMS), you can call this operation to register a user for your enterprise. To view users that are assigned the administrator role, perform the following steps: Log on to the DMS console. In the top navigation bar, click O&M. In the left-side navigation pane, click User.
     *
     * @param request - RegisterUserRequest
     * @returns RegisterUserResponse
     *
     * @param RegisterUserRequest $request
     *
     * @return RegisterUserResponse
     */
    public function registerUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->registerUserWithOptions($request, $runtime);
    }

    /**
     * 删除数据导出任务
     *
     * @param request - RemoveDataExportJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RemoveDataExportJobResponse
     *
     * @param RemoveDataExportJobRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return RemoveDataExportJobResponse
     */
    public function removeDataExportJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RemoveDataExportJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RemoveDataExportJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RemoveDataExportJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 删除数据导出任务
     *
     * @param request - RemoveDataExportJobRequest
     * @returns RemoveDataExportJobResponse
     *
     * @param RemoveDataExportJobRequest $request
     *
     * @return RemoveDataExportJobResponse
     */
    public function removeDataExportJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->removeDataExportJobWithOptions($request, $runtime);
    }

    /**
     * Reruns a failed SQL task for data change.
     *
     * @param request - RestartDataCorrectSQLJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RestartDataCorrectSQLJobResponse
     *
     * @param RestartDataCorrectSQLJobRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return RestartDataCorrectSQLJobResponse
     */
    public function restartDataCorrectSQLJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->type) {
            @$query['Type'] = $request->type;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RestartDataCorrectSQLJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RestartDataCorrectSQLJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RestartDataCorrectSQLJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Reruns a failed SQL task for data change.
     *
     * @param request - RestartDataCorrectSQLJobRequest
     * @returns RestartDataCorrectSQLJobResponse
     *
     * @param RestartDataCorrectSQLJobRequest $request
     *
     * @return RestartDataCorrectSQLJobResponse
     */
    public function restartDataCorrectSQLJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->restartDataCorrectSQLJobWithOptions($request, $runtime);
    }

    /**
     * 重启数据导出任务
     *
     * @param request - RestartDataExportJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RestartDataExportJobResponse
     *
     * @param RestartDataExportJobRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return RestartDataExportJobResponse
     */
    public function restartDataExportJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RestartDataExportJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RestartDataExportJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RestartDataExportJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 重启数据导出任务
     *
     * @param request - RestartDataExportJobRequest
     * @returns RestartDataExportJobResponse
     *
     * @param RestartDataExportJobRequest $request
     *
     * @return RestartDataExportJobResponse
     */
    public function restartDataExportJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->restartDataExportJobWithOptions($request, $runtime);
    }

    /**
     * Resumes a suspended task flow.
     *
     * @remarks
     * You can call this operation only for task flows that are suspended.
     *
     * @param request - ResumeTaskFlowInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns ResumeTaskFlowInstanceResponse
     *
     * @param ResumeTaskFlowInstanceRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return ResumeTaskFlowInstanceResponse
     */
    public function resumeTaskFlowInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagInstanceId) {
            @$query['DagInstanceId'] = $request->dagInstanceId;
        }

        if (null !== $request->dagVersion) {
            @$query['DagVersion'] = $request->dagVersion;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'ResumeTaskFlowInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return ResumeTaskFlowInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return ResumeTaskFlowInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Resumes a suspended task flow.
     *
     * @remarks
     * You can call this operation only for task flows that are suspended.
     *
     * @param request - ResumeTaskFlowInstanceRequest
     * @returns ResumeTaskFlowInstanceResponse
     *
     * @param ResumeTaskFlowInstanceRequest $request
     *
     * @return ResumeTaskFlowInstanceResponse
     */
    public function resumeTaskFlowInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->resumeTaskFlowInstanceWithOptions($request, $runtime);
    }

    /**
     * Reruns the precheck for a data change ticket.
     *
     * @param request - RetryDataCorrectPreCheckRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RetryDataCorrectPreCheckResponse
     *
     * @param RetryDataCorrectPreCheckRequest $request
     * @param RuntimeOptions                  $runtime
     *
     * @return RetryDataCorrectPreCheckResponse
     */
    public function retryDataCorrectPreCheckWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RetryDataCorrectPreCheck',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RetryDataCorrectPreCheckResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RetryDataCorrectPreCheckResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Reruns the precheck for a data change ticket.
     *
     * @param request - RetryDataCorrectPreCheckRequest
     * @returns RetryDataCorrectPreCheckResponse
     *
     * @param RetryDataCorrectPreCheckRequest $request
     *
     * @return RetryDataCorrectPreCheckResponse
     */
    public function retryDataCorrectPreCheck($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->retryDataCorrectPreCheckWithOptions($request, $runtime);
    }

    /**
     * Revokes permissions on resources from Data Management (DMS) users by using a permission template.
     *
     * @remarks
     * You must be a database administrator (DBA) or a DMS administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - RevokeTemplateAuthorityRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RevokeTemplateAuthorityResponse
     *
     * @param RevokeTemplateAuthorityRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return RevokeTemplateAuthorityResponse
     */
    public function revokeTemplateAuthorityWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userIds) {
            @$query['UserIds'] = $request->userIds;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RevokeTemplateAuthority',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RevokeTemplateAuthorityResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RevokeTemplateAuthorityResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Revokes permissions on resources from Data Management (DMS) users by using a permission template.
     *
     * @remarks
     * You must be a database administrator (DBA) or a DMS administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - RevokeTemplateAuthorityRequest
     * @returns RevokeTemplateAuthorityResponse
     *
     * @param RevokeTemplateAuthorityRequest $request
     *
     * @return RevokeTemplateAuthorityResponse
     */
    public function revokeTemplateAuthority($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->revokeTemplateAuthorityWithOptions($request, $runtime);
    }

    /**
     * Revokes the permissions on instances, databases, and tables from a user.
     *
     * @param request - RevokeUserPermissionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns RevokeUserPermissionResponse
     *
     * @param RevokeUserPermissionRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return RevokeUserPermissionResponse
     */
    public function revokeUserPermissionWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->dsType) {
            @$query['DsType'] = $request->dsType;
        }

        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->permTypes) {
            @$query['PermTypes'] = $request->permTypes;
        }

        if (null !== $request->tableId) {
            @$query['TableId'] = $request->tableId;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->userAccessId) {
            @$query['UserAccessId'] = $request->userAccessId;
        }

        if (null !== $request->userId) {
            @$query['UserId'] = $request->userId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'RevokeUserPermission',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return RevokeUserPermissionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return RevokeUserPermissionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Revokes the permissions on instances, databases, and tables from a user.
     *
     * @param request - RevokeUserPermissionRequest
     * @returns RevokeUserPermissionResponse
     *
     * @param RevokeUserPermissionRequest $request
     *
     * @return RevokeUserPermissionResponse
     */
    public function revokeUserPermission($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->revokeUserPermissionWithOptions($request, $runtime);
    }

    /**
     * Searches for the parsing result of a data tracking task.
     *
     * @param tmpReq - SearchDataTrackResultRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchDataTrackResultResponse
     *
     * @param SearchDataTrackResultRequest $tmpReq
     * @param RuntimeOptions               $runtime
     *
     * @return SearchDataTrackResultResponse
     */
    public function searchDataTrackResultWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new SearchDataTrackResultShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->columnFilter) {
            $request->columnFilterShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->columnFilter, 'ColumnFilter', 'json');
        }

        if (null !== $tmpReq->filterTableList) {
            $request->filterTableListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->filterTableList, 'FilterTableList', 'json');
        }

        if (null !== $tmpReq->filterTypeList) {
            $request->filterTypeListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->filterTypeList, 'FilterTypeList', 'json');
        }

        $query = [];
        if (null !== $request->columnFilterShrink) {
            @$query['ColumnFilter'] = $request->columnFilterShrink;
        }

        if (null !== $request->filterEndTime) {
            @$query['FilterEndTime'] = $request->filterEndTime;
        }

        if (null !== $request->filterStartTime) {
            @$query['FilterStartTime'] = $request->filterStartTime;
        }

        if (null !== $request->filterTableListShrink) {
            @$query['FilterTableList'] = $request->filterTableListShrink;
        }

        if (null !== $request->filterTypeListShrink) {
            @$query['FilterTypeList'] = $request->filterTypeListShrink;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SearchDataTrackResult',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SearchDataTrackResultResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SearchDataTrackResultResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Searches for the parsing result of a data tracking task.
     *
     * @param request - SearchDataTrackResultRequest
     * @returns SearchDataTrackResultResponse
     *
     * @param SearchDataTrackResultRequest $request
     *
     * @return SearchDataTrackResultResponse
     */
    public function searchDataTrackResult($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->searchDataTrackResultWithOptions($request, $runtime);
    }

    /**
     * Queries the details of the databases.
     *
     * @param request - SearchDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchDatabaseResponse
     *
     * @param SearchDatabaseRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return SearchDatabaseResponse
     */
    public function searchDatabaseWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbType) {
            @$query['DbType'] = $request->dbType;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->searchRange) {
            @$query['SearchRange'] = $request->searchRange;
        }

        if (null !== $request->searchTarget) {
            @$query['SearchTarget'] = $request->searchTarget;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SearchDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SearchDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SearchDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries the details of the databases.
     *
     * @param request - SearchDatabaseRequest
     * @returns SearchDatabaseResponse
     *
     * @param SearchDatabaseRequest $request
     *
     * @return SearchDatabaseResponse
     */
    public function searchDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->searchDatabaseWithOptions($request, $runtime);
    }

    /**
     * Queries detailed information about tables.
     *
     * @remarks
     * You can call this operation only for database instances that are managed in Security Collaboration mode.
     *
     * @param request - SearchTableRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SearchTableResponse
     *
     * @param SearchTableRequest $request
     * @param RuntimeOptions     $runtime
     *
     * @return SearchTableResponse
     */
    public function searchTableWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbType) {
            @$query['DbType'] = $request->dbType;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->pageNumber) {
            @$query['PageNumber'] = $request->pageNumber;
        }

        if (null !== $request->pageSize) {
            @$query['PageSize'] = $request->pageSize;
        }

        if (null !== $request->returnGuid) {
            @$query['ReturnGuid'] = $request->returnGuid;
        }

        if (null !== $request->searchKey) {
            @$query['SearchKey'] = $request->searchKey;
        }

        if (null !== $request->searchRange) {
            @$query['SearchRange'] = $request->searchRange;
        }

        if (null !== $request->searchTarget) {
            @$query['SearchTarget'] = $request->searchTarget;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SearchTable',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SearchTableResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SearchTableResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Queries detailed information about tables.
     *
     * @remarks
     * You can call this operation only for database instances that are managed in Security Collaboration mode.
     *
     * @param request - SearchTableRequest
     * @returns SearchTableResponse
     *
     * @param SearchTableRequest $request
     *
     * @return SearchTableResponse
     */
    public function searchTable($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->searchTableWithOptions($request, $runtime);
    }

    /**
     * Configures the owner of an instance, a database, or a table.
     *
     * @param request - SetOwnersRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetOwnersResponse
     *
     * @param SetOwnersRequest $request
     * @param RuntimeOptions   $runtime
     *
     * @return SetOwnersResponse
     */
    public function setOwnersWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->ownerIds) {
            @$query['OwnerIds'] = $request->ownerIds;
        }

        if (null !== $request->ownerType) {
            @$query['OwnerType'] = $request->ownerType;
        }

        if (null !== $request->resourceId) {
            @$query['ResourceId'] = $request->resourceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SetOwners',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SetOwnersResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SetOwnersResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Configures the owner of an instance, a database, or a table.
     *
     * @param request - SetOwnersRequest
     * @returns SetOwnersResponse
     *
     * @param SetOwnersRequest $request
     *
     * @return SetOwnersResponse
     */
    public function setOwners($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->setOwnersWithOptions($request, $runtime);
    }

    /**
     * 修改审批流额外信息.
     *
     * @param request - SetWorkflowExtraInfoRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SetWorkflowExtraInfoResponse
     *
     * @param SetWorkflowExtraInfoRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return SetWorkflowExtraInfoResponse
     */
    public function setWorkflowExtraInfoWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->renderAddApprovalNode) {
            @$query['RenderAddApprovalNode'] = $request->renderAddApprovalNode;
        }

        if (null !== $request->renderAgree) {
            @$query['RenderAgree'] = $request->renderAgree;
        }

        if (null !== $request->renderCancel) {
            @$query['RenderCancel'] = $request->renderCancel;
        }

        if (null !== $request->renderReject) {
            @$query['RenderReject'] = $request->renderReject;
        }

        if (null !== $request->renderTransfer) {
            @$query['RenderTransfer'] = $request->renderTransfer;
        }

        if (null !== $request->thirdpartyWorkflowComment) {
            @$query['ThirdpartyWorkflowComment'] = $request->thirdpartyWorkflowComment;
        }

        if (null !== $request->thirdpartyWorkflowUrl) {
            @$query['ThirdpartyWorkflowUrl'] = $request->thirdpartyWorkflowUrl;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->workflowInstanceId) {
            @$query['WorkflowInstanceId'] = $request->workflowInstanceId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SetWorkflowExtraInfo',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SetWorkflowExtraInfoResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SetWorkflowExtraInfoResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 修改审批流额外信息.
     *
     * @param request - SetWorkflowExtraInfoRequest
     * @returns SetWorkflowExtraInfoResponse
     *
     * @param SetWorkflowExtraInfoRequest $request
     *
     * @return SetWorkflowExtraInfoResponse
     */
    public function setWorkflowExtraInfo($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->setWorkflowExtraInfoWithOptions($request, $runtime);
    }

    /**
     * Skips the verification on the number of rows in the precheck for data change.
     *
     * @param request - SkipDataCorrectRowCheckRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SkipDataCorrectRowCheckResponse
     *
     * @param SkipDataCorrectRowCheckRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return SkipDataCorrectRowCheckResponse
     */
    public function skipDataCorrectRowCheckWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->reason) {
            @$query['Reason'] = $request->reason;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SkipDataCorrectRowCheck',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SkipDataCorrectRowCheckResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SkipDataCorrectRowCheckResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Skips the verification on the number of rows in the precheck for data change.
     *
     * @param request - SkipDataCorrectRowCheckRequest
     * @returns SkipDataCorrectRowCheckResponse
     *
     * @param SkipDataCorrectRowCheckRequest $request
     *
     * @return SkipDataCorrectRowCheckResponse
     */
    public function skipDataCorrectRowCheck($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->skipDataCorrectRowCheckWithOptions($request, $runtime);
    }

    /**
     * Stops a task flow instance.
     *
     * @param request - StopTaskFlowInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns StopTaskFlowInstanceResponse
     *
     * @param StopTaskFlowInstanceRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return StopTaskFlowInstanceResponse
     */
    public function stopTaskFlowInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagInstanceId) {
            @$query['DagInstanceId'] = $request->dagInstanceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'StopTaskFlowInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return StopTaskFlowInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return StopTaskFlowInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Stops a task flow instance.
     *
     * @param request - StopTaskFlowInstanceRequest
     * @returns StopTaskFlowInstanceResponse
     *
     * @param StopTaskFlowInstanceRequest $request
     *
     * @return StopTaskFlowInstanceResponse
     */
    public function stopTaskFlowInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->stopTaskFlowInstanceWithOptions($request, $runtime);
    }

    /**
     * Submits a ticket for approval.
     *
     * @param request - SubmitOrderApprovalRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubmitOrderApprovalResponse
     *
     * @param SubmitOrderApprovalRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return SubmitOrderApprovalResponse
     */
    public function submitOrderApprovalWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->realLoginUserUid) {
            @$query['RealLoginUserUid'] = $request->realLoginUserUid;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SubmitOrderApproval',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SubmitOrderApprovalResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SubmitOrderApprovalResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Submits a ticket for approval.
     *
     * @param request - SubmitOrderApprovalRequest
     * @returns SubmitOrderApprovalResponse
     *
     * @param SubmitOrderApprovalRequest $request
     *
     * @return SubmitOrderApprovalResponse
     */
    public function submitOrderApproval($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->submitOrderApprovalWithOptions($request, $runtime);
    }

    /**
     * Submits a schema synchronization ticket for approval.
     *
     * @param request - SubmitStructSyncOrderApprovalRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SubmitStructSyncOrderApprovalResponse
     *
     * @param SubmitStructSyncOrderApprovalRequest $request
     * @param RuntimeOptions                       $runtime
     *
     * @return SubmitStructSyncOrderApprovalResponse
     */
    public function submitStructSyncOrderApprovalWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SubmitStructSyncOrderApproval',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SubmitStructSyncOrderApprovalResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SubmitStructSyncOrderApprovalResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Submits a schema synchronization ticket for approval.
     *
     * @param request - SubmitStructSyncOrderApprovalRequest
     * @returns SubmitStructSyncOrderApprovalResponse
     *
     * @param SubmitStructSyncOrderApprovalRequest $request
     *
     * @return SubmitStructSyncOrderApprovalResponse
     */
    public function submitStructSyncOrderApproval($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->submitStructSyncOrderApprovalWithOptions($request, $runtime);
    }

    /**
     * 中断数据导出任务
     *
     * @param request - SuspendDataExportJobRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SuspendDataExportJobResponse
     *
     * @param SuspendDataExportJobRequest $request
     * @param RuntimeOptions              $runtime
     *
     * @return SuspendDataExportJobResponse
     */
    public function suspendDataExportJobWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->jobId) {
            @$query['JobId'] = $request->jobId;
        }

        if (null !== $request->orderId) {
            @$query['OrderId'] = $request->orderId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SuspendDataExportJob',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SuspendDataExportJobResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SuspendDataExportJobResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 中断数据导出任务
     *
     * @param request - SuspendDataExportJobRequest
     * @returns SuspendDataExportJobResponse
     *
     * @param SuspendDataExportJobRequest $request
     *
     * @return SuspendDataExportJobResponse
     */
    public function suspendDataExportJob($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->suspendDataExportJobWithOptions($request, $runtime);
    }

    /**
     * Suspends a task flow instance.
     *
     * @param request - SuspendTaskFlowInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SuspendTaskFlowInstanceResponse
     *
     * @param SuspendTaskFlowInstanceRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return SuspendTaskFlowInstanceResponse
     */
    public function suspendTaskFlowInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagInstanceId) {
            @$query['DagInstanceId'] = $request->dagInstanceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SuspendTaskFlowInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SuspendTaskFlowInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SuspendTaskFlowInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Suspends a task flow instance.
     *
     * @param request - SuspendTaskFlowInstanceRequest
     * @returns SuspendTaskFlowInstanceResponse
     *
     * @param SuspendTaskFlowInstanceRequest $request
     *
     * @return SuspendTaskFlowInstanceResponse
     */
    public function suspendTaskFlowInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->suspendTaskFlowInstanceWithOptions($request, $runtime);
    }

    /**
     * Synchronizes the metadata of a database.
     *
     * @param request - SyncDatabaseMetaRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SyncDatabaseMetaResponse
     *
     * @param SyncDatabaseMetaRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return SyncDatabaseMetaResponse
     */
    public function syncDatabaseMetaWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dbId) {
            @$query['DbId'] = $request->dbId;
        }

        if (null !== $request->logic) {
            @$query['Logic'] = $request->logic;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SyncDatabaseMeta',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SyncDatabaseMetaResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SyncDatabaseMetaResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Synchronizes the metadata of a database.
     *
     * @param request - SyncDatabaseMetaRequest
     * @returns SyncDatabaseMetaResponse
     *
     * @param SyncDatabaseMetaRequest $request
     *
     * @return SyncDatabaseMetaResponse
     */
    public function syncDatabaseMeta($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->syncDatabaseMetaWithOptions($request, $runtime);
    }

    /**
     * Synchronizes the metadata of all databases in a database instance.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - SyncInstanceMetaRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns SyncInstanceMetaResponse
     *
     * @param SyncInstanceMetaRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return SyncInstanceMetaResponse
     */
    public function syncInstanceMetaWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->ignoreTable) {
            @$query['IgnoreTable'] = $request->ignoreTable;
        }

        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'SyncInstanceMeta',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return SyncInstanceMetaResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return SyncInstanceMetaResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Synchronizes the metadata of all databases in a database instance.
     *
     * @remarks
     * You can call this operation only for database instances whose control mode is Security Collaboration.
     *
     * @param request - SyncInstanceMetaRequest
     * @returns SyncInstanceMetaResponse
     *
     * @param SyncInstanceMetaRequest $request
     *
     * @return SyncInstanceMetaResponse
     */
    public function syncInstanceMeta($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->syncInstanceMetaWithOptions($request, $runtime);
    }

    /**
     * 更新权限策略.
     *
     * @param request - UpdateAbacPolicyRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateAbacPolicyResponse
     *
     * @param UpdateAbacPolicyRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return UpdateAbacPolicyResponse
     */
    public function updateAbacPolicyWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->abacPolicyContent) {
            @$query['AbacPolicyContent'] = $request->abacPolicyContent;
        }

        if (null !== $request->abacPolicyDesc) {
            @$query['AbacPolicyDesc'] = $request->abacPolicyDesc;
        }

        if (null !== $request->abacPolicyId) {
            @$query['AbacPolicyId'] = $request->abacPolicyId;
        }

        if (null !== $request->abacPolicyName) {
            @$query['AbacPolicyName'] = $request->abacPolicyName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateAbacPolicy',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateAbacPolicyResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateAbacPolicyResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 更新权限策略.
     *
     * @param request - UpdateAbacPolicyRequest
     * @returns UpdateAbacPolicyResponse
     *
     * @param UpdateAbacPolicyRequest $request
     *
     * @return UpdateAbacPolicyResponse
     */
    public function updateAbacPolicy($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateAbacPolicyWithOptions($request, $runtime);
    }

    /**
     * Modifies a permission template.
     *
     * @remarks
     * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - UpdateAuthorityTemplateRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateAuthorityTemplateResponse
     *
     * @param UpdateAuthorityTemplateRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return UpdateAuthorityTemplateResponse
     */
    public function updateAuthorityTemplateWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->name) {
            @$query['Name'] = $request->name;
        }

        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateAuthorityTemplate',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateAuthorityTemplateResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateAuthorityTemplateResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Modifies a permission template.
     *
     * @remarks
     * You are a database administrator (DBA) or a Data Management (DMS) administrator. For more information about how to view system roles, see [View system roles](https://help.aliyun.com/document_detail/324212.html).
     *
     * @param request - UpdateAuthorityTemplateRequest
     * @returns UpdateAuthorityTemplateResponse
     *
     * @param UpdateAuthorityTemplateRequest $request
     *
     * @return UpdateAuthorityTemplateResponse
     */
    public function updateAuthorityTemplate($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateAuthorityTemplateWithOptions($request, $runtime);
    }

    /**
     * 更新湖仓数据库.
     *
     * @param tmpReq - UpdateDataLakeDatabaseRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateDataLakeDatabaseResponse
     *
     * @param UpdateDataLakeDatabaseRequest $tmpReq
     * @param RuntimeOptions                $runtime
     *
     * @return UpdateDataLakeDatabaseResponse
     */
    public function updateDataLakeDatabaseWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateDataLakeDatabaseShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->parameters) {
            $request->parametersShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->parameters, 'Parameters', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->location) {
            @$query['Location'] = $request->location;
        }

        if (null !== $request->parametersShrink) {
            @$query['Parameters'] = $request->parametersShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateDataLakeDatabase',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateDataLakeDatabaseResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateDataLakeDatabaseResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 更新湖仓数据库.
     *
     * @param request - UpdateDataLakeDatabaseRequest
     * @returns UpdateDataLakeDatabaseResponse
     *
     * @param UpdateDataLakeDatabaseRequest $request
     *
     * @return UpdateDataLakeDatabaseResponse
     */
    public function updateDataLakeDatabase($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateDataLakeDatabaseWithOptions($request, $runtime);
    }

    /**
     * 更新湖仓表分区.
     *
     * @param tmpReq - UpdateDataLakePartitionRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateDataLakePartitionResponse
     *
     * @param UpdateDataLakePartitionRequest $tmpReq
     * @param RuntimeOptions                 $runtime
     *
     * @return UpdateDataLakePartitionResponse
     */
    public function updateDataLakePartitionWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateDataLakePartitionShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->partitionInput) {
            $request->partitionInputShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->partitionInput, 'PartitionInput', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->tableName) {
            @$query['TableName'] = $request->tableName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->partitionInputShrink) {
            @$body['PartitionInput'] = $request->partitionInputShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'UpdateDataLakePartition',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateDataLakePartitionResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateDataLakePartitionResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 更新湖仓表分区.
     *
     * @param request - UpdateDataLakePartitionRequest
     * @returns UpdateDataLakePartitionResponse
     *
     * @param UpdateDataLakePartitionRequest $request
     *
     * @return UpdateDataLakePartitionResponse
     */
    public function updateDataLakePartition($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateDataLakePartitionWithOptions($request, $runtime);
    }

    /**
     * 更新湖仓表信息.
     *
     * @param tmpReq - UpdateDataLakeTableRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateDataLakeTableResponse
     *
     * @param UpdateDataLakeTableRequest $tmpReq
     * @param RuntimeOptions             $runtime
     *
     * @return UpdateDataLakeTableResponse
     */
    public function updateDataLakeTableWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateDataLakeTableShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->tableInput) {
            $request->tableInputShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->tableInput, 'TableInput', 'json');
        }

        $query = [];
        if (null !== $request->catalogName) {
            @$query['CatalogName'] = $request->catalogName;
        }

        if (null !== $request->dataRegion) {
            @$query['DataRegion'] = $request->dataRegion;
        }

        if (null !== $request->dbName) {
            @$query['DbName'] = $request->dbName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $body = [];
        if (null !== $request->tableInputShrink) {
            @$body['TableInput'] = $request->tableInputShrink;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
            'body'  => Utils::parseToMap($body),
        ]);
        $params = new Params([
            'action'      => 'UpdateDataLakeTable',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateDataLakeTableResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateDataLakeTableResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * 更新湖仓表信息.
     *
     * @param request - UpdateDataLakeTableRequest
     * @returns UpdateDataLakeTableResponse
     *
     * @param UpdateDataLakeTableRequest $request
     *
     * @return UpdateDataLakeTableResponse
     */
    public function updateDataLakeTable($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateDataLakeTableWithOptions($request, $runtime);
    }

    /**
     * Updates the information about a database instance and checks the connectivity of the database instance.
     *
     * @remarks
     * Before you call the UpdateInstance operation, call the [GetInstance](https://help.aliyun.com/document_detail/141567.html) or [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the complete information about the instance.
     *
     * @param request - UpdateInstanceRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateInstanceResponse
     *
     * @param UpdateInstanceRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return UpdateInstanceResponse
     */
    public function updateInstanceWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dataLinkName) {
            @$query['DataLinkName'] = $request->dataLinkName;
        }

        if (null !== $request->databasePassword) {
            @$query['DatabasePassword'] = $request->databasePassword;
        }

        if (null !== $request->databaseUser) {
            @$query['DatabaseUser'] = $request->databaseUser;
        }

        if (null !== $request->dbaId) {
            @$query['DbaId'] = $request->dbaId;
        }

        if (null !== $request->ddlOnline) {
            @$query['DdlOnline'] = $request->ddlOnline;
        }

        if (null !== $request->ecsInstanceId) {
            @$query['EcsInstanceId'] = $request->ecsInstanceId;
        }

        if (null !== $request->ecsRegion) {
            @$query['EcsRegion'] = $request->ecsRegion;
        }

        if (null !== $request->enableSellSitd) {
            @$query['EnableSellSitd'] = $request->enableSellSitd;
        }

        if (null !== $request->envType) {
            @$query['EnvType'] = $request->envType;
        }

        if (null !== $request->exportTimeout) {
            @$query['ExportTimeout'] = $request->exportTimeout;
        }

        if (null !== $request->host) {
            @$query['Host'] = $request->host;
        }

        if (null !== $request->instanceAlias) {
            @$query['InstanceAlias'] = $request->instanceAlias;
        }

        if (null !== $request->instanceId) {
            @$query['InstanceId'] = $request->instanceId;
        }

        if (null !== $request->instanceSource) {
            @$query['InstanceSource'] = $request->instanceSource;
        }

        if (null !== $request->instanceType) {
            @$query['InstanceType'] = $request->instanceType;
        }

        if (null !== $request->port) {
            @$query['Port'] = $request->port;
        }

        if (null !== $request->queryTimeout) {
            @$query['QueryTimeout'] = $request->queryTimeout;
        }

        if (null !== $request->safeRuleId) {
            @$query['SafeRuleId'] = $request->safeRuleId;
        }

        if (null !== $request->sid) {
            @$query['Sid'] = $request->sid;
        }

        if (null !== $request->skipTest) {
            @$query['SkipTest'] = $request->skipTest;
        }

        if (null !== $request->templateId) {
            @$query['TemplateId'] = $request->templateId;
        }

        if (null !== $request->templateType) {
            @$query['TemplateType'] = $request->templateType;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->useDsql) {
            @$query['UseDsql'] = $request->useDsql;
        }

        if (null !== $request->vpcId) {
            @$query['VpcId'] = $request->vpcId;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateInstance',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateInstanceResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateInstanceResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the information about a database instance and checks the connectivity of the database instance.
     *
     * @remarks
     * Before you call the UpdateInstance operation, call the [GetInstance](https://help.aliyun.com/document_detail/141567.html) or [ListInstances](https://help.aliyun.com/document_detail/141936.html) operation to obtain the complete information about the instance.
     *
     * @param request - UpdateInstanceRequest
     * @returns UpdateInstanceResponse
     *
     * @param UpdateInstanceRequest $request
     *
     * @return UpdateInstanceResponse
     */
    public function updateInstance($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateInstanceWithOptions($request, $runtime);
    }

    /**
     * Updates the service level agreement (SLA) timeout reminder for a task flow.
     *
     * @remarks
     * SLA rules take effect after task flows are deployed and published.
     *
     * @param tmpReq - UpdateSLARulesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateSLARulesResponse
     *
     * @param UpdateSLARulesRequest $tmpReq
     * @param RuntimeOptions        $runtime
     *
     * @return UpdateSLARulesResponse
     */
    public function updateSLARulesWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateSLARulesShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->slaRuleList) {
            $request->slaRuleListShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->slaRuleList, 'SlaRuleList', 'json');
        }

        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->slaRuleListShrink) {
            @$query['SlaRuleList'] = $request->slaRuleListShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateSLARules',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateSLARulesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateSLARulesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the service level agreement (SLA) timeout reminder for a task flow.
     *
     * @remarks
     * SLA rules take effect after task flows are deployed and published.
     *
     * @param request - UpdateSLARulesRequest
     * @returns UpdateSLARulesResponse
     *
     * @param UpdateSLARulesRequest $request
     *
     * @return UpdateSLARulesResponse
     */
    public function updateSLARules($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateSLARulesWithOptions($request, $runtime);
    }

    /**
     * Updates the name and description of the business scenario for a specified task flow.
     *
     * @param request - UpdateScenarioRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateScenarioResponse
     *
     * @param UpdateScenarioRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return UpdateScenarioResponse
     */
    public function updateScenarioWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->scenarioId) {
            @$query['ScenarioId'] = $request->scenarioId;
        }

        if (null !== $request->scenarioName) {
            @$query['ScenarioName'] = $request->scenarioName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateScenario',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateScenarioResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateScenarioResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the name and description of the business scenario for a specified task flow.
     *
     * @param request - UpdateScenarioRequest
     * @returns UpdateScenarioResponse
     *
     * @param UpdateScenarioRequest $request
     *
     * @return UpdateScenarioResponse
     */
    public function updateScenario($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateScenarioWithOptions($request, $runtime);
    }

    /**
     * Modifies the name and description of a specific security rule set.
     *
     * @param request - UpdateStandardGroupRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateStandardGroupResponse
     *
     * @param UpdateStandardGroupRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return UpdateStandardGroupResponse
     */
    public function updateStandardGroupWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->groupId) {
            @$query['GroupId'] = $request->groupId;
        }

        if (null !== $request->groupName) {
            @$query['GroupName'] = $request->groupName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateStandardGroup',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateStandardGroupResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateStandardGroupResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Modifies the name and description of a specific security rule set.
     *
     * @param request - UpdateStandardGroupRequest
     * @returns UpdateStandardGroupResponse
     *
     * @param UpdateStandardGroupRequest $request
     *
     * @return UpdateStandardGroupResponse
     */
    public function updateStandardGroup($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateStandardGroupWithOptions($request, $runtime);
    }

    /**
     * Updates the advanced configuration of a task node.
     *
     * @remarks
     * You can call this operation to configure a failed task or rerun a task.
     *
     * @param request - UpdateTaskConfigRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskConfigResponse
     *
     * @param UpdateTaskConfigRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return UpdateTaskConfigResponse
     */
    public function updateTaskConfigWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->nodeConfig) {
            @$query['NodeConfig'] = $request->nodeConfig;
        }

        if (null !== $request->nodeId) {
            @$query['NodeId'] = $request->nodeId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskConfig',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskConfigResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskConfigResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the advanced configuration of a task node.
     *
     * @remarks
     * You can call this operation to configure a failed task or rerun a task.
     *
     * @param request - UpdateTaskConfigRequest
     * @returns UpdateTaskConfigResponse
     *
     * @param UpdateTaskConfigRequest $request
     *
     * @return UpdateTaskConfigResponse
     */
    public function updateTaskConfig($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskConfigWithOptions($request, $runtime);
    }

    /**
     * Updates tasks in a task flow.
     *
     * @remarks
     * You can call this operation to modify node configurations.
     *
     * @param request - UpdateTaskContentRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskContentResponse
     *
     * @param UpdateTaskContentRequest $request
     * @param RuntimeOptions           $runtime
     *
     * @return UpdateTaskContentResponse
     */
    public function updateTaskContentWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->nodeContent) {
            @$query['NodeContent'] = $request->nodeContent;
        }

        if (null !== $request->nodeId) {
            @$query['NodeId'] = $request->nodeId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskContent',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskContentResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskContentResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates tasks in a task flow.
     *
     * @remarks
     * You can call this operation to modify node configurations.
     *
     * @param request - UpdateTaskContentRequest
     * @returns UpdateTaskContentResponse
     *
     * @param UpdateTaskContentRequest $request
     *
     * @return UpdateTaskContentResponse
     */
    public function updateTaskContent($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskContentWithOptions($request, $runtime);
    }

    /**
     * Updates the constants for a specified task flow.
     *
     * @param tmpReq - UpdateTaskFlowConstantsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowConstantsResponse
     *
     * @param UpdateTaskFlowConstantsRequest $tmpReq
     * @param RuntimeOptions                 $runtime
     *
     * @return UpdateTaskFlowConstantsResponse
     */
    public function updateTaskFlowConstantsWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateTaskFlowConstantsShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->dagConstants) {
            $request->dagConstantsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->dagConstants, 'DagConstants', 'json');
        }

        $query = [];
        if (null !== $request->dagConstantsShrink) {
            @$query['DagConstants'] = $request->dagConstantsShrink;
        }

        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowConstants',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowConstantsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowConstantsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the constants for a specified task flow.
     *
     * @param request - UpdateTaskFlowConstantsRequest
     * @returns UpdateTaskFlowConstantsResponse
     *
     * @param UpdateTaskFlowConstantsRequest $request
     *
     * @return UpdateTaskFlowConstantsResponse
     */
    public function updateTaskFlowConstants($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowConstantsWithOptions($request, $runtime);
    }

    /**
     * Updates the IDs of the users who are involved in the task flow.
     *
     * @param tmpReq - UpdateTaskFlowCooperatorsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowCooperatorsResponse
     *
     * @param UpdateTaskFlowCooperatorsRequest $tmpReq
     * @param RuntimeOptions                   $runtime
     *
     * @return UpdateTaskFlowCooperatorsResponse
     */
    public function updateTaskFlowCooperatorsWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateTaskFlowCooperatorsShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->cooperatorIds) {
            $request->cooperatorIdsShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->cooperatorIds, 'CooperatorIds', 'json');
        }

        $query = [];
        if (null !== $request->cooperatorIdsShrink) {
            @$query['CooperatorIds'] = $request->cooperatorIdsShrink;
        }

        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowCooperators',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowCooperatorsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowCooperatorsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the IDs of the users who are involved in the task flow.
     *
     * @param request - UpdateTaskFlowCooperatorsRequest
     * @returns UpdateTaskFlowCooperatorsResponse
     *
     * @param UpdateTaskFlowCooperatorsRequest $request
     *
     * @return UpdateTaskFlowCooperatorsResponse
     */
    public function updateTaskFlowCooperators($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowCooperatorsWithOptions($request, $runtime);
    }

    /**
     * Updates the start node and end node of multiple edges at a time for a task flow.
     *
     * @remarks
     * ###
     * The edges can be updated only when the following conditions are met:
     * 1.  The specified edge exists in the directed acyclic graph (DAG) of the task flow specified by DagId.
     * 2.  The specified edge nodes exist in the DAG of the task flow specified by DagId.
     * 3.  After the update, rings do not exist in the DAG.
     *
     * @param tmpReq - UpdateTaskFlowEdgesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowEdgesResponse
     *
     * @param UpdateTaskFlowEdgesRequest $tmpReq
     * @param RuntimeOptions             $runtime
     *
     * @return UpdateTaskFlowEdgesResponse
     */
    public function updateTaskFlowEdgesWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateTaskFlowEdgesShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->edges) {
            $request->edgesShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->edges, 'Edges', 'json');
        }

        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->edgesShrink) {
            @$query['Edges'] = $request->edgesShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowEdges',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowEdgesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowEdgesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the start node and end node of multiple edges at a time for a task flow.
     *
     * @remarks
     * ###
     * The edges can be updated only when the following conditions are met:
     * 1.  The specified edge exists in the directed acyclic graph (DAG) of the task flow specified by DagId.
     * 2.  The specified edge nodes exist in the DAG of the task flow specified by DagId.
     * 3.  After the update, rings do not exist in the DAG.
     *
     * @param request - UpdateTaskFlowEdgesRequest
     * @returns UpdateTaskFlowEdgesResponse
     *
     * @param UpdateTaskFlowEdgesRequest $request
     *
     * @return UpdateTaskFlowEdgesResponse
     */
    public function updateTaskFlowEdges($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowEdgesWithOptions($request, $runtime);
    }

    /**
     * Updates the name and description of a task flow.
     *
     * @param request - UpdateTaskFlowNameAndDescRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowNameAndDescResponse
     *
     * @param UpdateTaskFlowNameAndDescRequest $request
     * @param RuntimeOptions                   $runtime
     *
     * @return UpdateTaskFlowNameAndDescResponse
     */
    public function updateTaskFlowNameAndDescWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagName) {
            @$query['DagName'] = $request->dagName;
        }

        if (null !== $request->description) {
            @$query['Description'] = $request->description;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowNameAndDesc',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowNameAndDescResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowNameAndDescResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the name and description of a task flow.
     *
     * @param request - UpdateTaskFlowNameAndDescRequest
     * @returns UpdateTaskFlowNameAndDescResponse
     *
     * @param UpdateTaskFlowNameAndDescRequest $request
     *
     * @return UpdateTaskFlowNameAndDescResponse
     */
    public function updateTaskFlowNameAndDesc($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowNameAndDescWithOptions($request, $runtime);
    }

    /**
     * Updates the notification settings for task flows.
     *
     * @param request - UpdateTaskFlowNotificationRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowNotificationResponse
     *
     * @param UpdateTaskFlowNotificationRequest $request
     * @param RuntimeOptions                    $runtime
     *
     * @return UpdateTaskFlowNotificationResponse
     */
    public function updateTaskFlowNotificationWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->dagNotificationFail) {
            @$query['DagNotificationFail'] = $request->dagNotificationFail;
        }

        if (null !== $request->dagNotificationSla) {
            @$query['DagNotificationSla'] = $request->dagNotificationSla;
        }

        if (null !== $request->dagNotificationSuccess) {
            @$query['DagNotificationSuccess'] = $request->dagNotificationSuccess;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowNotification',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowNotificationResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowNotificationResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the notification settings for task flows.
     *
     * @param request - UpdateTaskFlowNotificationRequest
     * @returns UpdateTaskFlowNotificationResponse
     *
     * @param UpdateTaskFlowNotificationRequest $request
     *
     * @return UpdateTaskFlowNotificationResponse
     */
    public function updateTaskFlowNotification($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowNotificationWithOptions($request, $runtime);
    }

    /**
     * Changes the owner of a task flow.
     *
     * @remarks
     * Note: The new owner of the task flow must belong to the same tenant as the previous owner.
     *
     * @param request - UpdateTaskFlowOwnerRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowOwnerResponse
     *
     * @param UpdateTaskFlowOwnerRequest $request
     * @param RuntimeOptions             $runtime
     *
     * @return UpdateTaskFlowOwnerResponse
     */
    public function updateTaskFlowOwnerWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->newOwnerId) {
            @$query['NewOwnerId'] = $request->newOwnerId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowOwner',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowOwnerResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowOwnerResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Changes the owner of a task flow.
     *
     * @remarks
     * Note: The new owner of the task flow must belong to the same tenant as the previous owner.
     *
     * @param request - UpdateTaskFlowOwnerRequest
     * @returns UpdateTaskFlowOwnerResponse
     *
     * @param UpdateTaskFlowOwnerRequest $request
     *
     * @return UpdateTaskFlowOwnerResponse
     */
    public function updateTaskFlowOwner($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowOwnerWithOptions($request, $runtime);
    }

    /**
     * Fully updates the edges of a task flow.
     *
     * @remarks
     * You can call this operation to perform a full update. For incremental updates, see AddTaskFlowEdges, UpdateTaskFlowEdges, and DeleteTaskFlowEdgesByMultiCondition.
     *
     * @param tmpReq - UpdateTaskFlowRelationsRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowRelationsResponse
     *
     * @param UpdateTaskFlowRelationsRequest $tmpReq
     * @param RuntimeOptions                 $runtime
     *
     * @return UpdateTaskFlowRelationsResponse
     */
    public function updateTaskFlowRelationsWithOptions($tmpReq, $runtime)
    {
        $tmpReq->validate();
        $request = new UpdateTaskFlowRelationsShrinkRequest([]);
        Utils::convert($tmpReq, $request);
        if (null !== $tmpReq->edges) {
            $request->edgesShrink = Utils::arrayToStringWithSpecifiedStyle($tmpReq->edges, 'Edges', 'json');
        }

        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->edgesShrink) {
            @$query['Edges'] = $request->edgesShrink;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowRelations',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowRelationsResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowRelationsResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Fully updates the edges of a task flow.
     *
     * @remarks
     * You can call this operation to perform a full update. For incremental updates, see AddTaskFlowEdges, UpdateTaskFlowEdges, and DeleteTaskFlowEdgesByMultiCondition.
     *
     * @param request - UpdateTaskFlowRelationsRequest
     * @returns UpdateTaskFlowRelationsResponse
     *
     * @param UpdateTaskFlowRelationsRequest $request
     *
     * @return UpdateTaskFlowRelationsResponse
     */
    public function updateTaskFlowRelations($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowRelationsWithOptions($request, $runtime);
    }

    /**
     * Updates the scheduling properties for a task flow.
     *
     * @remarks
     * You can call this operation to update the scheduling properties for a task flow in the editing state. You can configure a **timed scheduling** task flow or an **event scheduling** task flow. When you configure a **timed scheduling** task flow, you can choose from one-time scheduling or periodic scheduling. When you configure an **event scheduling** task flow, you can subscribe to task flows or task flow nodes.****\\
     * After you update the scheduling properties, you need to publish and deploy the task flow again. The new task flow instance will run based on the updated scheduling properties.
     *
     * @param request - UpdateTaskFlowScheduleRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowScheduleResponse
     *
     * @param UpdateTaskFlowScheduleRequest $request
     * @param RuntimeOptions                $runtime
     *
     * @return UpdateTaskFlowScheduleResponse
     */
    public function updateTaskFlowScheduleWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->cronBeginDate) {
            @$query['CronBeginDate'] = $request->cronBeginDate;
        }

        if (null !== $request->cronEndDate) {
            @$query['CronEndDate'] = $request->cronEndDate;
        }

        if (null !== $request->cronStr) {
            @$query['CronStr'] = $request->cronStr;
        }

        if (null !== $request->cronType) {
            @$query['CronType'] = $request->cronType;
        }

        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->scheduleParam) {
            @$query['ScheduleParam'] = $request->scheduleParam;
        }

        if (null !== $request->scheduleSwitch) {
            @$query['ScheduleSwitch'] = $request->scheduleSwitch;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->timeZoneId) {
            @$query['TimeZoneId'] = $request->timeZoneId;
        }

        if (null !== $request->triggerType) {
            @$query['TriggerType'] = $request->triggerType;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowSchedule',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowScheduleResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowScheduleResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the scheduling properties for a task flow.
     *
     * @remarks
     * You can call this operation to update the scheduling properties for a task flow in the editing state. You can configure a **timed scheduling** task flow or an **event scheduling** task flow. When you configure a **timed scheduling** task flow, you can choose from one-time scheduling or periodic scheduling. When you configure an **event scheduling** task flow, you can subscribe to task flows or task flow nodes.****\\
     * After you update the scheduling properties, you need to publish and deploy the task flow again. The new task flow instance will run based on the updated scheduling properties.
     *
     * @param request - UpdateTaskFlowScheduleRequest
     * @returns UpdateTaskFlowScheduleResponse
     *
     * @param UpdateTaskFlowScheduleRequest $request
     *
     * @return UpdateTaskFlowScheduleResponse
     */
    public function updateTaskFlowSchedule($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowScheduleWithOptions($request, $runtime);
    }

    /**
     * Updates the time variables for a task flow.
     *
     * @param request - UpdateTaskFlowTimeVariablesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskFlowTimeVariablesResponse
     *
     * @param UpdateTaskFlowTimeVariablesRequest $request
     * @param RuntimeOptions                     $runtime
     *
     * @return UpdateTaskFlowTimeVariablesResponse
     */
    public function updateTaskFlowTimeVariablesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->dagId) {
            @$query['DagId'] = $request->dagId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->timeVariables) {
            @$query['TimeVariables'] = $request->timeVariables;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskFlowTimeVariables',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskFlowTimeVariablesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskFlowTimeVariablesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the time variables for a task flow.
     *
     * @param request - UpdateTaskFlowTimeVariablesRequest
     * @returns UpdateTaskFlowTimeVariablesResponse
     *
     * @param UpdateTaskFlowTimeVariablesRequest $request
     *
     * @return UpdateTaskFlowTimeVariablesResponse
     */
    public function updateTaskFlowTimeVariables($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskFlowTimeVariablesWithOptions($request, $runtime);
    }

    /**
     * Updates the name of a specified task.
     *
     * @param request - UpdateTaskNameRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskNameResponse
     *
     * @param UpdateTaskNameRequest $request
     * @param RuntimeOptions        $runtime
     *
     * @return UpdateTaskNameResponse
     */
    public function updateTaskNameWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->nodeId) {
            @$query['NodeId'] = $request->nodeId;
        }

        if (null !== $request->nodeName) {
            @$query['NodeName'] = $request->nodeName;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskName',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskNameResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskNameResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the name of a specified task.
     *
     * @param request - UpdateTaskNameRequest
     * @returns UpdateTaskNameResponse
     *
     * @param UpdateTaskNameRequest $request
     *
     * @return UpdateTaskNameResponse
     */
    public function updateTaskName($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskNameWithOptions($request, $runtime);
    }

    /**
     * Updates the output variables for a specified task node.
     *
     * @remarks
     * Only nodes of single-instance SQL assignment, script code, and ECS remote command have output variables.
     *
     * @param request - UpdateTaskOutputRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskOutputResponse
     *
     * @param UpdateTaskOutputRequest $request
     * @param RuntimeOptions          $runtime
     *
     * @return UpdateTaskOutputResponse
     */
    public function updateTaskOutputWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->nodeId) {
            @$query['NodeId'] = $request->nodeId;
        }

        if (null !== $request->nodeOutput) {
            @$query['NodeOutput'] = $request->nodeOutput;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskOutput',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskOutputResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskOutputResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates the output variables for a specified task node.
     *
     * @remarks
     * Only nodes of single-instance SQL assignment, script code, and ECS remote command have output variables.
     *
     * @param request - UpdateTaskOutputRequest
     * @returns UpdateTaskOutputResponse
     *
     * @param UpdateTaskOutputRequest $request
     *
     * @return UpdateTaskOutputResponse
     */
    public function updateTaskOutput($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskOutputWithOptions($request, $runtime);
    }

    /**
     * Updates time variables for a task.
     *
     * @param request - UpdateTaskTimeVariablesRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateTaskTimeVariablesResponse
     *
     * @param UpdateTaskTimeVariablesRequest $request
     * @param RuntimeOptions                 $runtime
     *
     * @return UpdateTaskTimeVariablesResponse
     */
    public function updateTaskTimeVariablesWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->nodeId) {
            @$query['NodeId'] = $request->nodeId;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->timeVariables) {
            @$query['TimeVariables'] = $request->timeVariables;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateTaskTimeVariables',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateTaskTimeVariablesResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateTaskTimeVariablesResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates time variables for a task.
     *
     * @param request - UpdateTaskTimeVariablesRequest
     * @returns UpdateTaskTimeVariablesResponse
     *
     * @param UpdateTaskTimeVariablesRequest $request
     *
     * @return UpdateTaskTimeVariablesResponse
     */
    public function updateTaskTimeVariables($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateTaskTimeVariablesWithOptions($request, $runtime);
    }

    /**
     * Updates user information.
     *
     * @param request - UpdateUserRequest
     * @param runtime - runtime options for this request RuntimeOptions
     * @returns UpdateUserResponse
     *
     * @param UpdateUserRequest $request
     * @param RuntimeOptions    $runtime
     *
     * @return UpdateUserResponse
     */
    public function updateUserWithOptions($request, $runtime)
    {
        $request->validate();
        $query = [];
        if (null !== $request->maxExecuteCount) {
            @$query['MaxExecuteCount'] = $request->maxExecuteCount;
        }

        if (null !== $request->maxResultCount) {
            @$query['MaxResultCount'] = $request->maxResultCount;
        }

        if (null !== $request->mobile) {
            @$query['Mobile'] = $request->mobile;
        }

        if (null !== $request->roleNames) {
            @$query['RoleNames'] = $request->roleNames;
        }

        if (null !== $request->tid) {
            @$query['Tid'] = $request->tid;
        }

        if (null !== $request->uid) {
            @$query['Uid'] = $request->uid;
        }

        if (null !== $request->userNick) {
            @$query['UserNick'] = $request->userNick;
        }

        $req = new OpenApiRequest([
            'query' => Utils::query($query),
        ]);
        $params = new Params([
            'action'      => 'UpdateUser',
            'version'     => '2018-11-01',
            'protocol'    => 'HTTPS',
            'pathname'    => '/',
            'method'      => 'POST',
            'authType'    => 'AK',
            'style'       => 'RPC',
            'reqBodyType' => 'formData',
            'bodyType'    => 'json',
        ]);
        if (null === $this->_signatureVersion || 'v4' != $this->_signatureVersion) {
            return UpdateUserResponse::fromMap($this->callApi($params, $req, $runtime));
        }

        return UpdateUserResponse::fromMap($this->execute($params, $req, $runtime));
    }

    /**
     * Updates user information.
     *
     * @param request - UpdateUserRequest
     * @returns UpdateUserResponse
     *
     * @param UpdateUserRequest $request
     *
     * @return UpdateUserResponse
     */
    public function updateUser($request)
    {
        $runtime = new RuntimeOptions([]);

        return $this->updateUserWithOptions($request, $runtime);
    }
}
