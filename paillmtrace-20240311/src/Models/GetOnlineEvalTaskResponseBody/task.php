<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\PaiLLMTrace\V20240311\Models\GetOnlineEvalTaskResponseBody;

use AlibabaCloud\SDK\PaiLLMTrace\V20240311\Models\EvaluationConfig;
use AlibabaCloud\SDK\PaiLLMTrace\V20240311\Models\GetOnlineEvalTaskResponseBody\task\filters;
use AlibabaCloud\SDK\PaiLLMTrace\V20240311\Models\ModelConfig;
use AlibabaCloud\Tea\Model;

class task extends Model
{
    /**
     * @description The Alibaba Cloud account (primary account) of the task creator.
     *
     * @example 1195531608511111
     *
     * @var string
     */
    public $aliyunUid;

    /**
     * @description The name of the user application targeted by this task.
     *
     * @example my-llm-app
     *
     * @var string
     */
    public $appName;

    /**
     * @description Task description information
     *
     * @example 这个任务做了这些事。
     *
     * @var string
     */
    public $description;

    /**
     * @description Deprecated. Will be removed.
     *
     * @example Deprecated. Will be removed.
     *
     * @var string
     */
    public $evalResults;

    /**
     * @description Extract specific path values from JSON-formatted trace data as input for the evaluation operation. These JSON paths are defined within this EvaluationConfig structure.
     *
     * @var EvaluationConfig
     */
    public $evaluationConfig;

    /**
     * @description The evaluation task needs to search for a certain amount of trace data generated by the user application as input data for the evaluation operation. This is a list that defines the search filter conditions.
     *
     * @var filters[]
     */
    public $filters;

    /**
     * @description UTC creation time of the task.
     *
     * @example 2024-07-31 08:30:00
     *
     * @var string
     */
    public $gmtCreateTime;

    /**
     * @description UTC end time of the trace data.
     *
     * @example 2024-08-10 13:20:00
     *
     * @var string
     */
    public $gmtEndTime;

    /**
     * @description UTC upper bound of the last sampling window
     *
     * @example 2024-08-10 13:14:00
     *
     * @var string
     */
    public $gmtLastSamplingWindowEndTime;

    /**
     * @description UTC lower bound of the last sampling window.
     *
     * @example 2024-08-10 13:11:00
     *
     * @var string
     */
    public $gmtLastSamplingWindowStartTime;

    /**
     * @description UTC start time of the trace data.
     *
     * @example 2024-08-02
     *
     * @var string
     */
    public $gmtStartTime;

    /**
     * @description Task ID
     *
     * @example 0839a02d-aa24-4174-90bb-7a773885934d
     *
     * @var string
     */
    public $id;

    /**
     * @description Access configuration structure for the large model used internally by the evaluation task.
     *
     * @var ModelConfig
     */
    public $modelConfig;

    /**
     * @description Task name.
     *
     * @example my-eval-task-1
     *
     * @var string
     */
    public $name;

    /**
     * @description Number of evaluation records
     *
     * @example 999
     *
     * @var int
     */
    public $recordCount;

    /**
     * @description The evaluation task needs to search for a certain amount of trace data generated by the user application as input data for the evaluation operation. This defines the width of the time window for each search of input data.
     *
     * @example 3
     *
     * @var int
     */
    public $samplingFrequencyMinutes;

    /**
     * @description The percentage of the data found within a time window that is actually used as input for the evaluation task. For example, 100 means all the found data is used as input, 20 means 20% of the found data is randomly selected as input.
     *
     * @example 70
     *
     * @var int
     */
    public $samplingRatio;

    /**
     * @description Task status
     *
     * @example CREATED
     * RUNNING
     * FINISHED
     * USER_CANCELED
     *
     * @var string
     */
    public $status;

    /**
     * @description The Alibaba Cloud sub-account of the task creator.
     *
     * @example 222222222222222222
     *
     * @var string
     */
    public $userId;
    protected $_name = [
        'aliyunUid' => 'AliyunUid',
        'appName' => 'AppName',
        'description' => 'Description',
        'evalResults' => 'EvalResults',
        'evaluationConfig' => 'EvaluationConfig',
        'filters' => 'Filters',
        'gmtCreateTime' => 'GmtCreateTime',
        'gmtEndTime' => 'GmtEndTime',
        'gmtLastSamplingWindowEndTime' => 'GmtLastSamplingWindowEndTime',
        'gmtLastSamplingWindowStartTime' => 'GmtLastSamplingWindowStartTime',
        'gmtStartTime' => 'GmtStartTime',
        'id' => 'Id',
        'modelConfig' => 'ModelConfig',
        'name' => 'Name',
        'recordCount' => 'RecordCount',
        'samplingFrequencyMinutes' => 'SamplingFrequencyMinutes',
        'samplingRatio' => 'SamplingRatio',
        'status' => 'Status',
        'userId' => 'UserId',
    ];

    public function validate() {}

    public function toMap()
    {
        $res = [];
        if (null !== $this->aliyunUid) {
            $res['AliyunUid'] = $this->aliyunUid;
        }
        if (null !== $this->appName) {
            $res['AppName'] = $this->appName;
        }
        if (null !== $this->description) {
            $res['Description'] = $this->description;
        }
        if (null !== $this->evalResults) {
            $res['EvalResults'] = $this->evalResults;
        }
        if (null !== $this->evaluationConfig) {
            $res['EvaluationConfig'] = null !== $this->evaluationConfig ? $this->evaluationConfig->toMap() : null;
        }
        if (null !== $this->filters) {
            $res['Filters'] = [];
            if (null !== $this->filters && \is_array($this->filters)) {
                $n = 0;
                foreach ($this->filters as $item) {
                    $res['Filters'][$n++] = null !== $item ? $item->toMap() : $item;
                }
            }
        }
        if (null !== $this->gmtCreateTime) {
            $res['GmtCreateTime'] = $this->gmtCreateTime;
        }
        if (null !== $this->gmtEndTime) {
            $res['GmtEndTime'] = $this->gmtEndTime;
        }
        if (null !== $this->gmtLastSamplingWindowEndTime) {
            $res['GmtLastSamplingWindowEndTime'] = $this->gmtLastSamplingWindowEndTime;
        }
        if (null !== $this->gmtLastSamplingWindowStartTime) {
            $res['GmtLastSamplingWindowStartTime'] = $this->gmtLastSamplingWindowStartTime;
        }
        if (null !== $this->gmtStartTime) {
            $res['GmtStartTime'] = $this->gmtStartTime;
        }
        if (null !== $this->id) {
            $res['Id'] = $this->id;
        }
        if (null !== $this->modelConfig) {
            $res['ModelConfig'] = null !== $this->modelConfig ? $this->modelConfig->toMap() : null;
        }
        if (null !== $this->name) {
            $res['Name'] = $this->name;
        }
        if (null !== $this->recordCount) {
            $res['RecordCount'] = $this->recordCount;
        }
        if (null !== $this->samplingFrequencyMinutes) {
            $res['SamplingFrequencyMinutes'] = $this->samplingFrequencyMinutes;
        }
        if (null !== $this->samplingRatio) {
            $res['SamplingRatio'] = $this->samplingRatio;
        }
        if (null !== $this->status) {
            $res['Status'] = $this->status;
        }
        if (null !== $this->userId) {
            $res['UserId'] = $this->userId;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return task
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['AliyunUid'])) {
            $model->aliyunUid = $map['AliyunUid'];
        }
        if (isset($map['AppName'])) {
            $model->appName = $map['AppName'];
        }
        if (isset($map['Description'])) {
            $model->description = $map['Description'];
        }
        if (isset($map['EvalResults'])) {
            $model->evalResults = $map['EvalResults'];
        }
        if (isset($map['EvaluationConfig'])) {
            $model->evaluationConfig = EvaluationConfig::fromMap($map['EvaluationConfig']);
        }
        if (isset($map['Filters'])) {
            if (!empty($map['Filters'])) {
                $model->filters = [];
                $n = 0;
                foreach ($map['Filters'] as $item) {
                    $model->filters[$n++] = null !== $item ? filters::fromMap($item) : $item;
                }
            }
        }
        if (isset($map['GmtCreateTime'])) {
            $model->gmtCreateTime = $map['GmtCreateTime'];
        }
        if (isset($map['GmtEndTime'])) {
            $model->gmtEndTime = $map['GmtEndTime'];
        }
        if (isset($map['GmtLastSamplingWindowEndTime'])) {
            $model->gmtLastSamplingWindowEndTime = $map['GmtLastSamplingWindowEndTime'];
        }
        if (isset($map['GmtLastSamplingWindowStartTime'])) {
            $model->gmtLastSamplingWindowStartTime = $map['GmtLastSamplingWindowStartTime'];
        }
        if (isset($map['GmtStartTime'])) {
            $model->gmtStartTime = $map['GmtStartTime'];
        }
        if (isset($map['Id'])) {
            $model->id = $map['Id'];
        }
        if (isset($map['ModelConfig'])) {
            $model->modelConfig = ModelConfig::fromMap($map['ModelConfig']);
        }
        if (isset($map['Name'])) {
            $model->name = $map['Name'];
        }
        if (isset($map['RecordCount'])) {
            $model->recordCount = $map['RecordCount'];
        }
        if (isset($map['SamplingFrequencyMinutes'])) {
            $model->samplingFrequencyMinutes = $map['SamplingFrequencyMinutes'];
        }
        if (isset($map['SamplingRatio'])) {
            $model->samplingRatio = $map['SamplingRatio'];
        }
        if (isset($map['Status'])) {
            $model->status = $map['Status'];
        }
        if (isset($map['UserId'])) {
            $model->userId = $map['UserId'];
        }

        return $model;
    }
}
