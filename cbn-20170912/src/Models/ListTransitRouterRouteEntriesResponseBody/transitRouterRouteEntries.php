<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Cbn\V20170912\Models\ListTransitRouterRouteEntriesResponseBody;

use AlibabaCloud\SDK\Cbn\V20170912\Models\ListTransitRouterRouteEntriesResponseBody\transitRouterRouteEntries\pathAttributes;
use AlibabaCloud\Tea\Model;

class transitRouterRouteEntries extends Model
{
    /**
     * @description The time when the route entry was created.
     *
     * >  This parameter is returned only for static routes.
     * @example 2021-06-15T07:01Z
     *
     * @var string
     */
    public $createTime;

    /**
     * @description Indicates whether the route can be managed. Valid values:
     *
     *   **true**: The route can be managed. You can delete the route.
     *   **false**: The route cannot be managed because it is automatically generated by the system.
     *
     * @example false
     *
     * @var bool
     */
    public $operationalMode;

    /**
     * @description The route attributes.
     *
     * @var pathAttributes
     */
    public $pathAttributes;

    /**
     * @description The prefix list ID.
     *
     * @example pl-k1ainl66z3527773d****
     *
     * @var string
     */
    public $prefixListId;

    /**
     * @description The route tag.
     *
     * Only **PermitVbr** may be returned, which indicates that the route is advertised only to the route tables of the virtual border routers (VBRs) that are connected to the transit router.
     *
     * >  This parameter is returned only for routes whose CIDR blocks are automatically generated by the system.
     * @example PermitVbr
     *
     * @var string
     */
    public $tag;

    /**
     * @description The route description.
     *
     * >  This parameter is returned only for static routes.
     * @example CidrRoute
     *
     * @var string
     */
    public $transitRouterRouteEntryDescription;

    /**
     * @description The destination CIDR block of the route entry. An IPv4 or IPv6 CIDR block is returned.
     *
     * @example 192.168.0.0/24
     *
     * @var string
     */
    public $transitRouterRouteEntryDestinationCidrBlock;

    /**
     * @description The route ID.
     *
     * >  This parameter is returned only for static routes.
     * @example rte-oklkgwmj97z6dn****
     *
     * @var string
     */
    public $transitRouterRouteEntryId;

    /**
     * @description The route name.
     *
     * >  This parameter is returned only for static routes.
     * @example testname
     *
     * @var string
     */
    public $transitRouterRouteEntryName;

    /**
     * @description The next hop ID. This parameter is not returned if the route is a blackhole route.
     *
     * @example tr-attach-vx6iwhjr1x1j78****
     *
     * @var string
     */
    public $transitRouterRouteEntryNextHopId;

    /**
     * @description The next hop ID.
     *
     * @example vpc-m5ent6du8deaq5*****
     *
     * @var string
     */
    public $transitRouterRouteEntryNextHopResourceId;

    /**
     * @description The next hop type. Valid values:
     *
     *   **VPC**
     *   **VBR**
     *   **TR**
     *   **VPN**
     *
     * @example VPC
     *
     * @var string
     */
    public $transitRouterRouteEntryNextHopResourceType;

    /**
     * @description The next hop type. Valid values:
     *
     *   **BlackHole**: a blackhole route. Packets destined for the destination CIDR block of the route are dropped.
     *   **Attachment**: a network instance connection. Packets destined for the destination CIDR block of the route are forwarded to the specified network instance connection.
     *
     * @example BlackHole
     *
     * @var string
     */
    public $transitRouterRouteEntryNextHopType;

    /**
     * @description The source instance ID.
     *
     * @example vpc-m5ent6du8deaq5*****
     *
     * @var string
     */
    public $transitRouterRouteEntryOriginResourceId;

    /**
     * @description The source instance type. Valid values:
     *
     *   **VPC**
     *   **VBR**
     *   **TR**
     *   **VPN**
     *
     * @example VPC
     *
     * @var string
     */
    public $transitRouterRouteEntryOriginResourceType;

    /**
     * @description The route status. Valid values:
     *
     *   **Active**
     *   **Rejected**
     *   **Prohibited**
     *   **Standby**
     *   **Candidate**
     *   **Creating**
     *   **Deleting**
     *
     * @example Active
     *
     * @var string
     */
    public $transitRouterRouteEntryStatus;

    /**
     * @description The type of the route. Valid values:
     *
     *   **Static**: static routes.
     *   **Propagated**: automatically learned by the route table.
     *
     * @example Static
     *
     * @var string
     */
    public $transitRouterRouteEntryType;
    protected $_name = [
        'createTime'                                  => 'CreateTime',
        'operationalMode'                             => 'OperationalMode',
        'pathAttributes'                              => 'PathAttributes',
        'prefixListId'                                => 'PrefixListId',
        'tag'                                         => 'Tag',
        'transitRouterRouteEntryDescription'          => 'TransitRouterRouteEntryDescription',
        'transitRouterRouteEntryDestinationCidrBlock' => 'TransitRouterRouteEntryDestinationCidrBlock',
        'transitRouterRouteEntryId'                   => 'TransitRouterRouteEntryId',
        'transitRouterRouteEntryName'                 => 'TransitRouterRouteEntryName',
        'transitRouterRouteEntryNextHopId'            => 'TransitRouterRouteEntryNextHopId',
        'transitRouterRouteEntryNextHopResourceId'    => 'TransitRouterRouteEntryNextHopResourceId',
        'transitRouterRouteEntryNextHopResourceType'  => 'TransitRouterRouteEntryNextHopResourceType',
        'transitRouterRouteEntryNextHopType'          => 'TransitRouterRouteEntryNextHopType',
        'transitRouterRouteEntryOriginResourceId'     => 'TransitRouterRouteEntryOriginResourceId',
        'transitRouterRouteEntryOriginResourceType'   => 'TransitRouterRouteEntryOriginResourceType',
        'transitRouterRouteEntryStatus'               => 'TransitRouterRouteEntryStatus',
        'transitRouterRouteEntryType'                 => 'TransitRouterRouteEntryType',
    ];

    public function validate()
    {
    }

    public function toMap()
    {
        $res = [];
        if (null !== $this->createTime) {
            $res['CreateTime'] = $this->createTime;
        }
        if (null !== $this->operationalMode) {
            $res['OperationalMode'] = $this->operationalMode;
        }
        if (null !== $this->pathAttributes) {
            $res['PathAttributes'] = null !== $this->pathAttributes ? $this->pathAttributes->toMap() : null;
        }
        if (null !== $this->prefixListId) {
            $res['PrefixListId'] = $this->prefixListId;
        }
        if (null !== $this->tag) {
            $res['Tag'] = $this->tag;
        }
        if (null !== $this->transitRouterRouteEntryDescription) {
            $res['TransitRouterRouteEntryDescription'] = $this->transitRouterRouteEntryDescription;
        }
        if (null !== $this->transitRouterRouteEntryDestinationCidrBlock) {
            $res['TransitRouterRouteEntryDestinationCidrBlock'] = $this->transitRouterRouteEntryDestinationCidrBlock;
        }
        if (null !== $this->transitRouterRouteEntryId) {
            $res['TransitRouterRouteEntryId'] = $this->transitRouterRouteEntryId;
        }
        if (null !== $this->transitRouterRouteEntryName) {
            $res['TransitRouterRouteEntryName'] = $this->transitRouterRouteEntryName;
        }
        if (null !== $this->transitRouterRouteEntryNextHopId) {
            $res['TransitRouterRouteEntryNextHopId'] = $this->transitRouterRouteEntryNextHopId;
        }
        if (null !== $this->transitRouterRouteEntryNextHopResourceId) {
            $res['TransitRouterRouteEntryNextHopResourceId'] = $this->transitRouterRouteEntryNextHopResourceId;
        }
        if (null !== $this->transitRouterRouteEntryNextHopResourceType) {
            $res['TransitRouterRouteEntryNextHopResourceType'] = $this->transitRouterRouteEntryNextHopResourceType;
        }
        if (null !== $this->transitRouterRouteEntryNextHopType) {
            $res['TransitRouterRouteEntryNextHopType'] = $this->transitRouterRouteEntryNextHopType;
        }
        if (null !== $this->transitRouterRouteEntryOriginResourceId) {
            $res['TransitRouterRouteEntryOriginResourceId'] = $this->transitRouterRouteEntryOriginResourceId;
        }
        if (null !== $this->transitRouterRouteEntryOriginResourceType) {
            $res['TransitRouterRouteEntryOriginResourceType'] = $this->transitRouterRouteEntryOriginResourceType;
        }
        if (null !== $this->transitRouterRouteEntryStatus) {
            $res['TransitRouterRouteEntryStatus'] = $this->transitRouterRouteEntryStatus;
        }
        if (null !== $this->transitRouterRouteEntryType) {
            $res['TransitRouterRouteEntryType'] = $this->transitRouterRouteEntryType;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return transitRouterRouteEntries
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['CreateTime'])) {
            $model->createTime = $map['CreateTime'];
        }
        if (isset($map['OperationalMode'])) {
            $model->operationalMode = $map['OperationalMode'];
        }
        if (isset($map['PathAttributes'])) {
            $model->pathAttributes = pathAttributes::fromMap($map['PathAttributes']);
        }
        if (isset($map['PrefixListId'])) {
            $model->prefixListId = $map['PrefixListId'];
        }
        if (isset($map['Tag'])) {
            $model->tag = $map['Tag'];
        }
        if (isset($map['TransitRouterRouteEntryDescription'])) {
            $model->transitRouterRouteEntryDescription = $map['TransitRouterRouteEntryDescription'];
        }
        if (isset($map['TransitRouterRouteEntryDestinationCidrBlock'])) {
            $model->transitRouterRouteEntryDestinationCidrBlock = $map['TransitRouterRouteEntryDestinationCidrBlock'];
        }
        if (isset($map['TransitRouterRouteEntryId'])) {
            $model->transitRouterRouteEntryId = $map['TransitRouterRouteEntryId'];
        }
        if (isset($map['TransitRouterRouteEntryName'])) {
            $model->transitRouterRouteEntryName = $map['TransitRouterRouteEntryName'];
        }
        if (isset($map['TransitRouterRouteEntryNextHopId'])) {
            $model->transitRouterRouteEntryNextHopId = $map['TransitRouterRouteEntryNextHopId'];
        }
        if (isset($map['TransitRouterRouteEntryNextHopResourceId'])) {
            $model->transitRouterRouteEntryNextHopResourceId = $map['TransitRouterRouteEntryNextHopResourceId'];
        }
        if (isset($map['TransitRouterRouteEntryNextHopResourceType'])) {
            $model->transitRouterRouteEntryNextHopResourceType = $map['TransitRouterRouteEntryNextHopResourceType'];
        }
        if (isset($map['TransitRouterRouteEntryNextHopType'])) {
            $model->transitRouterRouteEntryNextHopType = $map['TransitRouterRouteEntryNextHopType'];
        }
        if (isset($map['TransitRouterRouteEntryOriginResourceId'])) {
            $model->transitRouterRouteEntryOriginResourceId = $map['TransitRouterRouteEntryOriginResourceId'];
        }
        if (isset($map['TransitRouterRouteEntryOriginResourceType'])) {
            $model->transitRouterRouteEntryOriginResourceType = $map['TransitRouterRouteEntryOriginResourceType'];
        }
        if (isset($map['TransitRouterRouteEntryStatus'])) {
            $model->transitRouterRouteEntryStatus = $map['TransitRouterRouteEntryStatus'];
        }
        if (isset($map['TransitRouterRouteEntryType'])) {
            $model->transitRouterRouteEntryType = $map['TransitRouterRouteEntryType'];
        }

        return $model;
    }
}
