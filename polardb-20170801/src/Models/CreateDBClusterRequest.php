<?php

// This file is auto-generated, don't edit it. Thanks.

namespace AlibabaCloud\SDK\Polardb\V20170801\Models;

use AlibabaCloud\SDK\Polardb\V20170801\Models\CreateDBClusterRequest\tag;
use AlibabaCloud\Tea\Model;

class CreateDBClusterRequest extends Model
{
    /**
     * @description Whether to enable idle pause. Values:
     *
     * - **true**: Enabled
     *
     * - **false**: Disabled (default)
     *
     * > Only supported by Serverless clusters.
     * @example true
     *
     * @var string
     */
    public $allowShutDown;

    /**
     * @description CPU architecture. Available values include:
     * - ARM
     * @example X86
     *
     * @var string
     */
    public $architecture;

    /**
     * @description Whether to enable auto-renewal, with available values as follows:
     *
     * - **true**: Auto-renew.
     * - **false**: Do not auto-renew.
     *
     * The default is **false**.
     *
     * > This parameter takes effect only when **PayType** is set to **Prepaid**.
     * @example true
     *
     * @var bool
     */
    public $autoRenew;

    /**
     * @description Backup retention policy upon cluster deletion, with valid values as follows:
     * **ALL**: Permanently retain all backups.
     * **LATEST**: Permanently retain the latest backup (automatically backed up before deletion).
     * **NONE**: Do not retain backup sets upon cluster deletion.
     *
     * By default, the value is set to **NONE**, indicating no backup sets are retained upon cluster deletion.
     * > This parameter applies only when **DBType** is **MySQL**.
     * > Serverless clusters do not support this parameter.
     * @example NONE
     *
     * @var string
     */
    public $backupRetentionPolicyOnClusterDeletion;

    /**
     * @description Used to ensure idempotency of the request. Generated by the client, ensuring uniqueness across different requests, case-sensitive, and not exceeding 64 ASCII characters.
     *
     * @example 6000170000591aed949d0f5********************
     *
     * @var string
     */
    public $clientToken;

    /**
     * @description The point in time to clone data, with the following options:
     *
     * - **LATEST**: Data from the latest time point.
     * - **BackupID**: Historical backup set ID, please enter the specific backup set ID.
     * - **Timestamp**: Historical time point, please enter the specific time in the format `YYYY-MM-DDThh:mm:ssZ` (UTC time).
     *
     * The default value is **LATEST**.
     *
     * > If **CreationOption** is **CloneFromRDS**, this parameter can only be set to **LATEST**.
     * @example LATEST
     *
     * @var string
     */
    public $cloneDataPoint;

    /**
     * @description Cluster network type, currently only VPC is supported, with a fixed value of **VPC**.
     *
     * @example VPC
     *
     * @var string
     */
    public $clusterNetworkType;

    /**
     * @description Product series, with valid values as follows:
     * **Normal**: Cluster Edition (default)
     * **Basic**: Single-node
     * **ArchiveNormal**: High Compression Engine (X-Engine)
     * **NormalMultimaster**: Multi-master Cluster Edition
     * **SENormal**: Standard Edition
     *
     * > * **MySQL** **5.6**, **5.7**, **8.0**, **PostgreSQL** **14**, and **Oracle Syntax Compatible 2.0** support **Basic**.
     * > * **MySQL** **8.0** supports **ArchiveNormal** and **NormalMultimaster**.
     * > * **MySQL** **5.6**, **5.7**, **8.0**, and **PostgreSQL** **14** support **SENormal**.
     *
     * For more information about product series, see [Product Series](https://help.aliyun.com/document_detail/183258.html).
     * @example Normal
     *
     * @var string
     */
    public $creationCategory;

    /**
     * @description Creation method, with the following values supported:
     *
     * **Normal**: Creates a brand new PolarDB cluster. For console operations, refer to the following documents:
     * [Create a PolarDB MySQL Edition Database Cluster](https://help.aliyun.com/document_detail/58769.html)
     * [Create a PolarDB PostgreSQL Edition Database Cluster](https://help.aliyun.com/document_detail/118063.html)
     * [Create a PolarDB PostgreSQL Edition (Oracle Compatible) Database Cluster](https://help.aliyun.com/document_detail/118182.html)
     *
     * **CloneFromPolarDB**: Clones data from an existing PolarDB cluster to a new PolarDB cluster. For console operations, refer to the following documents:
     * [Clone a PolarDB MySQL Edition Cluster](https://help.aliyun.com/document_detail/87966.html)
     * [Clone a PolarDB PostgreSQL Edition Cluster](https://help.aliyun.com/document_detail/118108.html)
     * [Clone a PolarDB PostgreSQL Edition (Oracle Compatible) Cluster](https://help.aliyun.com/document_detail/118221.html)
     *
     * **RecoverFromRecyclebin**: Recovers data from a released PolarDB cluster to a new PolarDB cluster. For console operations, refer to the following documents:
     * [Restore a Released PolarDB MySQL Edition Cluster](https://help.aliyun.com/document_detail/164880.html)
     * [Restore a Released PolarDB PostgreSQL Edition Cluster](https://help.aliyun.com/document_detail/432844.html)
     * [Restore a Released PolarDB PostgreSQL Edition (Oracle Compatible) Cluster](https://help.aliyun.com/document_detail/424632.html)
     *
     * **CloneFromRDS**: Clones data from an existing RDS instance to a new PolarDB cluster. Console operation guide is available at [One-click Clone from RDS MySQL to PolarDB MySQL Edition](https://help.aliyun.com/document_detail/121812.html).
     *
     * **MigrationFromRDS**: Migrates data from an existing RDS instance to a new PolarDB cluster. The created PolarDB cluster operates in read-only mode with Binlog enabled by default. Console operation guide is at [One-click Upgrade from RDS MySQL to PolarDB MySQL Edition](https://help.aliyun.com/document_detail/121582.html).
     *
     * **CreateGdnStandby**: Creates a standby cluster. Console operation guide can be found at [Add Standby Cluster](https://help.aliyun.com/document_detail/160381.html).
     *
     * **UpgradeFromPolarDB**: Upgrades and migrates from PolarDB. Console operation guide is detailed in [Major Version Upgrade](https://help.aliyun.com/document_detail/459712.html).
     *
     * The default value is **Normal**.
     *
     * > When **DBType** is **MySQL** and **DBVersion** is **8.0**, this parameter can also take the value **CreateGdnStandby**.
     * @example Normal
     *
     * @var string
     */
    public $creationOption;

    /**
     * @description Cluster name, which must meet the following requirements:
     * Cannot start with `http://` or `https://`.
     * Length should be between 2 and 256 characters.
     *
     * @example test
     *
     * @var string
     */
    public $DBClusterDescription;

    /**
     * @description Database engine minor version number. Valid values include:
     *
     * - **8.0.2**
     * - **8.0.1**
     *
     * > This parameter takes effect only when **DBType** is **MySQL** and **DBVersion** is **8.0**.
     * @example 8.0.1
     *
     * @var string
     */
    public $DBMinorVersion;

    /**
     * @description Node specifications. For details, refer to the following documents:
     *
     * - PolarDB PostgreSQL Edition: [Compute Node Specifications](https://help.aliyun.com/document_detail/209380.html).
     *
     * > - For a Serverless cluster in PolarDB MySQL, enter **polar.mysql.sl.small**.
     * <props="china">> - For a Serverless cluster in both PolarDB PostgreSQL (Oracle Compatible) and PolarDB PostgreSQL, enter **polar.pg.sl.small.c**.
     *
     * This parameter is required.
     * @example polar.mysql.x4.medium
     *
     * @var string
     */
    public $DBNodeClass;

    /**
     * @description Number of standard edition nodes. Values are as follows:
     *
     * - **1** (default): Indicates there is only one read-write node.
     * - **2**: Indicates there is one read-only node and one read-write node.
     * > - Only supported by PolarDB MySQL edition.
     * @example 1
     *
     * @var int
     */
    public $DBNodeNum;

    /**
     * @description Database engine type, with available values as follows:
     *
     * - **MySQL**
     * - **PostgreSQL**
     * - **Oracle**
     *
     * This parameter is required.
     * @example MySQL
     *
     * @var string
     */
    public $DBType;

    /**
     * @description Database engine version number.
     * For MySQL, the version numbers are as follows:
     * **5.6**
     * **5.7**
     * **8.0**
     * For PostgreSQL, the version numbers are as follows:
     * **11**
     * **14**
     * **15**
     * <props="china">
     *
     * > When creating a Serverless cluster in PolarDB PostgreSQL, only version **14** is supported.
     *
     *
     * For Oracle, the version numbers are as follows:
     * **11**
     * **14**
     *
     * This parameter is required.
     * @example 5.6
     *
     * @var string
     */
    public $DBVersion;

    /**
     * @description Cluster timezone (UTC), with selectable values ranging from **-12:00** to **+13:00** at whole-hour intervals, e.g., **00:00**. The default value is **SYSTEM**, which matches the Region\\"s timezone.
     * > This parameter applies only when **DBType** is **MySQL**.
     * @example SYSTEM
     *
     * @var string
     */
    public $defaultTimeZone;

    /**
     * @description Global Database Network (GDN) ID.
     *
     * > This parameter is required when **CreationOption** is **CreateGdnStandby**.
     * @example gdn-***********
     *
     * @var string
     */
    public $GDNId;

    /**
     * @description Whether to enable the hot standby cluster. Values are as follows:
     *
     * - **ON** (default): Enables the hot standby cluster.
     * - **OFF**: Disables the hot standby cluster.
     * - **STANDBY**: Enables the hot standby cluster for the standard edition.
     * > The default value for standard edition clusters is **STANDBY**.
     * @example ON
     *
     * @var string
     */
    public $hotStandbyCluster;

    /**
     * @description Enable Binlog feature, valid values are as follows:
     * - **ON**: Cluster enables the Binlog feature. - **OFF**: Cluster disables the Binlog feature. > This parameter takes effect only when the **DBType** parameter is set to **MySQL**.
     * @example ON
     *
     * @var string
     */
    public $loosePolarLogBin;

    /**
     * @description Enable the X-Engine storage engine feature, with valid values as follows:
     *
     * - **ON**: The cluster enables the X-Engine engine.
     * - **OFF**: The cluster disables the X-Engine engine.
     * > This parameter is effective only when **CreationOption** is not **CreateGdnStandby**, **DBType** is **MySQL**, and **DBVersion** is **8.0**. The memory specification of nodes that enable the X-Engine engine must be at least 8 GB.
     * @example ON
     *
     * @var string
     */
    public $looseXEngine;

    /**
     * @description Set the ratio for enabling the X-Engine storage engine, with a range of integers from 10 to 90.
     * > This parameter takes effect only when **LooseXEngine** is **ON**.
     * @example 50
     *
     * @var string
     */
    public $looseXEngineUseMemoryPct;

    /**
     * @description Whether table names are case-sensitive, with valid values as follows:
     * **1**: Case-insensitive
     * **0**: Case-sensitive
     *
     * The default value is **1**.
     * > This parameter applies only when **DBType** is **MySQL**.
     * @example 1
     *
     * @var string
     */
    public $lowerCaseTableNames;

    /**
     * @var string
     */
    public $ownerAccount;

    /**
     * @var int
     */
    public $ownerId;

    /**
     * @description Parameter template ID.
     *
     * > You can view the list of parameter templates in the target region, including the parameter template ID, by calling the [DescribeParameterGroups](https://help.aliyun.com/document_detail/207178.html) interface.
     * @example pcpg-**************
     *
     * @var string
     */
    public $parameterGroupId;

    /**
     * @description Payment type, with available values as follows:
     *
     * - **Postpaid**: Pay-as-you-go.
     * - **Prepaid**: Subscription (monthly or yearly).
     *
     * This parameter is required.
     * @example Postpaid
     *
     * @var string
     */
    public $payType;

    /**
     * @description If the payment type is **Prepaid**, this parameter is required. It specifies whether the prepaid cluster is on a monthly or yearly basis.
     *
     * - **Year**: Yearly subscription.
     * - **Month**: Monthly subscription.
     * @example Month
     *
     * @var string
     */
    public $period;

    /**
     * @description <p id="p_wyg_t4a_glm">The provisioned read and write IOPS for ESSD AutoPL cloud disks. Possible values: 0 to min{50,000, 1000*capacity-Baseline Performance}.</p>
     * <p id="p_6de_jxy_k2g">Baseline Performance = min{1,800+50*capacity, 50000}.</p>
     * <note id="note_7kj_j0o_rgs">This parameter is supported only when StorageType is ESSDAUTOPL.</note>
     * @example 1000
     *
     * @var int
     */
    public $provisionedIops;

    /**
     * @description Standard edition database proxy specifications. Values are as follows:
     *
     * - **polar.maxscale.g2.medium.c**: 2 cores.
     * - **polar.maxscale.g2.large.c**: 4 cores.
     * - **polar.maxscale.g2.xlarge.c**: 8 cores.
     * - **polar.maxscale.g2.2xlarge.c**: 16 cores.
     * - **polar.maxscale.g2.3xlarge.c**: 24 cores.
     * - **polar.maxscale.g2.4xlarge.c**: 32 cores.
     * - **polar.maxscale.g2.8xlarge.c**: 64 cores.
     * @example polar.maxscale.g2.medium.c
     *
     * @var string
     */
    public $proxyClass;

    /**
     * @description Database proxy type, with values including:
     * - **EXCLUSIVE**: Enterprise Exclusive Edition
     * - **GENERAL**: Enterprise General Purpose Edition
     * >- If the node specification is dedicated, the proxy type should be Enterprise Exclusive Edition.
     * @example Exclusive
     *
     * @var string
     */
    public $proxyType;

    /**
     * @description Region ID.
     *
     * This parameter is required.
     * @example cn-hangzhou
     *
     * @var string
     */
    public $regionId;

    /**
     * @description Resource group ID.
     *
     * @example rg-************
     *
     * @var string
     */
    public $resourceGroupId;

    /**
     * @var string
     */
    public $resourceOwnerAccount;

    /**
     * @var int
     */
    public $resourceOwnerId;

    /**
     * @description Maximum scaling limit for a single node. The value range is: 1 PCU~32 PCU.
     *
     * > Only supported by Serverless clusters.
     * @example 3
     *
     * @var string
     */
    public $scaleMax;

    /**
     * @description Minimum scaling limit for a single node. The value range is: 1 PCU~31 PCU.
     *
     * > Only supported by Serverless clusters.
     * @example 1
     *
     * @var string
     */
    public $scaleMin;

    /**
     * @description Maximum scaling limit for the number of read-only nodes. The value range is: 0~15.
     *
     * > Only supported by Serverless clusters.
     * @example 4
     *
     * @var string
     */
    public $scaleRoNumMax;

    /**
     * @description Minimum scaling limit for the number of read-only nodes. The value range is: 0~15.
     *
     * > Only supported by Serverless clusters.
     * @example 2
     *
     * @var string
     */
    public $scaleRoNumMin;

    /**
     * @description PolarDB cluster whitelist IP address.
     * > Supports configuring multiple whitelist IP addresses, with English commas separating multiple IP addresses.
     * @example 10.***.***.***
     *
     * @var string
     */
    public $securityIPList;

    /**
     * @description Serverless type. The current value is fixed to **AgileServerless** (sensitive mode).
     * > This parameter is only supported by Serverless clusters.
     * @example AgileServerless
     *
     * @var string
     */
    public $serverlessType;

    /**
     * @description Source RDS instance ID or source PolarDB cluster ID. This parameter is mandatory only when **CreationOption** is set to **MigrationFromRDS**, **CloneFromRDS**, **CloneFromPolarDB**, or **RecoverFromRecyclebin**.
     * If **CreationOption** is **MigrationFromRDS** or **CloneFromRDS**, you need to input the source RDS instance ID. The source RDS instance version must be RDS MySQL 5.6, 5.7, or 8.0 High Availability edition.
     *
     * If **CreationOption** is **CloneFromPolarDB**, you need to input the source PolarDB cluster ID. The DBType of the cloned cluster will default to match the source cluster. For example, if the source cluster is MySQL 8.0, the cloned cluster must also have **DBType** set to **MySQL** and **DBVersion** to **8.0**.
     *
     * If **CreationOption** is **RecoverFromRecyclebin**, you need to input the released source PolarDB cluster ID. The DBType of the cluster being recovered from the recycle bin must match the source cluster. For example, if the source cluster was MySQL 8.0, the recovered cluster must also have **DBType** set to **MySQL** and **DBVersion** to **8.0**.
     *
     * @example rm-*************
     *
     * @var string
     */
    public $sourceResourceId;

    /**
     * @description The availability zone where the hot standby cluster is stored. Applicable to the standard edition 3AZ scenario.
     *
     * > This parameter takes effect only when multi-zone data strong consistency is enabled.
     * @example cn-hangzhou-g
     *
     * @var string
     */
    public $standbyAZ;

    /**
     * @description Whether to enable automatic storage expansion for standard edition clusters, with valid values as follows:
     *
     * - Disable: Disables automatic storage expansion.
     * @example Enable
     *
     * @var string
     */
    public $storageAutoScale;

    /**
     * @description The storage billing type, with valid values as follows:
     *
     * - Prepaid: Pay-per-use based on space (subscription).
     * @example Prepaid
     *
     * @var string
     */
    public $storagePayType;

    /**
     * @description Storage space for pay-by-space (subscription) billing. Unit: GB.
     * > - When the Standard Edition storage type is ESSDAUTOPL, the storage space range is 40 to 64000, with a minimum step size of 10, meaning you can only enter values like 40, 50, 60, and so on.
     * @example 50
     *
     * @var int
     */
    public $storageSpace;

    /**
     * @description Enterprise edition storage types include:
     * - **PSL5**
     * - **PSL4**
     *
     * Standard edition storage types include:
     * - **ESSDPL0**
     * - **ESSDPL1**
     * - **ESSDPL2**
     * - **ESSDPL3**
     * - **ESSDAUTOPL**
     * @example PSL4
     *
     * @var string
     */
    public $storageType;

    /**
     * @description Set the upper limit for automatic storage expansion of standard edition clusters, in GB.
     *
     * > The maximum value is 32000.
     * @example 800
     *
     * @var int
     */
    public $storageUpperBound;

    /**
     * @description Whether the cluster has enabled strong data consistency across multiple zones. Values are as follows:
     *
     * - **ON**: Indicates strong data consistency across multiple zones is enabled, applicable to the standard edition 3AZ scenario.
     *
     * - **OFF**: Indicates strong data consistency across multiple zones is not enabled.
     * @example ON
     *
     * @var string
     */
    public $strictConsistency;

    /**
     * @description Enables TDE encryption. Valid values are as follows:
     *
     * - **true**: Enabled.
     * - **false**: Disabled (default).
     *
     * > * This parameter takes effect only when **DBType** is **PostgreSQL** or **Oracle**.
     * > * You can call the [ModifyDBClusterTDE](https://help.aliyun.com/document_detail/167982.html) interface to enable TDE encryption for a PolarDB MySQL cluster.
     * > * Once the TDE feature is enabled, it cannot be disabled.
     * @example true
     *
     * @var bool
     */
    public $TDEStatus;

    /**
     * @description List of tags.
     *
     * @var tag[]
     */
    public $tag;

    /**
     * @description If the payment type is **Prepaid**, this parameter is required.
     * - When **Period** is **Month**, **UsedTime** should be an integer within `[1-9]`.
     * - When **Period** is **Year**, **UsedTime** should be an integer within `[1-3]`.
     * @example 1
     *
     * @var string
     */
    public $usedTime;

    /**
     * @description VPC ID.
     *
     * @example vpc-**********
     *
     * @var string
     */
    public $VPCId;

    /**
     * @description Virtual switch ID.
     *
     * > If VPCId has been selected, VSwitchId is mandatory.
     * @example vsw-**********
     *
     * @var string
     */
    public $vSwitchId;

    /**
     * @description Availability Zone ID.
     *
     * > You can view the available zones through the [DescribeRegions](https://help.aliyun.com/document_detail/98041.html) interface.
     * @example cn-hangzhou-j
     *
     * @var string
     */
    public $zoneId;
    protected $_name = [
        'allowShutDown'                          => 'AllowShutDown',
        'architecture'                           => 'Architecture',
        'autoRenew'                              => 'AutoRenew',
        'backupRetentionPolicyOnClusterDeletion' => 'BackupRetentionPolicyOnClusterDeletion',
        'clientToken'                            => 'ClientToken',
        'cloneDataPoint'                         => 'CloneDataPoint',
        'clusterNetworkType'                     => 'ClusterNetworkType',
        'creationCategory'                       => 'CreationCategory',
        'creationOption'                         => 'CreationOption',
        'DBClusterDescription'                   => 'DBClusterDescription',
        'DBMinorVersion'                         => 'DBMinorVersion',
        'DBNodeClass'                            => 'DBNodeClass',
        'DBNodeNum'                              => 'DBNodeNum',
        'DBType'                                 => 'DBType',
        'DBVersion'                              => 'DBVersion',
        'defaultTimeZone'                        => 'DefaultTimeZone',
        'GDNId'                                  => 'GDNId',
        'hotStandbyCluster'                      => 'HotStandbyCluster',
        'loosePolarLogBin'                       => 'LoosePolarLogBin',
        'looseXEngine'                           => 'LooseXEngine',
        'looseXEngineUseMemoryPct'               => 'LooseXEngineUseMemoryPct',
        'lowerCaseTableNames'                    => 'LowerCaseTableNames',
        'ownerAccount'                           => 'OwnerAccount',
        'ownerId'                                => 'OwnerId',
        'parameterGroupId'                       => 'ParameterGroupId',
        'payType'                                => 'PayType',
        'period'                                 => 'Period',
        'provisionedIops'                        => 'ProvisionedIops',
        'proxyClass'                             => 'ProxyClass',
        'proxyType'                              => 'ProxyType',
        'regionId'                               => 'RegionId',
        'resourceGroupId'                        => 'ResourceGroupId',
        'resourceOwnerAccount'                   => 'ResourceOwnerAccount',
        'resourceOwnerId'                        => 'ResourceOwnerId',
        'scaleMax'                               => 'ScaleMax',
        'scaleMin'                               => 'ScaleMin',
        'scaleRoNumMax'                          => 'ScaleRoNumMax',
        'scaleRoNumMin'                          => 'ScaleRoNumMin',
        'securityIPList'                         => 'SecurityIPList',
        'serverlessType'                         => 'ServerlessType',
        'sourceResourceId'                       => 'SourceResourceId',
        'standbyAZ'                              => 'StandbyAZ',
        'storageAutoScale'                       => 'StorageAutoScale',
        'storagePayType'                         => 'StoragePayType',
        'storageSpace'                           => 'StorageSpace',
        'storageType'                            => 'StorageType',
        'storageUpperBound'                      => 'StorageUpperBound',
        'strictConsistency'                      => 'StrictConsistency',
        'TDEStatus'                              => 'TDEStatus',
        'tag'                                    => 'Tag',
        'usedTime'                               => 'UsedTime',
        'VPCId'                                  => 'VPCId',
        'vSwitchId'                              => 'VSwitchId',
        'zoneId'                                 => 'ZoneId',
    ];

    public function validate()
    {
    }

    public function toMap()
    {
        $res = [];
        if (null !== $this->allowShutDown) {
            $res['AllowShutDown'] = $this->allowShutDown;
        }
        if (null !== $this->architecture) {
            $res['Architecture'] = $this->architecture;
        }
        if (null !== $this->autoRenew) {
            $res['AutoRenew'] = $this->autoRenew;
        }
        if (null !== $this->backupRetentionPolicyOnClusterDeletion) {
            $res['BackupRetentionPolicyOnClusterDeletion'] = $this->backupRetentionPolicyOnClusterDeletion;
        }
        if (null !== $this->clientToken) {
            $res['ClientToken'] = $this->clientToken;
        }
        if (null !== $this->cloneDataPoint) {
            $res['CloneDataPoint'] = $this->cloneDataPoint;
        }
        if (null !== $this->clusterNetworkType) {
            $res['ClusterNetworkType'] = $this->clusterNetworkType;
        }
        if (null !== $this->creationCategory) {
            $res['CreationCategory'] = $this->creationCategory;
        }
        if (null !== $this->creationOption) {
            $res['CreationOption'] = $this->creationOption;
        }
        if (null !== $this->DBClusterDescription) {
            $res['DBClusterDescription'] = $this->DBClusterDescription;
        }
        if (null !== $this->DBMinorVersion) {
            $res['DBMinorVersion'] = $this->DBMinorVersion;
        }
        if (null !== $this->DBNodeClass) {
            $res['DBNodeClass'] = $this->DBNodeClass;
        }
        if (null !== $this->DBNodeNum) {
            $res['DBNodeNum'] = $this->DBNodeNum;
        }
        if (null !== $this->DBType) {
            $res['DBType'] = $this->DBType;
        }
        if (null !== $this->DBVersion) {
            $res['DBVersion'] = $this->DBVersion;
        }
        if (null !== $this->defaultTimeZone) {
            $res['DefaultTimeZone'] = $this->defaultTimeZone;
        }
        if (null !== $this->GDNId) {
            $res['GDNId'] = $this->GDNId;
        }
        if (null !== $this->hotStandbyCluster) {
            $res['HotStandbyCluster'] = $this->hotStandbyCluster;
        }
        if (null !== $this->loosePolarLogBin) {
            $res['LoosePolarLogBin'] = $this->loosePolarLogBin;
        }
        if (null !== $this->looseXEngine) {
            $res['LooseXEngine'] = $this->looseXEngine;
        }
        if (null !== $this->looseXEngineUseMemoryPct) {
            $res['LooseXEngineUseMemoryPct'] = $this->looseXEngineUseMemoryPct;
        }
        if (null !== $this->lowerCaseTableNames) {
            $res['LowerCaseTableNames'] = $this->lowerCaseTableNames;
        }
        if (null !== $this->ownerAccount) {
            $res['OwnerAccount'] = $this->ownerAccount;
        }
        if (null !== $this->ownerId) {
            $res['OwnerId'] = $this->ownerId;
        }
        if (null !== $this->parameterGroupId) {
            $res['ParameterGroupId'] = $this->parameterGroupId;
        }
        if (null !== $this->payType) {
            $res['PayType'] = $this->payType;
        }
        if (null !== $this->period) {
            $res['Period'] = $this->period;
        }
        if (null !== $this->provisionedIops) {
            $res['ProvisionedIops'] = $this->provisionedIops;
        }
        if (null !== $this->proxyClass) {
            $res['ProxyClass'] = $this->proxyClass;
        }
        if (null !== $this->proxyType) {
            $res['ProxyType'] = $this->proxyType;
        }
        if (null !== $this->regionId) {
            $res['RegionId'] = $this->regionId;
        }
        if (null !== $this->resourceGroupId) {
            $res['ResourceGroupId'] = $this->resourceGroupId;
        }
        if (null !== $this->resourceOwnerAccount) {
            $res['ResourceOwnerAccount'] = $this->resourceOwnerAccount;
        }
        if (null !== $this->resourceOwnerId) {
            $res['ResourceOwnerId'] = $this->resourceOwnerId;
        }
        if (null !== $this->scaleMax) {
            $res['ScaleMax'] = $this->scaleMax;
        }
        if (null !== $this->scaleMin) {
            $res['ScaleMin'] = $this->scaleMin;
        }
        if (null !== $this->scaleRoNumMax) {
            $res['ScaleRoNumMax'] = $this->scaleRoNumMax;
        }
        if (null !== $this->scaleRoNumMin) {
            $res['ScaleRoNumMin'] = $this->scaleRoNumMin;
        }
        if (null !== $this->securityIPList) {
            $res['SecurityIPList'] = $this->securityIPList;
        }
        if (null !== $this->serverlessType) {
            $res['ServerlessType'] = $this->serverlessType;
        }
        if (null !== $this->sourceResourceId) {
            $res['SourceResourceId'] = $this->sourceResourceId;
        }
        if (null !== $this->standbyAZ) {
            $res['StandbyAZ'] = $this->standbyAZ;
        }
        if (null !== $this->storageAutoScale) {
            $res['StorageAutoScale'] = $this->storageAutoScale;
        }
        if (null !== $this->storagePayType) {
            $res['StoragePayType'] = $this->storagePayType;
        }
        if (null !== $this->storageSpace) {
            $res['StorageSpace'] = $this->storageSpace;
        }
        if (null !== $this->storageType) {
            $res['StorageType'] = $this->storageType;
        }
        if (null !== $this->storageUpperBound) {
            $res['StorageUpperBound'] = $this->storageUpperBound;
        }
        if (null !== $this->strictConsistency) {
            $res['StrictConsistency'] = $this->strictConsistency;
        }
        if (null !== $this->TDEStatus) {
            $res['TDEStatus'] = $this->TDEStatus;
        }
        if (null !== $this->tag) {
            $res['Tag'] = [];
            if (null !== $this->tag && \is_array($this->tag)) {
                $n = 0;
                foreach ($this->tag as $item) {
                    $res['Tag'][$n++] = null !== $item ? $item->toMap() : $item;
                }
            }
        }
        if (null !== $this->usedTime) {
            $res['UsedTime'] = $this->usedTime;
        }
        if (null !== $this->VPCId) {
            $res['VPCId'] = $this->VPCId;
        }
        if (null !== $this->vSwitchId) {
            $res['VSwitchId'] = $this->vSwitchId;
        }
        if (null !== $this->zoneId) {
            $res['ZoneId'] = $this->zoneId;
        }

        return $res;
    }

    /**
     * @param array $map
     *
     * @return CreateDBClusterRequest
     */
    public static function fromMap($map = [])
    {
        $model = new self();
        if (isset($map['AllowShutDown'])) {
            $model->allowShutDown = $map['AllowShutDown'];
        }
        if (isset($map['Architecture'])) {
            $model->architecture = $map['Architecture'];
        }
        if (isset($map['AutoRenew'])) {
            $model->autoRenew = $map['AutoRenew'];
        }
        if (isset($map['BackupRetentionPolicyOnClusterDeletion'])) {
            $model->backupRetentionPolicyOnClusterDeletion = $map['BackupRetentionPolicyOnClusterDeletion'];
        }
        if (isset($map['ClientToken'])) {
            $model->clientToken = $map['ClientToken'];
        }
        if (isset($map['CloneDataPoint'])) {
            $model->cloneDataPoint = $map['CloneDataPoint'];
        }
        if (isset($map['ClusterNetworkType'])) {
            $model->clusterNetworkType = $map['ClusterNetworkType'];
        }
        if (isset($map['CreationCategory'])) {
            $model->creationCategory = $map['CreationCategory'];
        }
        if (isset($map['CreationOption'])) {
            $model->creationOption = $map['CreationOption'];
        }
        if (isset($map['DBClusterDescription'])) {
            $model->DBClusterDescription = $map['DBClusterDescription'];
        }
        if (isset($map['DBMinorVersion'])) {
            $model->DBMinorVersion = $map['DBMinorVersion'];
        }
        if (isset($map['DBNodeClass'])) {
            $model->DBNodeClass = $map['DBNodeClass'];
        }
        if (isset($map['DBNodeNum'])) {
            $model->DBNodeNum = $map['DBNodeNum'];
        }
        if (isset($map['DBType'])) {
            $model->DBType = $map['DBType'];
        }
        if (isset($map['DBVersion'])) {
            $model->DBVersion = $map['DBVersion'];
        }
        if (isset($map['DefaultTimeZone'])) {
            $model->defaultTimeZone = $map['DefaultTimeZone'];
        }
        if (isset($map['GDNId'])) {
            $model->GDNId = $map['GDNId'];
        }
        if (isset($map['HotStandbyCluster'])) {
            $model->hotStandbyCluster = $map['HotStandbyCluster'];
        }
        if (isset($map['LoosePolarLogBin'])) {
            $model->loosePolarLogBin = $map['LoosePolarLogBin'];
        }
        if (isset($map['LooseXEngine'])) {
            $model->looseXEngine = $map['LooseXEngine'];
        }
        if (isset($map['LooseXEngineUseMemoryPct'])) {
            $model->looseXEngineUseMemoryPct = $map['LooseXEngineUseMemoryPct'];
        }
        if (isset($map['LowerCaseTableNames'])) {
            $model->lowerCaseTableNames = $map['LowerCaseTableNames'];
        }
        if (isset($map['OwnerAccount'])) {
            $model->ownerAccount = $map['OwnerAccount'];
        }
        if (isset($map['OwnerId'])) {
            $model->ownerId = $map['OwnerId'];
        }
        if (isset($map['ParameterGroupId'])) {
            $model->parameterGroupId = $map['ParameterGroupId'];
        }
        if (isset($map['PayType'])) {
            $model->payType = $map['PayType'];
        }
        if (isset($map['Period'])) {
            $model->period = $map['Period'];
        }
        if (isset($map['ProvisionedIops'])) {
            $model->provisionedIops = $map['ProvisionedIops'];
        }
        if (isset($map['ProxyClass'])) {
            $model->proxyClass = $map['ProxyClass'];
        }
        if (isset($map['ProxyType'])) {
            $model->proxyType = $map['ProxyType'];
        }
        if (isset($map['RegionId'])) {
            $model->regionId = $map['RegionId'];
        }
        if (isset($map['ResourceGroupId'])) {
            $model->resourceGroupId = $map['ResourceGroupId'];
        }
        if (isset($map['ResourceOwnerAccount'])) {
            $model->resourceOwnerAccount = $map['ResourceOwnerAccount'];
        }
        if (isset($map['ResourceOwnerId'])) {
            $model->resourceOwnerId = $map['ResourceOwnerId'];
        }
        if (isset($map['ScaleMax'])) {
            $model->scaleMax = $map['ScaleMax'];
        }
        if (isset($map['ScaleMin'])) {
            $model->scaleMin = $map['ScaleMin'];
        }
        if (isset($map['ScaleRoNumMax'])) {
            $model->scaleRoNumMax = $map['ScaleRoNumMax'];
        }
        if (isset($map['ScaleRoNumMin'])) {
            $model->scaleRoNumMin = $map['ScaleRoNumMin'];
        }
        if (isset($map['SecurityIPList'])) {
            $model->securityIPList = $map['SecurityIPList'];
        }
        if (isset($map['ServerlessType'])) {
            $model->serverlessType = $map['ServerlessType'];
        }
        if (isset($map['SourceResourceId'])) {
            $model->sourceResourceId = $map['SourceResourceId'];
        }
        if (isset($map['StandbyAZ'])) {
            $model->standbyAZ = $map['StandbyAZ'];
        }
        if (isset($map['StorageAutoScale'])) {
            $model->storageAutoScale = $map['StorageAutoScale'];
        }
        if (isset($map['StoragePayType'])) {
            $model->storagePayType = $map['StoragePayType'];
        }
        if (isset($map['StorageSpace'])) {
            $model->storageSpace = $map['StorageSpace'];
        }
        if (isset($map['StorageType'])) {
            $model->storageType = $map['StorageType'];
        }
        if (isset($map['StorageUpperBound'])) {
            $model->storageUpperBound = $map['StorageUpperBound'];
        }
        if (isset($map['StrictConsistency'])) {
            $model->strictConsistency = $map['StrictConsistency'];
        }
        if (isset($map['TDEStatus'])) {
            $model->TDEStatus = $map['TDEStatus'];
        }
        if (isset($map['Tag'])) {
            if (!empty($map['Tag'])) {
                $model->tag = [];
                $n          = 0;
                foreach ($map['Tag'] as $item) {
                    $model->tag[$n++] = null !== $item ? tag::fromMap($item) : $item;
                }
            }
        }
        if (isset($map['UsedTime'])) {
            $model->usedTime = $map['UsedTime'];
        }
        if (isset($map['VPCId'])) {
            $model->VPCId = $map['VPCId'];
        }
        if (isset($map['VSwitchId'])) {
            $model->vSwitchId = $map['VSwitchId'];
        }
        if (isset($map['ZoneId'])) {
            $model->zoneId = $map['ZoneId'];
        }

        return $model;
    }
}
